
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000317c  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf30  0800bf30  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf38  0800bf38  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf38  0800bf38  0001bf38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf3c  0800bf3c  0001bf3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bf40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000032c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee8f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004129  00000000  00000000  0003ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00043068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014a8  00000000  00000000  00044618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ec0  00000000  00000000  00045ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da7a  00000000  00000000  0006a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40cd  00000000  00000000  000883fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015c4c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d1c  00000000  00000000  0015c51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d9c 	.word	0x08008d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008d9c 	.word	0x08008d9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <display_time_alarm>:
uint8_t alarm_date = 0;
uint8_t alarm_day= 0;
uint8_t counter_alarm = 0;
uint8_t alarm_flag = 0;

void display_time_alarm(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <display_time_alarm+0xe4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b29a      	uxth	r2, r3
 8000584:	2318      	movs	r3, #24
 8000586:	9302      	str	r3, [sp, #8]
 8000588:	2300      	movs	r3, #0
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	2164      	movs	r1, #100	; 0x64
 8000596:	2046      	movs	r0, #70	; 0x46
 8000598:	f002 f8ee 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <display_time_alarm+0xe8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2318      	movs	r3, #24
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2300      	movs	r3, #0
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2302      	movs	r3, #2
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	206e      	movs	r0, #110	; 0x6e
 80005b6:	f002 f8df 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <display_time_alarm+0xec>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2318      	movs	r3, #24
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	2300      	movs	r3, #0
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2302      	movs	r3, #2
 80005d0:	2164      	movs	r1, #100	; 0x64
 80005d2:	2096      	movs	r0, #150	; 0x96
 80005d4:	f002 f8d0 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <display_time_alarm+0xf0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	2318      	movs	r3, #24
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2302      	movs	r3, #2
 80005f2:	2182      	movs	r1, #130	; 0x82
 80005f4:	2014      	movs	r0, #20
 80005f6:	f002 f8bf 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <display_time_alarm+0xf4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2318      	movs	r3, #24
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2302      	movs	r3, #2
 8000610:	2182      	movs	r1, #130	; 0x82
 8000612:	2046      	movs	r0, #70	; 0x46
 8000614:	f002 f8b0 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <display_time_alarm+0xf8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29a      	uxth	r2, r3
 800061e:	2318      	movs	r3, #24
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	2182      	movs	r1, #130	; 0x82
 8000630:	206e      	movs	r0, #110	; 0x6e
 8000632:	f002 f8a1 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <display_time_alarm+0xfc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29a      	uxth	r2, r3
 800063c:	2318      	movs	r3, #24
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2300      	movs	r3, #0
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2182      	movs	r1, #130	; 0x82
 800064e:	2096      	movs	r0, #150	; 0x96
 8000650:	f002 f892 	bl	8002778 <lcd_ShowIntNum>
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098
 8000660:	20000099 	.word	0x20000099
 8000664:	2000009a 	.word	0x2000009a
 8000668:	2000009e 	.word	0x2000009e
 800066c:	2000009d 	.word	0x2000009d
 8000670:	2000009c 	.word	0x2000009c
 8000674:	2000009b 	.word	0x2000009b

08000678 <take_current_time_for_alarm>:

void take_current_time_for_alarm(){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	alarm_hours = ds3231_hours;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <take_current_time_for_alarm+0x48>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <take_current_time_for_alarm+0x4c>)
 8000682:	701a      	strb	r2, [r3, #0]
	alarm_min = ds3231_min;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <take_current_time_for_alarm+0x50>)
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <take_current_time_for_alarm+0x54>)
 800068a:	701a      	strb	r2, [r3, #0]
	alarm_sec = ds3231_sec;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <take_current_time_for_alarm+0x58>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <take_current_time_for_alarm+0x5c>)
 8000692:	701a      	strb	r2, [r3, #0]
	alarm_year = ds3231_year;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <take_current_time_for_alarm+0x60>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <take_current_time_for_alarm+0x64>)
 800069a:	701a      	strb	r2, [r3, #0]
	alarm_month = ds3231_month;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <take_current_time_for_alarm+0x68>)
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <take_current_time_for_alarm+0x6c>)
 80006a2:	701a      	strb	r2, [r3, #0]
	alarm_date = ds3231_date;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <take_current_time_for_alarm+0x70>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <take_current_time_for_alarm+0x74>)
 80006aa:	701a      	strb	r2, [r3, #0]
	alarm_day= ds3231_day;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <take_current_time_for_alarm+0x78>)
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <take_current_time_for_alarm+0x7c>)
 80006b2:	701a      	strb	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200000fd 	.word	0x200000fd
 80006c4:	20000098 	.word	0x20000098
 80006c8:	200000fa 	.word	0x200000fa
 80006cc:	20000099 	.word	0x20000099
 80006d0:	200000f8 	.word	0x200000f8
 80006d4:	2000009a 	.word	0x2000009a
 80006d8:	200000f9 	.word	0x200000f9
 80006dc:	2000009b 	.word	0x2000009b
 80006e0:	200000fe 	.word	0x200000fe
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	200000fb 	.word	0x200000fb
 80006ec:	2000009d 	.word	0x2000009d
 80006f0:	200000fc 	.word	0x200000fc
 80006f4:	2000009e 	.word	0x2000009e

080006f8 <alarm_clock>:
void alarm_clock(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af04      	add	r7, sp, #16
	counter_modify_clock = (counter_modify_clock+1)%10;
 80006fe:	4ba3      	ldr	r3, [pc, #652]	; (800098c <alarm_clock+0x294>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	4ba2      	ldr	r3, [pc, #648]	; (8000990 <alarm_clock+0x298>)
 8000706:	fb83 1302 	smull	r1, r3, r3, r2
 800070a:	1099      	asrs	r1, r3, #2
 800070c:	17d3      	asrs	r3, r2, #31
 800070e:	1ac9      	subs	r1, r1, r3
 8000710:	460b      	mov	r3, r1
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	440b      	add	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	1ad1      	subs	r1, r2, r3
 800071a:	b28a      	uxth	r2, r1
 800071c:	4b9b      	ldr	r3, [pc, #620]	; (800098c <alarm_clock+0x294>)
 800071e:	801a      	strh	r2, [r3, #0]
	switch(state_modify_clock){
 8000720:	4b9c      	ldr	r3, [pc, #624]	; (8000994 <alarm_clock+0x29c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	2b06      	cmp	r3, #6
 8000726:	f200 844b 	bhi.w	8000fc0 <alarm_clock+0x8c8>
 800072a:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <alarm_clock+0x38>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	080009b5 	.word	0x080009b5
 8000734:	08000ab9 	.word	0x08000ab9
 8000738:	08000bc1 	.word	0x08000bc1
 800073c:	08000eed 	.word	0x08000eed
 8000740:	08000dd1 	.word	0x08000dd1
 8000744:	0800074d 	.word	0x0800074d
 8000748:	08000ce9 	.word	0x08000ce9
	case MODIFY_DATE:
		if (counter_modify_clock == 0){
 800074c:	4b8f      	ldr	r3, [pc, #572]	; (800098c <alarm_clock+0x294>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10f      	bne.n	8000774 <alarm_clock+0x7c>
			lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 8000754:	4b90      	ldr	r3, [pc, #576]	; (8000998 <alarm_clock+0x2a0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b29a      	uxth	r2, r3
 800075a:	2318      	movs	r3, #24
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	2182      	movs	r1, #130	; 0x82
 800076c:	2046      	movs	r0, #70	; 0x46
 800076e:	f002 f803 	bl	8002778 <lcd_ShowIntNum>
 8000772:	e011      	b.n	8000798 <alarm_clock+0xa0>
		}
		else if (counter_modify_clock == 5){
 8000774:	4b85      	ldr	r3, [pc, #532]	; (800098c <alarm_clock+0x294>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	2b05      	cmp	r3, #5
 800077a:	d10d      	bne.n	8000798 <alarm_clock+0xa0>
			lcd_ShowIntNum(70, 130, alarm_date, 2, BLACK, BLACK, 24);
 800077c:	4b86      	ldr	r3, [pc, #536]	; (8000998 <alarm_clock+0x2a0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	2318      	movs	r3, #24
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2300      	movs	r3, #0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	2182      	movs	r1, #130	; 0x82
 8000792:	2046      	movs	r0, #70	; 0x46
 8000794:	f001 fff0 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000798:	4b80      	ldr	r3, [pc, #512]	; (800099c <alarm_clock+0x2a4>)
 800079a:	88db      	ldrh	r3, [r3, #6]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d16e      	bne.n	800087e <alarm_clock+0x186>
			if (alarm_month == 1 || alarm_month == 3 || alarm_month == 5 || alarm_month == 7 || alarm_month == 8 || alarm_month == 10 || alarm_month == 12){
 80007a0:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <alarm_clock+0x2a8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d017      	beq.n	80007d8 <alarm_clock+0xe0>
 80007a8:	4b7d      	ldr	r3, [pc, #500]	; (80009a0 <alarm_clock+0x2a8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d013      	beq.n	80007d8 <alarm_clock+0xe0>
 80007b0:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <alarm_clock+0x2a8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d00f      	beq.n	80007d8 <alarm_clock+0xe0>
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <alarm_clock+0x2a8>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d00b      	beq.n	80007d8 <alarm_clock+0xe0>
 80007c0:	4b77      	ldr	r3, [pc, #476]	; (80009a0 <alarm_clock+0x2a8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d007      	beq.n	80007d8 <alarm_clock+0xe0>
 80007c8:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <alarm_clock+0x2a8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	d003      	beq.n	80007d8 <alarm_clock+0xe0>
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <alarm_clock+0x2a8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0c      	cmp	r3, #12
 80007d6:	d112      	bne.n	80007fe <alarm_clock+0x106>
				alarm_date = alarm_date%31+1;
 80007d8:	4b6f      	ldr	r3, [pc, #444]	; (8000998 <alarm_clock+0x2a0>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <alarm_clock+0x2ac>)
 80007de:	fba3 1302 	umull	r1, r3, r3, r2
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	0849      	lsrs	r1, r1, #1
 80007e6:	440b      	add	r3, r1
 80007e8:	0919      	lsrs	r1, r3, #4
 80007ea:	460b      	mov	r3, r1
 80007ec:	015b      	lsls	r3, r3, #5
 80007ee:	1a5b      	subs	r3, r3, r1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b67      	ldr	r3, [pc, #412]	; (8000998 <alarm_clock+0x2a0>)
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	e030      	b.n	8000860 <alarm_clock+0x168>
			}
			else if (alarm_month == 4 || alarm_month == 6 || alarm_month == 9 || alarm_month == 11){
 80007fe:	4b68      	ldr	r3, [pc, #416]	; (80009a0 <alarm_clock+0x2a8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d00b      	beq.n	800081e <alarm_clock+0x126>
 8000806:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <alarm_clock+0x2a8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b06      	cmp	r3, #6
 800080c:	d007      	beq.n	800081e <alarm_clock+0x126>
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <alarm_clock+0x2a8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b09      	cmp	r3, #9
 8000814:	d003      	beq.n	800081e <alarm_clock+0x126>
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <alarm_clock+0x2a8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b0b      	cmp	r3, #11
 800081c:	d110      	bne.n	8000840 <alarm_clock+0x148>
				alarm_date = alarm_date%30+1;
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <alarm_clock+0x2a0>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <alarm_clock+0x2b0>)
 8000824:	fba3 1302 	umull	r1, r3, r3, r2
 8000828:	0919      	lsrs	r1, r3, #4
 800082a:	460b      	mov	r3, r1
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	1a5b      	subs	r3, r3, r1
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b57      	ldr	r3, [pc, #348]	; (8000998 <alarm_clock+0x2a0>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e00f      	b.n	8000860 <alarm_clock+0x168>
			}
			else{
				alarm_date = alarm_date%28+1;
 8000840:	4b55      	ldr	r3, [pc, #340]	; (8000998 <alarm_clock+0x2a0>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	0893      	lsrs	r3, r2, #2
 8000846:	4959      	ldr	r1, [pc, #356]	; (80009ac <alarm_clock+0x2b4>)
 8000848:	fba1 3103 	umull	r3, r1, r1, r3
 800084c:	460b      	mov	r3, r1
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a5b      	subs	r3, r3, r1
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	3301      	adds	r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b4e      	ldr	r3, [pc, #312]	; (8000998 <alarm_clock+0x2a0>)
 800085e:	701a      	strb	r2, [r3, #0]
			}
			lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 8000860:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <alarm_clock+0x2a0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29a      	uxth	r2, r3
 8000866:	2318      	movs	r3, #24
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2302      	movs	r3, #2
 8000876:	2182      	movs	r1, #130	; 0x82
 8000878:	2046      	movs	r0, #70	; 0x46
 800087a:	f001 ff7d 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] >= 40){
 800087e:	4b47      	ldr	r3, [pc, #284]	; (800099c <alarm_clock+0x2a4>)
 8000880:	88db      	ldrh	r3, [r3, #6]
 8000882:	2b27      	cmp	r3, #39	; 0x27
 8000884:	f240 839e 	bls.w	8000fc4 <alarm_clock+0x8cc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000888:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <alarm_clock+0x2b8>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	425a      	negs	r2, r3
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	f002 0203 	and.w	r2, r2, #3
 8000898:	bf58      	it	pl
 800089a:	4253      	negpl	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <alarm_clock+0x2b8>)
 80008a0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <alarm_clock+0x2b8>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f040 838c 	bne.w	8000fc4 <alarm_clock+0x8cc>
				if (alarm_month == 1 || alarm_month == 3 || alarm_month == 5 || alarm_month == 7 || alarm_month == 8 || alarm_month == 10 || alarm_month == 12){
 80008ac:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <alarm_clock+0x2a8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d017      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008b4:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <alarm_clock+0x2a8>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d013      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <alarm_clock+0x2a8>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d00f      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008c4:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <alarm_clock+0x2a8>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d00b      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <alarm_clock+0x2a8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d007      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <alarm_clock+0x2a8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0a      	cmp	r3, #10
 80008da:	d003      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008dc:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <alarm_clock+0x2a8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b0c      	cmp	r3, #12
 80008e2:	d112      	bne.n	800090a <alarm_clock+0x212>
					alarm_date = alarm_date%31+1;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <alarm_clock+0x2a0>)
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <alarm_clock+0x2ac>)
 80008ea:	fba3 1302 	umull	r1, r3, r3, r2
 80008ee:	1ad1      	subs	r1, r2, r3
 80008f0:	0849      	lsrs	r1, r1, #1
 80008f2:	440b      	add	r3, r1
 80008f4:	0919      	lsrs	r1, r3, #4
 80008f6:	460b      	mov	r3, r1
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <alarm_clock+0x2a0>)
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e030      	b.n	800096c <alarm_clock+0x274>
				}
				else if (alarm_month == 4 || alarm_month == 6 || alarm_month == 9 || alarm_month == 11){
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <alarm_clock+0x2a8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b04      	cmp	r3, #4
 8000910:	d00b      	beq.n	800092a <alarm_clock+0x232>
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <alarm_clock+0x2a8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b06      	cmp	r3, #6
 8000918:	d007      	beq.n	800092a <alarm_clock+0x232>
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <alarm_clock+0x2a8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b09      	cmp	r3, #9
 8000920:	d003      	beq.n	800092a <alarm_clock+0x232>
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <alarm_clock+0x2a8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b0b      	cmp	r3, #11
 8000928:	d110      	bne.n	800094c <alarm_clock+0x254>
					alarm_date = alarm_date%30+1;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <alarm_clock+0x2a0>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <alarm_clock+0x2b0>)
 8000930:	fba3 1302 	umull	r1, r3, r3, r2
 8000934:	0919      	lsrs	r1, r3, #4
 8000936:	460b      	mov	r3, r1
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	1a5b      	subs	r3, r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <alarm_clock+0x2a0>)
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e00f      	b.n	800096c <alarm_clock+0x274>
				}
				else{
					alarm_date = alarm_date%28+1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <alarm_clock+0x2a0>)
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	0893      	lsrs	r3, r2, #2
 8000952:	4916      	ldr	r1, [pc, #88]	; (80009ac <alarm_clock+0x2b4>)
 8000954:	fba1 3103 	umull	r3, r1, r1, r3
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <alarm_clock+0x2a0>)
 800096a:	701a      	strb	r2, [r3, #0]
				}
				lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <alarm_clock+0x2a0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b29a      	uxth	r2, r3
 8000972:	2318      	movs	r3, #24
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2300      	movs	r3, #0
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	2182      	movs	r1, #130	; 0x82
 8000984:	2046      	movs	r0, #70	; 0x46
 8000986:	f001 fef7 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 800098a:	e31b      	b.n	8000fc4 <alarm_clock+0x8cc>
 800098c:	200000a8 	.word	0x200000a8
 8000990:	66666667 	.word	0x66666667
 8000994:	20000000 	.word	0x20000000
 8000998:	2000009d 	.word	0x2000009d
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	08421085 	.word	0x08421085
 80009a8:	88888889 	.word	0x88888889
 80009ac:	24924925 	.word	0x24924925
 80009b0:	200000aa 	.word	0x200000aa
	case MODIFY_HOUR:
		if (counter_modify_clock == 0){
 80009b4:	4b8c      	ldr	r3, [pc, #560]	; (8000be8 <alarm_clock+0x4f0>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10f      	bne.n	80009dc <alarm_clock+0x2e4>
			lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 80009bc:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <alarm_clock+0x4f4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2318      	movs	r3, #24
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2300      	movs	r3, #0
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2302      	movs	r3, #2
 80009d2:	2164      	movs	r1, #100	; 0x64
 80009d4:	2046      	movs	r0, #70	; 0x46
 80009d6:	f001 fecf 	bl	8002778 <lcd_ShowIntNum>
 80009da:	e011      	b.n	8000a00 <alarm_clock+0x308>
		}
		else if (counter_modify_clock == 5){
 80009dc:	4b82      	ldr	r3, [pc, #520]	; (8000be8 <alarm_clock+0x4f0>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d10d      	bne.n	8000a00 <alarm_clock+0x308>
			lcd_ShowIntNum(70, 100, alarm_hours, 2, BLACK, BLACK, 24);
 80009e4:	4b81      	ldr	r3, [pc, #516]	; (8000bec <alarm_clock+0x4f4>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	2318      	movs	r3, #24
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2300      	movs	r3, #0
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2302      	movs	r3, #2
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	2046      	movs	r0, #70	; 0x46
 80009fc:	f001 febc 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000a00:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <alarm_clock+0x4f8>)
 8000a02:	88db      	ldrh	r3, [r3, #6]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d11f      	bne.n	8000a48 <alarm_clock+0x350>
			alarm_hours = (alarm_hours+1)%24;
 8000a08:	4b78      	ldr	r3, [pc, #480]	; (8000bec <alarm_clock+0x4f4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <alarm_clock+0x4fc>)
 8000a10:	fb83 1302 	smull	r1, r3, r3, r2
 8000a14:	1099      	asrs	r1, r3, #2
 8000a16:	17d3      	asrs	r3, r2, #31
 8000a18:	1ac9      	subs	r1, r1, r3
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	440b      	add	r3, r1
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	1ad1      	subs	r1, r2, r3
 8000a24:	b2ca      	uxtb	r2, r1
 8000a26:	4b71      	ldr	r3, [pc, #452]	; (8000bec <alarm_clock+0x4f4>)
 8000a28:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 8000a2a:	4b70      	ldr	r3, [pc, #448]	; (8000bec <alarm_clock+0x4f4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	2318      	movs	r3, #24
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	2046      	movs	r0, #70	; 0x46
 8000a44:	f001 fe98 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <alarm_clock+0x4f8>)
 8000a4a:	88db      	ldrh	r3, [r3, #6]
 8000a4c:	2b27      	cmp	r3, #39	; 0x27
 8000a4e:	f240 82bb 	bls.w	8000fc8 <alarm_clock+0x8d0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <alarm_clock+0x500>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	425a      	negs	r2, r3
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	bf58      	it	pl
 8000a64:	4253      	negpl	r3, r2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <alarm_clock+0x500>)
 8000a6a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000a6c:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <alarm_clock+0x500>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f040 82a9 	bne.w	8000fc8 <alarm_clock+0x8d0>
				alarm_hours = (alarm_hours+1)%24;
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <alarm_clock+0x4f4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <alarm_clock+0x4fc>)
 8000a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a82:	1099      	asrs	r1, r3, #2
 8000a84:	17d3      	asrs	r3, r2, #31
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	440b      	add	r3, r1
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	1ad1      	subs	r1, r2, r3
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <alarm_clock+0x4f4>)
 8000a96:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 8000a98:	4b54      	ldr	r3, [pc, #336]	; (8000bec <alarm_clock+0x4f4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	2318      	movs	r3, #24
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2302      	movs	r3, #2
 8000aae:	2164      	movs	r1, #100	; 0x64
 8000ab0:	2046      	movs	r0, #70	; 0x46
 8000ab2:	f001 fe61 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000ab6:	e287      	b.n	8000fc8 <alarm_clock+0x8d0>
	case MODIFY_MINUTE:
		if (counter_modify_clock == 0){
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <alarm_clock+0x4f0>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <alarm_clock+0x3e8>
			lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000ac0:	4b4e      	ldr	r3, [pc, #312]	; (8000bfc <alarm_clock+0x504>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	206e      	movs	r0, #110	; 0x6e
 8000ada:	f001 fe4d 	bl	8002778 <lcd_ShowIntNum>
 8000ade:	e011      	b.n	8000b04 <alarm_clock+0x40c>
		}
		else if (counter_modify_clock == 5){
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <alarm_clock+0x4f0>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d10d      	bne.n	8000b04 <alarm_clock+0x40c>
			lcd_ShowIntNum(110, 100, alarm_min, 2, BLACK, BLACK, 24);
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <alarm_clock+0x504>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	2318      	movs	r3, #24
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	2300      	movs	r3, #0
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2302      	movs	r3, #2
 8000afc:	2164      	movs	r1, #100	; 0x64
 8000afe:	206e      	movs	r0, #110	; 0x6e
 8000b00:	f001 fe3a 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <alarm_clock+0x4f8>)
 8000b06:	88db      	ldrh	r3, [r3, #6]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d120      	bne.n	8000b4e <alarm_clock+0x456>
			alarm_min = (alarm_min+1)%60;
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <alarm_clock+0x504>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <alarm_clock+0x508>)
 8000b14:	fb83 1302 	smull	r1, r3, r3, r2
 8000b18:	4413      	add	r3, r2
 8000b1a:	1159      	asrs	r1, r3, #5
 8000b1c:	17d3      	asrs	r3, r2, #31
 8000b1e:	1ac9      	subs	r1, r1, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	1ad1      	subs	r1, r2, r3
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <alarm_clock+0x504>)
 8000b2e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <alarm_clock+0x504>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	2318      	movs	r3, #24
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2302      	movs	r3, #2
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	206e      	movs	r0, #110	; 0x6e
 8000b4a:	f001 fe15 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <alarm_clock+0x4f8>)
 8000b50:	88db      	ldrh	r3, [r3, #6]
 8000b52:	2b27      	cmp	r3, #39	; 0x27
 8000b54:	f240 823a 	bls.w	8000fcc <alarm_clock+0x8d4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <alarm_clock+0x500>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	425a      	negs	r2, r3
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	bf58      	it	pl
 8000b6a:	4253      	negpl	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <alarm_clock+0x500>)
 8000b70:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <alarm_clock+0x500>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8228 	bne.w	8000fcc <alarm_clock+0x8d4>
				alarm_min = (alarm_min+1)%60;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <alarm_clock+0x504>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <alarm_clock+0x508>)
 8000b84:	fb83 1302 	smull	r1, r3, r3, r2
 8000b88:	4413      	add	r3, r2
 8000b8a:	1159      	asrs	r1, r3, #5
 8000b8c:	17d3      	asrs	r3, r2, #31
 8000b8e:	1ac9      	subs	r1, r1, r3
 8000b90:	460b      	mov	r3, r1
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	1ad1      	subs	r1, r2, r3
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <alarm_clock+0x504>)
 8000b9e:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <alarm_clock+0x504>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2318      	movs	r3, #24
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2300      	movs	r3, #0
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	2164      	movs	r1, #100	; 0x64
 8000bb8:	206e      	movs	r0, #110	; 0x6e
 8000bba:	f001 fddd 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000bbe:	e205      	b.n	8000fcc <alarm_clock+0x8d4>
	case MODIFY_SECOND:
		if (counter_modify_clock == 0){
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <alarm_clock+0x4f0>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11f      	bne.n	8000c08 <alarm_clock+0x510>
			lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <alarm_clock+0x50c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2318      	movs	r3, #24
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	2164      	movs	r1, #100	; 0x64
 8000be0:	2096      	movs	r0, #150	; 0x96
 8000be2:	f001 fdc9 	bl	8002778 <lcd_ShowIntNum>
 8000be6:	e021      	b.n	8000c2c <alarm_clock+0x534>
 8000be8:	200000a8 	.word	0x200000a8
 8000bec:	20000098 	.word	0x20000098
 8000bf0:	200000d8 	.word	0x200000d8
 8000bf4:	2aaaaaab 	.word	0x2aaaaaab
 8000bf8:	200000aa 	.word	0x200000aa
 8000bfc:	20000099 	.word	0x20000099
 8000c00:	88888889 	.word	0x88888889
 8000c04:	2000009a 	.word	0x2000009a
		}
		else if (counter_modify_clock == 5){
 8000c08:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <alarm_clock+0x700>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2b05      	cmp	r3, #5
 8000c0e:	d10d      	bne.n	8000c2c <alarm_clock+0x534>
			lcd_ShowIntNum(150, 100, alarm_sec, 2, BLACK, BLACK, 24);
 8000c10:	4b7a      	ldr	r3, [pc, #488]	; (8000dfc <alarm_clock+0x704>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	2318      	movs	r3, #24
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2302      	movs	r3, #2
 8000c24:	2164      	movs	r1, #100	; 0x64
 8000c26:	2096      	movs	r0, #150	; 0x96
 8000c28:	f001 fda6 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000c2c:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <alarm_clock+0x708>)
 8000c2e:	88db      	ldrh	r3, [r3, #6]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d120      	bne.n	8000c76 <alarm_clock+0x57e>
			alarm_sec = (alarm_sec+1)%60;
 8000c34:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <alarm_clock+0x704>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <alarm_clock+0x70c>)
 8000c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c40:	4413      	add	r3, r2
 8000c42:	1159      	asrs	r1, r3, #5
 8000c44:	17d3      	asrs	r3, r2, #31
 8000c46:	1ac9      	subs	r1, r1, r3
 8000c48:	460b      	mov	r3, r1
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	1ad1      	subs	r1, r2, r3
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <alarm_clock+0x704>)
 8000c56:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <alarm_clock+0x704>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	2318      	movs	r3, #24
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2300      	movs	r3, #0
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	2164      	movs	r1, #100	; 0x64
 8000c70:	2096      	movs	r0, #150	; 0x96
 8000c72:	f001 fd81 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000c76:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <alarm_clock+0x708>)
 8000c78:	88db      	ldrh	r3, [r3, #6]
 8000c7a:	2b27      	cmp	r3, #39	; 0x27
 8000c7c:	f240 81a8 	bls.w	8000fd0 <alarm_clock+0x8d8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000c80:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <alarm_clock+0x710>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	425a      	negs	r2, r3
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	bf58      	it	pl
 8000c92:	4253      	negpl	r3, r2
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <alarm_clock+0x710>)
 8000c98:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000c9a:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <alarm_clock+0x710>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8196 	bne.w	8000fd0 <alarm_clock+0x8d8>
				alarm_sec = (alarm_sec+1)%60;
 8000ca4:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <alarm_clock+0x704>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <alarm_clock+0x70c>)
 8000cac:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	1159      	asrs	r1, r3, #5
 8000cb4:	17d3      	asrs	r3, r2, #31
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	1ad1      	subs	r1, r2, r3
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <alarm_clock+0x704>)
 8000cc6:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <alarm_clock+0x704>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	2318      	movs	r3, #24
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	2096      	movs	r0, #150	; 0x96
 8000ce2:	f001 fd49 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000ce6:	e173      	b.n	8000fd0 <alarm_clock+0x8d8>
	case MODIFY_DAY:
		if (counter_modify_clock == 0){
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <alarm_clock+0x700>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d111      	bne.n	8000d14 <alarm_clock+0x61c>
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000cf0:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <alarm_clock+0x714>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	2182      	movs	r1, #130	; 0x82
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f001 fd33 	bl	8002778 <lcd_ShowIntNum>
 8000d12:	e013      	b.n	8000d3c <alarm_clock+0x644>
		}
		else if (counter_modify_clock == 5){
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <alarm_clock+0x700>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d10f      	bne.n	8000d3c <alarm_clock+0x644>
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, BLACK, BLACK, 24);
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <alarm_clock+0x714>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	2318      	movs	r3, #24
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2302      	movs	r3, #2
 8000d34:	2182      	movs	r1, #130	; 0x82
 8000d36:	2014      	movs	r0, #20
 8000d38:	f001 fd1e 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <alarm_clock+0x708>)
 8000d3e:	88db      	ldrh	r3, [r3, #6]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d116      	bne.n	8000d72 <alarm_clock+0x67a>
			alarm_day += 1;
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <alarm_clock+0x714>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <alarm_clock+0x714>)
 8000d4e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <alarm_clock+0x714>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	2182      	movs	r1, #130	; 0x82
 8000d6c:	2014      	movs	r0, #20
 8000d6e:	f001 fd03 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <alarm_clock+0x708>)
 8000d74:	88db      	ldrh	r3, [r3, #6]
 8000d76:	2b27      	cmp	r3, #39	; 0x27
 8000d78:	f240 812c 	bls.w	8000fd4 <alarm_clock+0x8dc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <alarm_clock+0x710>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	425a      	negs	r2, r3
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	bf58      	it	pl
 8000d8e:	4253      	negpl	r3, r2
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <alarm_clock+0x710>)
 8000d94:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <alarm_clock+0x710>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 811a 	bne.w	8000fd4 <alarm_clock+0x8dc>
				alarm_day += 1;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <alarm_clock+0x714>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <alarm_clock+0x714>)
 8000daa:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <alarm_clock+0x714>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	2318      	movs	r3, #24
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	2182      	movs	r1, #130	; 0x82
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 fcd5 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000dce:	e101      	b.n	8000fd4 <alarm_clock+0x8dc>
	case MODIFY_MONTH:
		if (counter_modify_clock == 0){
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <alarm_clock+0x700>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11d      	bne.n	8000e14 <alarm_clock+0x71c>
			lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <alarm_clock+0x718>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	2318      	movs	r3, #24
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2300      	movs	r3, #0
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2302      	movs	r3, #2
 8000dee:	2182      	movs	r1, #130	; 0x82
 8000df0:	206e      	movs	r0, #110	; 0x6e
 8000df2:	f001 fcc1 	bl	8002778 <lcd_ShowIntNum>
 8000df6:	e01f      	b.n	8000e38 <alarm_clock+0x740>
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	2000009a 	.word	0x2000009a
 8000e00:	200000d8 	.word	0x200000d8
 8000e04:	88888889 	.word	0x88888889
 8000e08:	200000aa 	.word	0x200000aa
 8000e0c:	2000009e 	.word	0x2000009e
 8000e10:	2000009c 	.word	0x2000009c
		}
		else if (counter_modify_clock == 5){
 8000e14:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <alarm_clock+0x8ec>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d10d      	bne.n	8000e38 <alarm_clock+0x740>
			lcd_ShowIntNum(110, 130, alarm_month, 2, BLACK, BLACK, 24);
 8000e1c:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	2318      	movs	r3, #24
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	2300      	movs	r3, #0
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2302      	movs	r3, #2
 8000e30:	2182      	movs	r1, #130	; 0x82
 8000e32:	206e      	movs	r0, #110	; 0x6e
 8000e34:	f001 fca0 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000e38:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <alarm_clock+0x8f4>)
 8000e3a:	88db      	ldrh	r3, [r3, #6]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d11e      	bne.n	8000e7e <alarm_clock+0x786>
			alarm_month = alarm_month%12+1;
 8000e40:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <alarm_clock+0x8f8>)
 8000e46:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4a:	08d9      	lsrs	r1, r3, #3
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	440b      	add	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000e60:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	2318      	movs	r3, #24
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2302      	movs	r3, #2
 8000e76:	2182      	movs	r1, #130	; 0x82
 8000e78:	206e      	movs	r0, #110	; 0x6e
 8000e7a:	f001 fc7d 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <alarm_clock+0x8f4>)
 8000e80:	88db      	ldrh	r3, [r3, #6]
 8000e82:	2b27      	cmp	r3, #39	; 0x27
 8000e84:	f240 80a8 	bls.w	8000fd8 <alarm_clock+0x8e0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000e88:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <alarm_clock+0x8fc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	425a      	negs	r2, r3
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	bf58      	it	pl
 8000e9a:	4253      	negpl	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b55      	ldr	r3, [pc, #340]	; (8000ff4 <alarm_clock+0x8fc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <alarm_clock+0x8fc>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 8096 	bne.w	8000fd8 <alarm_clock+0x8e0>
				alarm_month = alarm_month%12+1;
 8000eac:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <alarm_clock+0x8f0>)
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <alarm_clock+0x8f8>)
 8000eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb6:	08d9      	lsrs	r1, r3, #3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	440b      	add	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <alarm_clock+0x8f0>)
 8000eca:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <alarm_clock+0x8f0>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	2182      	movs	r1, #130	; 0x82
 8000ee4:	206e      	movs	r0, #110	; 0x6e
 8000ee6:	f001 fc47 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000eea:	e075      	b.n	8000fd8 <alarm_clock+0x8e0>
	case MODIFY_YEAR:
		if (counter_modify_clock == 0){
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <alarm_clock+0x8ec>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <alarm_clock+0x81c>
			lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000ef4:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <alarm_clock+0x900>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	2318      	movs	r3, #24
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2182      	movs	r1, #130	; 0x82
 8000f0c:	2096      	movs	r0, #150	; 0x96
 8000f0e:	f001 fc33 	bl	8002778 <lcd_ShowIntNum>
 8000f12:	e011      	b.n	8000f38 <alarm_clock+0x840>
		}
		else if (counter_modify_clock == 5){
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <alarm_clock+0x8ec>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10d      	bne.n	8000f38 <alarm_clock+0x840>
			lcd_ShowIntNum(150, 130, alarm_year, 2, BLACK, BLACK, 24);
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <alarm_clock+0x900>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	2318      	movs	r3, #24
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2300      	movs	r3, #0
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	2182      	movs	r1, #130	; 0x82
 8000f32:	2096      	movs	r0, #150	; 0x96
 8000f34:	f001 fc20 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <alarm_clock+0x8f4>)
 8000f3a:	88db      	ldrh	r3, [r3, #6]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d114      	bne.n	8000f6a <alarm_clock+0x872>
			alarm_year += 1;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <alarm_clock+0x900>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <alarm_clock+0x900>)
 8000f4a:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <alarm_clock+0x900>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	2318      	movs	r3, #24
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2302      	movs	r3, #2
 8000f62:	2182      	movs	r1, #130	; 0x82
 8000f64:	2096      	movs	r0, #150	; 0x96
 8000f66:	f001 fc07 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <alarm_clock+0x8f4>)
 8000f6c:	88db      	ldrh	r3, [r3, #6]
 8000f6e:	2b27      	cmp	r3, #39	; 0x27
 8000f70:	d934      	bls.n	8000fdc <alarm_clock+0x8e4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	425a      	negs	r2, r3
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	bf58      	it	pl
 8000f84:	4253      	negpl	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d123      	bne.n	8000fdc <alarm_clock+0x8e4>
				alarm_year += 1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <alarm_clock+0x900>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <alarm_clock+0x900>)
 8000f9e:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <alarm_clock+0x900>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	2182      	movs	r1, #130	; 0x82
 8000fb8:	2096      	movs	r0, #150	; 0x96
 8000fba:	f001 fbdd 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000fbe:	e00d      	b.n	8000fdc <alarm_clock+0x8e4>
	default:
		break;
 8000fc0:	bf00      	nop
 8000fc2:	e00c      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fc4:	bf00      	nop
 8000fc6:	e00a      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fc8:	bf00      	nop
 8000fca:	e008      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fcc:	bf00      	nop
 8000fce:	e006      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd0:	bf00      	nop
 8000fd2:	e004      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd4:	bf00      	nop
 8000fd6:	e002      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd8:	bf00      	nop
 8000fda:	e000      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fdc:	bf00      	nop
	}

}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a8 	.word	0x200000a8
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	200000d8 	.word	0x200000d8
 8000ff0:	aaaaaaab 	.word	0xaaaaaaab
 8000ff4:	200000aa 	.word	0x200000aa
 8000ff8:	2000009b 	.word	0x2000009b

08000ffc <check_alarm>:

void check_alarm(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af04      	add	r7, sp, #16
	if (alarm_hours == ds3231_hours && alarm_min == ds3231_min && alarm_sec == ds3231_sec && alarm_year == ds3231_year && alarm_month == ds3231_month && alarm_date == ds3231_date && alarm_day == ds3231_day){
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <check_alarm+0xc0>)
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <check_alarm+0xc4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d126      	bne.n	800105c <check_alarm+0x60>
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <check_alarm+0xc8>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <check_alarm+0xcc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d120      	bne.n	800105c <check_alarm+0x60>
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <check_alarm+0xd0>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <check_alarm+0xd4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d11a      	bne.n	800105c <check_alarm+0x60>
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <check_alarm+0xd8>)
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <check_alarm+0xdc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d114      	bne.n	800105c <check_alarm+0x60>
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <check_alarm+0xe0>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <check_alarm+0xe4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d10e      	bne.n	800105c <check_alarm+0x60>
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <check_alarm+0xe8>)
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <check_alarm+0xec>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d108      	bne.n	800105c <check_alarm+0x60>
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <check_alarm+0xf0>)
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <check_alarm+0xf4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d102      	bne.n	800105c <check_alarm+0x60>
		alarm_flag = 1;
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <check_alarm+0xf8>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
	}
	if (alarm_flag){
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <check_alarm+0xf8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d028      	beq.n	80010b6 <check_alarm+0xba>
		counter_alarm += 1;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <check_alarm+0xfc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <check_alarm+0xfc>)
 800106e:	701a      	strb	r2, [r3, #0]
		lcd_ShowStr(70, 200, "ALARM", WHITE, BLACK, 24, 0);
 8001070:	2300      	movs	r3, #0
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2318      	movs	r3, #24
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2300      	movs	r3, #0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <check_alarm+0x100>)
 8001082:	21c8      	movs	r1, #200	; 0xc8
 8001084:	2046      	movs	r0, #70	; 0x46
 8001086:	f001 fd79 	bl	8002b7c <lcd_ShowStr>
		if (counter_alarm == 200){
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <check_alarm+0xfc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2bc8      	cmp	r3, #200	; 0xc8
 8001090:	d111      	bne.n	80010b6 <check_alarm+0xba>
			counter_alarm = 0;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <check_alarm+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			alarm_flag = 0;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <check_alarm+0xf8>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
			lcd_ShowStr(70, 200, "ALARM", BLACK, BLACK, 24, 0);
 800109e:	2300      	movs	r3, #0
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2318      	movs	r3, #24
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <check_alarm+0x100>)
 80010ae:	21c8      	movs	r1, #200	; 0xc8
 80010b0:	2046      	movs	r0, #70	; 0x46
 80010b2:	f001 fd63 	bl	8002b7c <lcd_ShowStr>
		}
	}
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000098 	.word	0x20000098
 80010c0:	200000fd 	.word	0x200000fd
 80010c4:	20000099 	.word	0x20000099
 80010c8:	200000fa 	.word	0x200000fa
 80010cc:	2000009a 	.word	0x2000009a
 80010d0:	200000f8 	.word	0x200000f8
 80010d4:	2000009b 	.word	0x2000009b
 80010d8:	200000f9 	.word	0x200000f9
 80010dc:	2000009c 	.word	0x2000009c
 80010e0:	200000fe 	.word	0x200000fe
 80010e4:	2000009d 	.word	0x2000009d
 80010e8:	200000fb 	.word	0x200000fb
 80010ec:	2000009e 	.word	0x2000009e
 80010f0:	200000fc 	.word	0x200000fc
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	2000009f 	.word	0x2000009f
 80010fc:	08008db4 	.word	0x08008db4

08001100 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <button_init+0x14>)
 800110a:	f003 f8d3 	bl	80042b4 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020c00 	.word	0x40020c00

08001118 <button_Scan>:

void button_Scan(){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2108      	movs	r1, #8
 8001122:	482f      	ldr	r0, [pc, #188]	; (80011e0 <button_Scan+0xc8>)
 8001124:	f003 f8c6 	bl	80042b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2108      	movs	r1, #8
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <button_Scan+0xc8>)
 800112e:	f003 f8c1 	bl	80042b4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001132:	230a      	movs	r3, #10
 8001134:	2202      	movs	r2, #2
 8001136:	492b      	ldr	r1, [pc, #172]	; (80011e4 <button_Scan+0xcc>)
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <button_Scan+0xd0>)
 800113a:	f004 fffc 	bl	8006136 <HAL_SPI_Receive>
	  int button_index = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001146:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e03f      	b.n	80011ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db06      	blt.n	8001162 <button_Scan+0x4a>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	dc03      	bgt.n	8001162 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e018      	b.n	8001194 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b03      	cmp	r3, #3
 8001166:	dd07      	ble.n	8001178 <button_Scan+0x60>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b07      	cmp	r3, #7
 800116c:	dc04      	bgt.n	8001178 <button_Scan+0x60>
			  button_index = 7 - i;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f1c3 0307 	rsb	r3, r3, #7
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e00d      	b.n	8001194 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b07      	cmp	r3, #7
 800117c:	dd06      	ble.n	800118c <button_Scan+0x74>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0b      	cmp	r3, #11
 8001182:	dc03      	bgt.n	800118c <button_Scan+0x74>
			  button_index = i + 4;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3304      	adds	r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e003      	b.n	8001194 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1c3 0317 	rsb	r3, r3, #23
 8001192:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <button_Scan+0xcc>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	897b      	ldrh	r3, [r7, #10]
 800119a:	4013      	ands	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <button_Scan+0x96>
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <button_Scan+0xd4>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2100      	movs	r1, #0
 80011a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011ac:	e009      	b.n	80011c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <button_Scan+0xd4>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <button_Scan+0xd4>)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80011c2:	897b      	ldrh	r3, [r7, #10]
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	ddbc      	ble.n	800114e <button_Scan+0x36>
	  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	200000a2 	.word	0x200000a2
 80011e8:	200001e8 	.word	0x200001e8
 80011ec:	200000d8 	.word	0x200000d8

080011f0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80011f4:	201e      	movs	r0, #30
 80011f6:	f002 fc39 	bl	8003a6c <DEC2BCD>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <ds3231_init+0x80>)
 8001200:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001202:	2016      	movs	r0, #22
 8001204:	f002 fc32 	bl	8003a6c <DEC2BCD>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <ds3231_init+0x80>)
 800120e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001210:	2015      	movs	r0, #21
 8001212:	f002 fc2b 	bl	8003a6c <DEC2BCD>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <ds3231_init+0x80>)
 800121c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800121e:	2006      	movs	r0, #6
 8001220:	f002 fc24 	bl	8003a6c <DEC2BCD>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <ds3231_init+0x80>)
 800122a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800122c:	200f      	movs	r0, #15
 800122e:	f002 fc1d 	bl	8003a6c <DEC2BCD>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <ds3231_init+0x80>)
 8001238:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800123a:	2009      	movs	r0, #9
 800123c:	f002 fc16 	bl	8003a6c <DEC2BCD>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <ds3231_init+0x80>)
 8001246:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001248:	2017      	movs	r0, #23
 800124a:	f002 fc0f 	bl	8003a6c <DEC2BCD>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <ds3231_init+0x80>)
 8001254:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8001256:	2332      	movs	r3, #50	; 0x32
 8001258:	2203      	movs	r2, #3
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <ds3231_init+0x84>)
 800125e:	f003 fca7 	bl	8004bb0 <HAL_I2C_IsDeviceReady>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d000      	beq.n	800126a <ds3231_init+0x7a>
		while(1);
 8001268:	e7fe      	b.n	8001268 <ds3231_init+0x78>
	};
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000100 	.word	0x20000100
 8001274:	20000158 	.word	0x20000158

08001278 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fbee 	bl	8003a6c <DEC2BCD>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	b29a      	uxth	r2, r3
 8001298:	230a      	movs	r3, #10
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f107 030f 	add.w	r3, r7, #15
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	21d0      	movs	r1, #208	; 0xd0
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <ds3231_Write+0x40>)
 80012ac:	f003 f960 	bl	8004570 <HAL_I2C_Mem_Write>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000158 	.word	0x20000158

080012bc <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80012c2:	230a      	movs	r3, #10
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2307      	movs	r3, #7
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	2200      	movs	r2, #0
 80012d2:	21d0      	movs	r1, #208	; 0xd0
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <ds3231_ReadTime+0xa8>)
 80012d6:	f003 fa45 	bl	8004764 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fbaa 	bl	8003a38 <BCD2DEC>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <ds3231_ReadTime+0xac>)
 80012ea:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fba1 	bl	8003a38 <BCD2DEC>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <ds3231_ReadTime+0xb0>)
 80012fc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fb98 	bl	8003a38 <BCD2DEC>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <ds3231_ReadTime+0xb4>)
 800130e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001312:	78db      	ldrb	r3, [r3, #3]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fb8f 	bl	8003a38 <BCD2DEC>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <ds3231_ReadTime+0xb8>)
 8001320:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fb86 	bl	8003a38 <BCD2DEC>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <ds3231_ReadTime+0xbc>)
 8001332:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fb7d 	bl	8003a38 <BCD2DEC>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <ds3231_ReadTime+0xc0>)
 8001344:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001348:	799b      	ldrb	r3, [r3, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb74 	bl	8003a38 <BCD2DEC>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <ds3231_ReadTime+0xc4>)
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000100 	.word	0x20000100
 8001364:	20000158 	.word	0x20000158
 8001368:	200000f8 	.word	0x200000f8
 800136c:	200000fa 	.word	0x200000fa
 8001370:	200000fd 	.word	0x200000fd
 8001374:	200000fc 	.word	0x200000fc
 8001378:	200000fb 	.word	0x200000fb
 800137c:	200000fe 	.word	0x200000fe
 8001380:	200000f9 	.word	0x200000f9

08001384 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_FSMC_Init+0xec>)
 80013b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_FSMC_Init+0xec>)
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <MX_FSMC_Init+0xf0>)
 80013bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_FSMC_Init+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_FSMC_Init+0xec>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_FSMC_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_FSMC_Init+0xec>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_FSMC_Init+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_FSMC_Init+0xec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_FSMC_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_FSMC_Init+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_FSMC_Init+0xec>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_FSMC_Init+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_FSMC_Init+0xec>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_FSMC_Init+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_FSMC_Init+0xec>)
 800140c:	2200      	movs	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_FSMC_Init+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001416:	230f      	movs	r3, #15
 8001418:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800141a:	230f      	movs	r3, #15
 800141c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800141e:	233c      	movs	r3, #60	; 0x3c
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001426:	2310      	movs	r3, #16
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800142a:	2311      	movs	r3, #17
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001432:	2308      	movs	r3, #8
 8001434:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800143a:	2309      	movs	r3, #9
 800143c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001442:	2310      	movs	r3, #16
 8001444:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001446:	2311      	movs	r3, #17
 8001448:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800144e:	463a      	mov	r2, r7
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_FSMC_Init+0xec>)
 8001458:	f005 fa50 	bl	80068fc <HAL_SRAM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001462:	f002 f813 	bl	800348c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001466:	bf00      	nop
 8001468:	3738      	adds	r7, #56	; 0x38
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000108 	.word	0x20000108
 8001474:	a0000104 	.word	0xa0000104

08001478 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_FSMC_MspInit+0x88>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d131      	bne.n	80014f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_FSMC_MspInit+0x88>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <HAL_FSMC_MspInit+0x90>)
 80014d2:	f002 fd53 	bl	8003f7c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014e8:	230c      	movs	r3, #12
 80014ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <HAL_FSMC_MspInit+0x94>)
 80014f2:	f002 fd43 	bl	8003f7c <HAL_GPIO_Init>
 80014f6:	e000      	b.n	80014fa <HAL_FSMC_MspInit+0x82>
    return;
 80014f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000a4 	.word	0x200000a4
 8001504:	40023800 	.word	0x40023800
 8001508:	40021000 	.word	0x40021000
 800150c:	40020c00 	.word	0x40020c00

08001510 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001518:	f7ff ffae 	bl	8001478 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b6c      	ldr	r3, [pc, #432]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a67      	ldr	r2, [pc, #412]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b61      	ldr	r3, [pc, #388]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a60      	ldr	r2, [pc, #384]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2170      	movs	r1, #112	; 0x70
 8001602:	483f      	ldr	r0, [pc, #252]	; (8001700 <MX_GPIO_Init+0x1dc>)
 8001604:	f002 fe56 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	483d      	ldr	r0, [pc, #244]	; (8001704 <MX_GPIO_Init+0x1e0>)
 8001610:	f002 fe50 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	; 0x40
 8001618:	483b      	ldr	r0, [pc, #236]	; (8001708 <MX_GPIO_Init+0x1e4>)
 800161a:	f002 fe4b 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <MX_GPIO_Init+0x1e8>)
 8001626:	f002 fe45 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2108      	movs	r1, #8
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <MX_GPIO_Init+0x1ec>)
 8001630:	f002 fe40 	bl	80042b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001634:	2370      	movs	r3, #112	; 0x70
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	482d      	ldr	r0, [pc, #180]	; (8001700 <MX_GPIO_Init+0x1dc>)
 800164c:	f002 fc96 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4826      	ldr	r0, [pc, #152]	; (8001704 <MX_GPIO_Init+0x1e0>)
 800166a:	f002 fc87 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <MX_GPIO_Init+0x1e8>)
 8001682:	f002 fc7b 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001686:	2330      	movs	r3, #48	; 0x30
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_GPIO_Init+0x1e0>)
 800169a:	f002 fc6f 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_GPIO_Init+0x1e4>)
 80016b6:	f002 fc61 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_GPIO_Init+0x1e8>)
 80016d4:	f002 fc52 	bl	8003f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <MX_GPIO_Init+0x1ec>)
 80016f0:	f002 fc44 	bl	8003f7c <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021000 	.word	0x40021000
 8001704:	40020800 	.word	0x40020800
 8001708:	40021800 	.word	0x40021800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020c00 	.word	0x40020c00

08001714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C1_Init+0x50>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C1_Init+0x54>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C1_Init+0x50>)
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_I2C1_Init+0x58>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_I2C1_Init+0x50>)
 8001732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_I2C1_Init+0x50>)
 8001752:	f002 fdc9 	bl	80042e8 <HAL_I2C_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800175c:	f001 fe96 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000158 	.word	0x20000158
 8001768:	40005400 	.word	0x40005400
 800176c:	000186a0 	.word	0x000186a0

08001770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0x84>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12b      	bne.n	80017ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017be:	2304      	movs	r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <HAL_I2C_MspInit+0x8c>)
 80017ca:	f002 fbd7 	bl	8003f7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400

08001800 <update_state>:
uint16_t state_modify_clock = MODIFY_DATE;
uint16_t state_main_clock = NORMAL_MODE;



void update_state(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af04      	add	r7, sp, #16
	if (button_count[0] == 1){
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <update_state+0x14c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d168      	bne.n	80018e0 <update_state+0xe0>
		if (state_main_clock == ALARM_MODE){
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <update_state+0x150>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	2b09      	cmp	r3, #9
 8001814:	d11d      	bne.n	8001852 <update_state+0x52>
			ds3231_ReadTime();
 8001816:	f7ff fd51 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 800181a:	f001 fd4b 	bl	80032b4 <displayTime>
			state_main_clock = NORMAL_MODE;
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <update_state+0x150>)
 8001820:	2207      	movs	r2, #7
 8001822:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800182c:	22f0      	movs	r2, #240	; 0xf0
 800182e:	21fa      	movs	r1, #250	; 0xfa
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fe67 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "NORMAL MODE", WHITE, BLACK, 24, 0);
 8001836:	2300      	movs	r3, #0
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	2318      	movs	r3, #24
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2300      	movs	r3, #0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	4a43      	ldr	r2, [pc, #268]	; (8001954 <update_state+0x154>)
 8001848:	21fa      	movs	r1, #250	; 0xfa
 800184a:	2046      	movs	r0, #70	; 0x46
 800184c:	f001 f996 	bl	8002b7c <lcd_ShowStr>
 8001850:	e046      	b.n	80018e0 <update_state+0xe0>
		}
		else if (state_main_clock == NORMAL_MODE){
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <update_state+0x150>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d120      	bne.n	800189c <update_state+0x9c>
			ds3231_ReadTime();
 800185a:	f7ff fd2f 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 800185e:	f001 fd29 	bl	80032b4 <displayTime>
			state_main_clock = MODIFY_MODE;
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <update_state+0x150>)
 8001864:	2208      	movs	r2, #8
 8001866:	801a      	strh	r2, [r3, #0]
			state_modify_clock = MODIFY_HOUR;
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <update_state+0x158>)
 800186a:	2200      	movs	r2, #0
 800186c:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 800186e:	2300      	movs	r3, #0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001876:	22f0      	movs	r2, #240	; 0xf0
 8001878:	21fa      	movs	r1, #250	; 0xfa
 800187a:	2000      	movs	r0, #0
 800187c:	f000 fe42 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "MODIFY MODE", WHITE, BLACK, 24, 0);
 8001880:	2300      	movs	r3, #0
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2318      	movs	r3, #24
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <update_state+0x15c>)
 8001892:	21fa      	movs	r1, #250	; 0xfa
 8001894:	2046      	movs	r0, #70	; 0x46
 8001896:	f001 f971 	bl	8002b7c <lcd_ShowStr>
 800189a:	e021      	b.n	80018e0 <update_state+0xe0>
		}
		else{
			ds3231_ReadTime();
 800189c:	f7ff fd0e 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 80018a0:	f001 fd08 	bl	80032b4 <displayTime>
			take_current_time_for_alarm();
 80018a4:	f7fe fee8 	bl	8000678 <take_current_time_for_alarm>
			state_main_clock = ALARM_MODE;
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <update_state+0x150>)
 80018aa:	2209      	movs	r2, #9
 80018ac:	801a      	strh	r2, [r3, #0]
			state_modify_clock = MODIFY_HOUR;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <update_state+0x158>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018bc:	22f0      	movs	r2, #240	; 0xf0
 80018be:	21fa      	movs	r1, #250	; 0xfa
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fe1f 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "ALARM_MODE", WHITE, BLACK, 24, 0);
 80018c6:	2300      	movs	r3, #0
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2318      	movs	r3, #24
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d6:	4a22      	ldr	r2, [pc, #136]	; (8001960 <update_state+0x160>)
 80018d8:	21fa      	movs	r1, #250	; 0xfa
 80018da:	2046      	movs	r0, #70	; 0x46
 80018dc:	f001 f94e 	bl	8002b7c <lcd_ShowStr>
		}
	}
	if (button_count[12] == 1){
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <update_state+0x14c>)
 80018e2:	8b1b      	ldrh	r3, [r3, #24]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d12e      	bne.n	8001946 <update_state+0x146>
		if (state_main_clock == MODIFY_MODE){
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <update_state+0x150>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d113      	bne.n	8001918 <update_state+0x118>
			displayTime();
 80018f0:	f001 fce0 	bl	80032b4 <displayTime>
			state_modify_clock = (state_modify_clock+1)%7;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <update_state+0x158>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <update_state+0x164>)
 80018fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001900:	4413      	add	r3, r2
 8001902:	1099      	asrs	r1, r3, #2
 8001904:	17d3      	asrs	r3, r2, #31
 8001906:	1ac9      	subs	r1, r1, r3
 8001908:	460b      	mov	r3, r1
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	b28a      	uxth	r2, r1
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <update_state+0x158>)
 8001914:	801a      	strh	r2, [r3, #0]
		else if (state_main_clock == ALARM_MODE){
			display_time_alarm();
			state_modify_clock = (state_modify_clock+1)%7;
		}
	}
}
 8001916:	e016      	b.n	8001946 <update_state+0x146>
		else if (state_main_clock == ALARM_MODE){
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <update_state+0x150>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d112      	bne.n	8001946 <update_state+0x146>
			display_time_alarm();
 8001920:	f7fe fe2a 	bl	8000578 <display_time_alarm>
			state_modify_clock = (state_modify_clock+1)%7;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <update_state+0x158>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <update_state+0x164>)
 800192c:	fb83 1302 	smull	r1, r3, r3, r2
 8001930:	4413      	add	r3, r2
 8001932:	1099      	asrs	r1, r3, #2
 8001934:	17d3      	asrs	r3, r2, #31
 8001936:	1ac9      	subs	r1, r1, r3
 8001938:	460b      	mov	r3, r1
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a5b      	subs	r3, r3, r1
 800193e:	1ad1      	subs	r1, r2, r3
 8001940:	b28a      	uxth	r2, r1
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <update_state+0x158>)
 8001944:	801a      	strh	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000d8 	.word	0x200000d8
 8001950:	20000002 	.word	0x20000002
 8001954:	08008dbc 	.word	0x08008dbc
 8001958:	20000000 	.word	0x20000000
 800195c:	08008dc8 	.word	0x08008dc8
 8001960:	08008dd4 	.word	0x08008dd4
 8001964:	92492493 	.word	0x92492493

08001968 <clock_run>:

void clock_run(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	switch(state_main_clock){
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <clock_run+0x3c>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d010      	beq.n	8001996 <clock_run+0x2e>
 8001974:	2b09      	cmp	r3, #9
 8001976:	dc11      	bgt.n	800199c <clock_run+0x34>
 8001978:	2b07      	cmp	r3, #7
 800197a:	d002      	beq.n	8001982 <clock_run+0x1a>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d007      	beq.n	8001990 <clock_run+0x28>
		break;
	case ALARM_MODE:
		alarm_clock();
		break;
	default:
		break;
 8001980:	e00c      	b.n	800199c <clock_run+0x34>
		ds3231_ReadTime();
 8001982:	f7ff fc9b 	bl	80012bc <ds3231_ReadTime>
		displayTime();
 8001986:	f001 fc95 	bl	80032b4 <displayTime>
		check_alarm();
 800198a:	f7ff fb37 	bl	8000ffc <check_alarm>
		break;
 800198e:	e006      	b.n	800199e <clock_run+0x36>
		modify_clock();
 8001990:	f000 f80a 	bl	80019a8 <modify_clock>
		break;
 8001994:	e003      	b.n	800199e <clock_run+0x36>
		alarm_clock();
 8001996:	f7fe feaf 	bl	80006f8 <alarm_clock>
		break;
 800199a:	e000      	b.n	800199e <clock_run+0x36>
		break;
 800199c:	bf00      	nop
	}
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000002 	.word	0x20000002

080019a8 <modify_clock>:

void modify_clock(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af04      	add	r7, sp, #16
	counter_modify_clock = (counter_modify_clock+1)%10;
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <modify_clock+0x264>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <modify_clock+0x268>)
 80019b6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ba:	1099      	asrs	r1, r3, #2
 80019bc:	17d3      	asrs	r3, r2, #31
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	1ad1      	subs	r1, r2, r3
 80019ca:	b28a      	uxth	r2, r1
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <modify_clock+0x264>)
 80019ce:	801a      	strh	r2, [r3, #0]
	switch(state_modify_clock){
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <modify_clock+0x26c>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	f200 84bf 	bhi.w	8002358 <modify_clock+0x9b0>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <modify_clock+0x38>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001c85 	.word	0x08001c85
 80019e4:	08001da9 	.word	0x08001da9
 80019e8:	08001ed1 	.word	0x08001ed1
 80019ec:	08002265 	.word	0x08002265
 80019f0:	08002129 	.word	0x08002129
 80019f4:	080019fd 	.word	0x080019fd
 80019f8:	08002021 	.word	0x08002021
	case MODIFY_DATE:
		if (counter_modify_clock == 0){
 80019fc:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <modify_clock+0x264>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <modify_clock+0x7c>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <modify_clock+0x270>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	2318      	movs	r3, #24
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2182      	movs	r1, #130	; 0x82
 8001a1c:	2046      	movs	r0, #70	; 0x46
 8001a1e:	f000 feab 	bl	8002778 <lcd_ShowIntNum>
 8001a22:	e011      	b.n	8001a48 <modify_clock+0xa0>
		}
		else if (counter_modify_clock == 5){
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <modify_clock+0x264>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10d      	bne.n	8001a48 <modify_clock+0xa0>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <modify_clock+0x270>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	2318      	movs	r3, #24
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	2300      	movs	r3, #0
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2182      	movs	r1, #130	; 0x82
 8001a42:	2046      	movs	r0, #70	; 0x46
 8001a44:	f000 fe98 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001a48:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <modify_clock+0x274>)
 8001a4a:	88db      	ldrh	r3, [r3, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d176      	bne.n	8001b3e <modify_clock+0x196>
			if (ds3231_month == 1 || ds3231_month == 3 || ds3231_month == 5 || ds3231_month == 7 || ds3231_month == 8 || ds3231_month == 10 || ds3231_month == 12){
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <modify_clock+0x278>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d017      	beq.n	8001a88 <modify_clock+0xe0>
 8001a58:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <modify_clock+0x278>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d013      	beq.n	8001a88 <modify_clock+0xe0>
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <modify_clock+0x278>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d00f      	beq.n	8001a88 <modify_clock+0xe0>
 8001a68:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <modify_clock+0x278>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d00b      	beq.n	8001a88 <modify_clock+0xe0>
 8001a70:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <modify_clock+0x278>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d007      	beq.n	8001a88 <modify_clock+0xe0>
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <modify_clock+0x278>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d003      	beq.n	8001a88 <modify_clock+0xe0>
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <modify_clock+0x278>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d112      	bne.n	8001aae <modify_clock+0x106>
				ds3231_date = ds3231_date%31+1;
 8001a88:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <modify_clock+0x270>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <modify_clock+0x27c>)
 8001a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a92:	1ad1      	subs	r1, r2, r3
 8001a94:	0849      	lsrs	r1, r1, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	0919      	lsrs	r1, r3, #4
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <modify_clock+0x270>)
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e030      	b.n	8001b10 <modify_clock+0x168>
			}
			else if (ds3231_month == 4 || ds3231_month == 6 || ds3231_month == 9 || ds3231_month == 11){
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <modify_clock+0x278>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d00b      	beq.n	8001ace <modify_clock+0x126>
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <modify_clock+0x278>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d007      	beq.n	8001ace <modify_clock+0x126>
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <modify_clock+0x278>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	d003      	beq.n	8001ace <modify_clock+0x126>
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <modify_clock+0x278>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b0b      	cmp	r3, #11
 8001acc:	d110      	bne.n	8001af0 <modify_clock+0x148>
				ds3231_date = ds3231_date%30+1;
 8001ace:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <modify_clock+0x270>)
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <modify_clock+0x280>)
 8001ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad8:	0919      	lsrs	r1, r3, #4
 8001ada:	460b      	mov	r3, r1
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a5b      	subs	r3, r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <modify_clock+0x270>)
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e00f      	b.n	8001b10 <modify_clock+0x168>
			}
			else{
				ds3231_date = ds3231_date%28+1;
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <modify_clock+0x270>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	0893      	lsrs	r3, r2, #2
 8001af6:	494d      	ldr	r1, [pc, #308]	; (8001c2c <modify_clock+0x284>)
 8001af8:	fba1 3103 	umull	r3, r1, r1, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a5b      	subs	r3, r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <modify_clock+0x270>)
 8001b0e:	701a      	strb	r2, [r3, #0]
			}
			ds3231_Write(ADDRESS_DATE, ds3231_date);
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <modify_clock+0x270>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff fbae 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001b1c:	f7ff fbce 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <modify_clock+0x270>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	2318      	movs	r3, #24
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2302      	movs	r3, #2
 8001b36:	2182      	movs	r1, #130	; 0x82
 8001b38:	2046      	movs	r0, #70	; 0x46
 8001b3a:	f000 fe1d 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] >= 40){
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <modify_clock+0x274>)
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	2b27      	cmp	r3, #39	; 0x27
 8001b44:	f240 840a 	bls.w	800235c <modify_clock+0x9b4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <modify_clock+0x288>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	425a      	negs	r2, r3
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	bf58      	it	pl
 8001b5a:	4253      	negpl	r3, r2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <modify_clock+0x288>)
 8001b60:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <modify_clock+0x288>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 83f8 	bne.w	800235c <modify_clock+0x9b4>
				if (ds3231_month == 1 || ds3231_month == 3 || ds3231_month == 5 || ds3231_month == 7 || ds3231_month == 8 || ds3231_month == 10 || ds3231_month == 12){
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <modify_clock+0x278>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d017      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <modify_clock+0x278>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d013      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <modify_clock+0x278>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d00f      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <modify_clock+0x278>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d00b      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <modify_clock+0x278>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d007      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <modify_clock+0x278>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b0a      	cmp	r3, #10
 8001b9a:	d003      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <modify_clock+0x278>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d112      	bne.n	8001bca <modify_clock+0x222>
					ds3231_date = ds3231_date%31+1;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <modify_clock+0x270>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <modify_clock+0x27c>)
 8001baa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bae:	1ad1      	subs	r1, r2, r3
 8001bb0:	0849      	lsrs	r1, r1, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	0919      	lsrs	r1, r3, #4
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <modify_clock+0x270>)
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e044      	b.n	8001c54 <modify_clock+0x2ac>
				}
				else if (ds3231_month == 4 || ds3231_month == 6 || ds3231_month == 9 || ds3231_month == 11){
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <modify_clock+0x278>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d00b      	beq.n	8001bea <modify_clock+0x242>
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <modify_clock+0x278>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d007      	beq.n	8001bea <modify_clock+0x242>
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <modify_clock+0x278>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d003      	beq.n	8001bea <modify_clock+0x242>
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <modify_clock+0x278>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b0b      	cmp	r3, #11
 8001be8:	d124      	bne.n	8001c34 <modify_clock+0x28c>
					ds3231_date = ds3231_date%30+1;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <modify_clock+0x270>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <modify_clock+0x280>)
 8001bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf4:	0919      	lsrs	r1, r3, #4
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a5b      	subs	r3, r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <modify_clock+0x270>)
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e023      	b.n	8001c54 <modify_clock+0x2ac>
 8001c0c:	200000a8 	.word	0x200000a8
 8001c10:	66666667 	.word	0x66666667
 8001c14:	20000000 	.word	0x20000000
 8001c18:	200000fb 	.word	0x200000fb
 8001c1c:	200000d8 	.word	0x200000d8
 8001c20:	200000fe 	.word	0x200000fe
 8001c24:	08421085 	.word	0x08421085
 8001c28:	88888889 	.word	0x88888889
 8001c2c:	24924925 	.word	0x24924925
 8001c30:	200000aa 	.word	0x200000aa
				}
				else{
					ds3231_date = ds3231_date%28+1;
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <modify_clock+0x550>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	0893      	lsrs	r3, r2, #2
 8001c3a:	49b0      	ldr	r1, [pc, #704]	; (8001efc <modify_clock+0x554>)
 8001c3c:	fba1 3103 	umull	r3, r1, r1, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a5b      	subs	r3, r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4ba9      	ldr	r3, [pc, #676]	; (8001ef8 <modify_clock+0x550>)
 8001c52:	701a      	strb	r2, [r3, #0]
				}
				ds3231_Write(ADDRESS_DATE, ds3231_date);
 8001c54:	4ba8      	ldr	r3, [pc, #672]	; (8001ef8 <modify_clock+0x550>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2004      	movs	r0, #4
 8001c5c:	f7ff fb0c 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001c60:	f7ff fb2c 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001c64:	4ba4      	ldr	r3, [pc, #656]	; (8001ef8 <modify_clock+0x550>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	2318      	movs	r3, #24
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	2182      	movs	r1, #130	; 0x82
 8001c7c:	2046      	movs	r0, #70	; 0x46
 8001c7e:	f000 fd7b 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001c82:	e36b      	b.n	800235c <modify_clock+0x9b4>
	case MODIFY_HOUR:
		if (counter_modify_clock == 0){
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <modify_clock+0x558>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10f      	bne.n	8001cac <modify_clock+0x304>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <modify_clock+0x55c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	2318      	movs	r3, #24
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	2164      	movs	r1, #100	; 0x64
 8001ca4:	2046      	movs	r0, #70	; 0x46
 8001ca6:	f000 fd67 	bl	8002778 <lcd_ShowIntNum>
 8001caa:	e011      	b.n	8001cd0 <modify_clock+0x328>
		}
		else if (counter_modify_clock == 5){
 8001cac:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <modify_clock+0x558>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10d      	bne.n	8001cd0 <modify_clock+0x328>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <modify_clock+0x55c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	2164      	movs	r1, #100	; 0x64
 8001cca:	2046      	movs	r0, #70	; 0x46
 8001ccc:	f000 fd54 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001cd0:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <modify_clock+0x560>)
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d127      	bne.n	8001d28 <modify_clock+0x380>
			ds3231_hours = (ds3231_hours+1)%24;
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <modify_clock+0x55c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <modify_clock+0x564>)
 8001ce0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce4:	1099      	asrs	r1, r3, #2
 8001ce6:	17d3      	asrs	r3, r2, #31
 8001ce8:	1ac9      	subs	r1, r1, r3
 8001cea:	460b      	mov	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1ad1      	subs	r1, r2, r3
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <modify_clock+0x55c>)
 8001cf8:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <modify_clock+0x55c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7ff fab9 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001d06:	f7ff fad9 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <modify_clock+0x55c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2318      	movs	r3, #24
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	2164      	movs	r1, #100	; 0x64
 8001d22:	2046      	movs	r0, #70	; 0x46
 8001d24:	f000 fd28 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001d28:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <modify_clock+0x560>)
 8001d2a:	88db      	ldrh	r3, [r3, #6]
 8001d2c:	2b27      	cmp	r3, #39	; 0x27
 8001d2e:	f240 8317 	bls.w	8002360 <modify_clock+0x9b8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <modify_clock+0x568>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	425a      	negs	r2, r3
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	bf58      	it	pl
 8001d44:	4253      	negpl	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <modify_clock+0x568>)
 8001d4a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <modify_clock+0x568>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 8305 	bne.w	8002360 <modify_clock+0x9b8>
				ds3231_hours = (ds3231_hours+1)%24;
 8001d56:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <modify_clock+0x55c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <modify_clock+0x564>)
 8001d5e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d62:	1099      	asrs	r1, r3, #2
 8001d64:	17d3      	asrs	r3, r2, #31
 8001d66:	1ac9      	subs	r1, r1, r3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	440b      	add	r3, r1
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1ad1      	subs	r1, r2, r3
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <modify_clock+0x55c>)
 8001d76:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <modify_clock+0x55c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7ff fa7a 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001d84:	f7ff fa9a 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d88:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <modify_clock+0x55c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2318      	movs	r3, #24
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2164      	movs	r1, #100	; 0x64
 8001da0:	2046      	movs	r0, #70	; 0x46
 8001da2:	f000 fce9 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001da6:	e2db      	b.n	8002360 <modify_clock+0x9b8>
	case MODIFY_MINUTE:
		if (counter_modify_clock == 0){
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <modify_clock+0x558>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <modify_clock+0x428>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <modify_clock+0x56c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2318      	movs	r3, #24
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2164      	movs	r1, #100	; 0x64
 8001dc8:	206e      	movs	r0, #110	; 0x6e
 8001dca:	f000 fcd5 	bl	8002778 <lcd_ShowIntNum>
 8001dce:	e011      	b.n	8001df4 <modify_clock+0x44c>
		}
		else if (counter_modify_clock == 5){
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <modify_clock+0x558>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10d      	bne.n	8001df4 <modify_clock+0x44c>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <modify_clock+0x56c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	2318      	movs	r3, #24
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2302      	movs	r3, #2
 8001dec:	2164      	movs	r1, #100	; 0x64
 8001dee:	206e      	movs	r0, #110	; 0x6e
 8001df0:	f000 fcc2 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <modify_clock+0x560>)
 8001df6:	88db      	ldrh	r3, [r3, #6]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d128      	bne.n	8001e4e <modify_clock+0x4a6>
			ds3231_min = (ds3231_min+1)%60;
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <modify_clock+0x56c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <modify_clock+0x570>)
 8001e04:	fb83 1302 	smull	r1, r3, r3, r2
 8001e08:	4413      	add	r3, r2
 8001e0a:	1159      	asrs	r1, r3, #5
 8001e0c:	17d3      	asrs	r3, r2, #31
 8001e0e:	1ac9      	subs	r1, r1, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a5b      	subs	r3, r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	1ad1      	subs	r1, r2, r3
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <modify_clock+0x56c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <modify_clock+0x56c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fa26 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001e2c:	f7ff fa46 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <modify_clock+0x56c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	2318      	movs	r3, #24
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2302      	movs	r3, #2
 8001e46:	2164      	movs	r1, #100	; 0x64
 8001e48:	206e      	movs	r0, #110	; 0x6e
 8001e4a:	f000 fc95 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <modify_clock+0x560>)
 8001e50:	88db      	ldrh	r3, [r3, #6]
 8001e52:	2b27      	cmp	r3, #39	; 0x27
 8001e54:	f240 8286 	bls.w	8002364 <modify_clock+0x9bc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <modify_clock+0x568>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	425a      	negs	r2, r3
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <modify_clock+0x568>)
 8001e70:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <modify_clock+0x568>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 8274 	bne.w	8002364 <modify_clock+0x9bc>
				ds3231_min = (ds3231_min+1)%60;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <modify_clock+0x56c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <modify_clock+0x570>)
 8001e84:	fb83 1302 	smull	r1, r3, r3, r2
 8001e88:	4413      	add	r3, r2
 8001e8a:	1159      	asrs	r1, r3, #5
 8001e8c:	17d3      	asrs	r3, r2, #31
 8001e8e:	1ac9      	subs	r1, r1, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a5b      	subs	r3, r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	1ad1      	subs	r1, r2, r3
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <modify_clock+0x56c>)
 8001e9e:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <modify_clock+0x56c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff f9e6 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001eac:	f7ff fa06 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <modify_clock+0x56c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	2318      	movs	r3, #24
 8001eb8:	9302      	str	r3, [sp, #8]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	2164      	movs	r1, #100	; 0x64
 8001ec8:	206e      	movs	r0, #110	; 0x6e
 8001eca:	f000 fc55 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001ece:	e249      	b.n	8002364 <modify_clock+0x9bc>
	case MODIFY_SECOND:
		if (counter_modify_clock == 0){
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <modify_clock+0x558>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d123      	bne.n	8001f20 <modify_clock+0x578>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <modify_clock+0x574>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	2318      	movs	r3, #24
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2302      	movs	r3, #2
 8001eee:	2164      	movs	r1, #100	; 0x64
 8001ef0:	2096      	movs	r0, #150	; 0x96
 8001ef2:	f000 fc41 	bl	8002778 <lcd_ShowIntNum>
 8001ef6:	e025      	b.n	8001f44 <modify_clock+0x59c>
 8001ef8:	200000fb 	.word	0x200000fb
 8001efc:	24924925 	.word	0x24924925
 8001f00:	200000a8 	.word	0x200000a8
 8001f04:	200000fd 	.word	0x200000fd
 8001f08:	200000d8 	.word	0x200000d8
 8001f0c:	2aaaaaab 	.word	0x2aaaaaab
 8001f10:	200000aa 	.word	0x200000aa
 8001f14:	200000fa 	.word	0x200000fa
 8001f18:	88888889 	.word	0x88888889
 8001f1c:	200000f8 	.word	0x200000f8
		}
		else if (counter_modify_clock == 5){
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <modify_clock+0x7a8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10d      	bne.n	8001f44 <modify_clock+0x59c>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001f28:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <modify_clock+0x7ac>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	2318      	movs	r3, #24
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	2164      	movs	r1, #100	; 0x64
 8001f3e:	2096      	movs	r0, #150	; 0x96
 8001f40:	f000 fc1a 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <modify_clock+0x7b0>)
 8001f46:	88db      	ldrh	r3, [r3, #6]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d128      	bne.n	8001f9e <modify_clock+0x5f6>
			ds3231_sec = (ds3231_sec+1)%60;
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <modify_clock+0x7ac>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <modify_clock+0x7b4>)
 8001f54:	fb83 1302 	smull	r1, r3, r3, r2
 8001f58:	4413      	add	r3, r2
 8001f5a:	1159      	asrs	r1, r3, #5
 8001f5c:	17d3      	asrs	r3, r2, #31
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a5b      	subs	r3, r3, r1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	1ad1      	subs	r1, r2, r3
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <modify_clock+0x7ac>)
 8001f6e:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001f70:	4b78      	ldr	r3, [pc, #480]	; (8002154 <modify_clock+0x7ac>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff f97e 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001f7c:	f7ff f99e 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001f80:	4b74      	ldr	r3, [pc, #464]	; (8002154 <modify_clock+0x7ac>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2318      	movs	r3, #24
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2302      	movs	r3, #2
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	2096      	movs	r0, #150	; 0x96
 8001f9a:	f000 fbed 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <modify_clock+0x7b0>)
 8001fa0:	88db      	ldrh	r3, [r3, #6]
 8001fa2:	2b27      	cmp	r3, #39	; 0x27
 8001fa4:	f240 81e0 	bls.w	8002368 <modify_clock+0x9c0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <modify_clock+0x7b8>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	425a      	negs	r2, r3
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	bf58      	it	pl
 8001fba:	4253      	negpl	r3, r2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b68      	ldr	r3, [pc, #416]	; (8002160 <modify_clock+0x7b8>)
 8001fc0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <modify_clock+0x7b8>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 81ce 	bne.w	8002368 <modify_clock+0x9c0>
				ds3231_sec = (ds3231_sec+1)%60;
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <modify_clock+0x7ac>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <modify_clock+0x7b4>)
 8001fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd8:	4413      	add	r3, r2
 8001fda:	1159      	asrs	r1, r3, #5
 8001fdc:	17d3      	asrs	r3, r2, #31
 8001fde:	1ac9      	subs	r1, r1, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	1ad1      	subs	r1, r2, r3
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <modify_clock+0x7ac>)
 8001fee:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001ff0:	4b58      	ldr	r3, [pc, #352]	; (8002154 <modify_clock+0x7ac>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff f93e 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001ffc:	f7ff f95e 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002000:	4b54      	ldr	r3, [pc, #336]	; (8002154 <modify_clock+0x7ac>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b29a      	uxth	r2, r3
 8002006:	2318      	movs	r3, #24
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2300      	movs	r3, #0
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2302      	movs	r3, #2
 8002016:	2164      	movs	r1, #100	; 0x64
 8002018:	2096      	movs	r0, #150	; 0x96
 800201a:	f000 fbad 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 800201e:	e1a3      	b.n	8002368 <modify_clock+0x9c0>
	case MODIFY_DAY:
		if (counter_modify_clock == 0){
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <modify_clock+0x7a8>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d111      	bne.n	800204c <modify_clock+0x6a4>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <modify_clock+0x7bc>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	2318      	movs	r3, #24
 8002034:	9302      	str	r3, [sp, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2302      	movs	r3, #2
 8002042:	2182      	movs	r1, #130	; 0x82
 8002044:	2014      	movs	r0, #20
 8002046:	f000 fb97 	bl	8002778 <lcd_ShowIntNum>
 800204a:	e013      	b.n	8002074 <modify_clock+0x6cc>
		}
		else if (counter_modify_clock == 5){
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <modify_clock+0x7a8>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10f      	bne.n	8002074 <modify_clock+0x6cc>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, BLACK, BLACK, 24);
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <modify_clock+0x7bc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	3301      	adds	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	2318      	movs	r3, #24
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2300      	movs	r3, #0
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2302      	movs	r3, #2
 800206c:	2182      	movs	r1, #130	; 0x82
 800206e:	2014      	movs	r0, #20
 8002070:	f000 fb82 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <modify_clock+0x7b0>)
 8002076:	88db      	ldrh	r3, [r3, #6]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d11e      	bne.n	80020ba <modify_clock+0x712>
			ds3231_day += 1;
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <modify_clock+0x7bc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <modify_clock+0x7bc>)
 8002086:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, ds3231_day);
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <modify_clock+0x7bc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	2003      	movs	r0, #3
 8002090:	f7ff f8f2 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8002094:	f7ff f912 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <modify_clock+0x7bc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	2318      	movs	r3, #24
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2300      	movs	r3, #0
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2302      	movs	r3, #2
 80020b2:	2182      	movs	r1, #130	; 0x82
 80020b4:	2014      	movs	r0, #20
 80020b6:	f000 fb5f 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <modify_clock+0x7b0>)
 80020bc:	88db      	ldrh	r3, [r3, #6]
 80020be:	2b27      	cmp	r3, #39	; 0x27
 80020c0:	f240 8154 	bls.w	800236c <modify_clock+0x9c4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <modify_clock+0x7b8>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	425a      	negs	r2, r3
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	bf58      	it	pl
 80020d6:	4253      	negpl	r3, r2
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <modify_clock+0x7b8>)
 80020dc:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <modify_clock+0x7b8>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 8142 	bne.w	800236c <modify_clock+0x9c4>
				ds3231_day += 1;
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <modify_clock+0x7bc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <modify_clock+0x7bc>)
 80020f2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <modify_clock+0x7bc>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2003      	movs	r0, #3
 80020fc:	f7ff f8bc 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002100:	f7ff f8dc 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <modify_clock+0x7bc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	3301      	adds	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	2318      	movs	r3, #24
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2182      	movs	r1, #130	; 0x82
 8002120:	2014      	movs	r0, #20
 8002122:	f000 fb29 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002126:	e121      	b.n	800236c <modify_clock+0x9c4>
	case MODIFY_MONTH:
		if (counter_modify_clock == 0){
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <modify_clock+0x7a8>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11d      	bne.n	800216c <modify_clock+0x7c4>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <modify_clock+0x7c0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	2318      	movs	r3, #24
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2300      	movs	r3, #0
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2302      	movs	r3, #2
 8002146:	2182      	movs	r1, #130	; 0x82
 8002148:	206e      	movs	r0, #110	; 0x6e
 800214a:	f000 fb15 	bl	8002778 <lcd_ShowIntNum>
 800214e:	e01f      	b.n	8002190 <modify_clock+0x7e8>
 8002150:	200000a8 	.word	0x200000a8
 8002154:	200000f8 	.word	0x200000f8
 8002158:	200000d8 	.word	0x200000d8
 800215c:	88888889 	.word	0x88888889
 8002160:	200000aa 	.word	0x200000aa
 8002164:	200000fc 	.word	0x200000fc
 8002168:	200000fe 	.word	0x200000fe
		}
		else if (counter_modify_clock == 5){
 800216c:	4b83      	ldr	r3, [pc, #524]	; (800237c <modify_clock+0x9d4>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10d      	bne.n	8002190 <modify_clock+0x7e8>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8002174:	4b82      	ldr	r3, [pc, #520]	; (8002380 <modify_clock+0x9d8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	2318      	movs	r3, #24
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2300      	movs	r3, #0
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	2182      	movs	r1, #130	; 0x82
 800218a:	206e      	movs	r0, #110	; 0x6e
 800218c:	f000 faf4 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8002190:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <modify_clock+0x9dc>)
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d126      	bne.n	80021e6 <modify_clock+0x83e>
			ds3231_month = ds3231_month%12+1;
 8002198:	4b79      	ldr	r3, [pc, #484]	; (8002380 <modify_clock+0x9d8>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <modify_clock+0x9e0>)
 800219e:	fba3 1302 	umull	r1, r3, r3, r2
 80021a2:	08d9      	lsrs	r1, r3, #3
 80021a4:	460b      	mov	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b72      	ldr	r3, [pc, #456]	; (8002380 <modify_clock+0x9d8>)
 80021b6:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MONTH, ds3231_month);
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <modify_clock+0x9d8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	2005      	movs	r0, #5
 80021c0:	f7ff f85a 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 80021c4:	f7ff f87a 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <modify_clock+0x9d8>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	2318      	movs	r3, #24
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2302      	movs	r3, #2
 80021de:	2182      	movs	r1, #130	; 0x82
 80021e0:	206e      	movs	r0, #110	; 0x6e
 80021e2:	f000 fac9 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <modify_clock+0x9dc>)
 80021e8:	88db      	ldrh	r3, [r3, #6]
 80021ea:	2b27      	cmp	r3, #39	; 0x27
 80021ec:	f240 80c0 	bls.w	8002370 <modify_clock+0x9c8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80021f0:	4b66      	ldr	r3, [pc, #408]	; (800238c <modify_clock+0x9e4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	425a      	negs	r2, r3
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	bf58      	it	pl
 8002202:	4253      	negpl	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <modify_clock+0x9e4>)
 8002208:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 800220a:	4b60      	ldr	r3, [pc, #384]	; (800238c <modify_clock+0x9e4>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 80ae 	bne.w	8002370 <modify_clock+0x9c8>
				ds3231_month = ds3231_month%12+1;
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <modify_clock+0x9d8>)
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <modify_clock+0x9e0>)
 800221a:	fba3 1302 	umull	r1, r3, r3, r2
 800221e:	08d9      	lsrs	r1, r3, #3
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <modify_clock+0x9d8>)
 8002232:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <modify_clock+0x9d8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	2005      	movs	r0, #5
 800223c:	f7ff f81c 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002240:	f7ff f83c 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <modify_clock+0x9d8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b29a      	uxth	r2, r3
 800224a:	2318      	movs	r3, #24
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2302      	movs	r3, #2
 800225a:	2182      	movs	r1, #130	; 0x82
 800225c:	206e      	movs	r0, #110	; 0x6e
 800225e:	f000 fa8b 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002262:	e085      	b.n	8002370 <modify_clock+0x9c8>
	case MODIFY_YEAR:
		if (counter_modify_clock == 0){
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <modify_clock+0x9d4>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <modify_clock+0x8e4>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800226c:	4b48      	ldr	r3, [pc, #288]	; (8002390 <modify_clock+0x9e8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b29a      	uxth	r2, r3
 8002272:	2318      	movs	r3, #24
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2300      	movs	r3, #0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2302      	movs	r3, #2
 8002282:	2182      	movs	r1, #130	; 0x82
 8002284:	2096      	movs	r0, #150	; 0x96
 8002286:	f000 fa77 	bl	8002778 <lcd_ShowIntNum>
 800228a:	e011      	b.n	80022b0 <modify_clock+0x908>
		}
		else if (counter_modify_clock == 5){
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <modify_clock+0x9d4>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10d      	bne.n	80022b0 <modify_clock+0x908>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8002294:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <modify_clock+0x9e8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b29a      	uxth	r2, r3
 800229a:	2318      	movs	r3, #24
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2300      	movs	r3, #0
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	2182      	movs	r1, #130	; 0x82
 80022aa:	2096      	movs	r0, #150	; 0x96
 80022ac:	f000 fa64 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <modify_clock+0x9dc>)
 80022b2:	88db      	ldrh	r3, [r3, #6]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11c      	bne.n	80022f2 <modify_clock+0x94a>
			ds3231_year += 1;
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <modify_clock+0x9e8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b33      	ldr	r3, [pc, #204]	; (8002390 <modify_clock+0x9e8>)
 80022c2:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <modify_clock+0x9e8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	2006      	movs	r0, #6
 80022cc:	f7fe ffd4 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 80022d0:	f7fe fff4 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <modify_clock+0x9e8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	2318      	movs	r3, #24
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2302      	movs	r3, #2
 80022ea:	2182      	movs	r1, #130	; 0x82
 80022ec:	2096      	movs	r0, #150	; 0x96
 80022ee:	f000 fa43 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <modify_clock+0x9dc>)
 80022f4:	88db      	ldrh	r3, [r3, #6]
 80022f6:	2b27      	cmp	r3, #39	; 0x27
 80022f8:	d93c      	bls.n	8002374 <modify_clock+0x9cc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <modify_clock+0x9e4>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	425a      	negs	r2, r3
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	bf58      	it	pl
 800230c:	4253      	negpl	r3, r2
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <modify_clock+0x9e4>)
 8002312:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <modify_clock+0x9e4>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d12b      	bne.n	8002374 <modify_clock+0x9cc>
				ds3231_year += 1;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <modify_clock+0x9e8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <modify_clock+0x9e8>)
 8002326:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <modify_clock+0x9e8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	2006      	movs	r0, #6
 8002330:	f7fe ffa2 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002334:	f7fe ffc2 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <modify_clock+0x9e8>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	2318      	movs	r3, #24
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	2300      	movs	r3, #0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2302      	movs	r3, #2
 800234e:	2182      	movs	r1, #130	; 0x82
 8002350:	2096      	movs	r0, #150	; 0x96
 8002352:	f000 fa11 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002356:	e00d      	b.n	8002374 <modify_clock+0x9cc>
	default:
		break;
 8002358:	bf00      	nop
 800235a:	e00c      	b.n	8002376 <modify_clock+0x9ce>
		break;
 800235c:	bf00      	nop
 800235e:	e00a      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002360:	bf00      	nop
 8002362:	e008      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002364:	bf00      	nop
 8002366:	e006      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002368:	bf00      	nop
 800236a:	e004      	b.n	8002376 <modify_clock+0x9ce>
		break;
 800236c:	bf00      	nop
 800236e:	e002      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002374:	bf00      	nop
	}

}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200000a8 	.word	0x200000a8
 8002380:	200000fe 	.word	0x200000fe
 8002384:	200000d8 	.word	0x200000d8
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	200000aa 	.word	0x200000aa
 8002390:	200000f9 	.word	0x200000f9

08002394 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <LCD_WR_REG+0x1c>)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	8013      	strh	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	600ffffe 	.word	0x600ffffe

080023b4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <LCD_WR_DATA+0x1c>)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	8053      	strh	r3, [r2, #2]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	600ffffe 	.word	0x600ffffe

080023d4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <LCD_RD_DATA+0x20>)
 80023dc:	885b      	ldrh	r3, [r3, #2]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	b29b      	uxth	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	600ffffe 	.word	0x600ffffe

080023f8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4623      	mov	r3, r4
 8002408:	80fb      	strh	r3, [r7, #6]
 800240a:	4603      	mov	r3, r0
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
 8002412:	4613      	mov	r3, r2
 8002414:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002416:	202a      	movs	r0, #42	; 0x2a
 8002418:	f7ff ffbc 	bl	8002394 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffc6 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffc0 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffba 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffb4 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800244c:	202b      	movs	r0, #43	; 0x2b
 800244e:	f7ff ffa1 	bl	8002394 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002452:	88bb      	ldrh	r3, [r7, #4]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ffab 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ffa5 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800246a:	883b      	ldrh	r3, [r7, #0]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b29b      	uxth	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff9f 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002476:	883b      	ldrh	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff99 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002482:	202c      	movs	r0, #44	; 0x2c
 8002484:	f7ff ff86 	bl	8002394 <LCD_WR_REG>
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <lcd_Clear+0x70>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <lcd_Clear+0x70>)
 80024b4:	885b      	ldrh	r3, [r3, #2]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff ff9b 	bl	80023f8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	81fb      	strh	r3, [r7, #14]
 80024c6:	e011      	b.n	80024ec <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	81bb      	strh	r3, [r7, #12]
 80024cc:	e006      	b.n	80024dc <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff6f 	bl	80023b4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	81bb      	strh	r3, [r7, #12]
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <lcd_Clear+0x70>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	89ba      	ldrh	r2, [r7, #12]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3f3      	bcc.n	80024ce <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	3301      	adds	r3, #1
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <lcd_Clear+0x70>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	89fa      	ldrh	r2, [r7, #14]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3e8      	bcc.n	80024c8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200001ac 	.word	0x200001ac

08002504 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	4604      	mov	r4, r0
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	80fb      	strh	r3, [r7, #6]
 8002516:	4603      	mov	r3, r0
 8002518:	80bb      	strh	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	883b      	ldrh	r3, [r7, #0]
 800252a:	3b01      	subs	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	88b9      	ldrh	r1, [r7, #4]
 8002530:	88f8      	ldrh	r0, [r7, #6]
 8002532:	f7ff ff61 	bl	80023f8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002536:	88bb      	ldrh	r3, [r7, #4]
 8002538:	81fb      	strh	r3, [r7, #14]
 800253a:	e010      	b.n	800255e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	81bb      	strh	r3, [r7, #12]
 8002540:	e006      	b.n	8002550 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002542:	8c3b      	ldrh	r3, [r7, #32]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800254a:	89bb      	ldrh	r3, [r7, #12]
 800254c:	3301      	adds	r3, #1
 800254e:	81bb      	strh	r3, [r7, #12]
 8002550:	89ba      	ldrh	r2, [r7, #12]
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3f4      	bcc.n	8002542 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	3301      	adds	r3, #1
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	883b      	ldrh	r3, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3ea      	bcc.n	800253c <lcd_Fill+0x38>
		}
	}
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}

08002570 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	460b      	mov	r3, r1
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002582:	88bb      	ldrh	r3, [r7, #4]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	88b9      	ldrh	r1, [r7, #4]
 8002588:	88f8      	ldrh	r0, [r7, #6]
 800258a:	f7ff ff35 	bl	80023f8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff0f 	bl	80023b4 <LCD_WR_DATA>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	80fb      	strh	r3, [r7, #6]
 80025b2:	4603      	mov	r3, r0
 80025b4:	80bb      	strh	r3, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70fb      	strb	r3, [r7, #3]
 80025ba:	4613      	mov	r3, r2
 80025bc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80025be:	2300      	movs	r3, #0
 80025c0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80025c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	fb12 f303 	smulbb	r3, r2, r3
 80025f6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	3b20      	subs	r3, #32
 80025fc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	b29a      	uxth	r2, r3
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4413      	add	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29c      	uxth	r4, r3
 800260c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002610:	b29a      	uxth	r2, r3
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	88b9      	ldrh	r1, [r7, #4]
 800261e:	88f8      	ldrh	r0, [r7, #6]
 8002620:	4622      	mov	r2, r4
 8002622:	f7ff fee9 	bl	80023f8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002626:	2300      	movs	r3, #0
 8002628:	827b      	strh	r3, [r7, #18]
 800262a:	e07a      	b.n	8002722 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800262c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d028      	beq.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002634:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002638:	2b10      	cmp	r3, #16
 800263a:	d108      	bne.n	800264e <lcd_ShowChar+0xae>
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	8a7b      	ldrh	r3, [r7, #18]
 8002640:	493c      	ldr	r1, [pc, #240]	; (8002734 <lcd_ShowChar+0x194>)
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	440a      	add	r2, r1
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	75fb      	strb	r3, [r7, #23]
 800264c:	e01b      	b.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 800264e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002652:	2b18      	cmp	r3, #24
 8002654:	d10b      	bne.n	800266e <lcd_ShowChar+0xce>
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	8a79      	ldrh	r1, [r7, #18]
 800265a:	4837      	ldr	r0, [pc, #220]	; (8002738 <lcd_ShowChar+0x198>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4403      	add	r3, r0
 8002666:	440b      	add	r3, r1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	75fb      	strb	r3, [r7, #23]
 800266c:	e00b      	b.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800266e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002672:	2b20      	cmp	r3, #32
 8002674:	d15a      	bne.n	800272c <lcd_ShowChar+0x18c>
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	8a7b      	ldrh	r3, [r7, #18]
 800267a:	4930      	ldr	r1, [pc, #192]	; (800273c <lcd_ShowChar+0x19c>)
 800267c:	0192      	lsls	r2, r2, #6
 800267e:	440a      	add	r2, r1
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002686:	2300      	movs	r3, #0
 8002688:	75bb      	strb	r3, [r7, #22]
 800268a:	e044      	b.n	8002716 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800268c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d120      	bne.n	80026d6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002694:	7dfa      	ldrb	r2, [r7, #23]
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	fa42 f303 	asr.w	r3, r2, r3
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <lcd_ShowChar+0x10e>
 80026a4:	883b      	ldrh	r3, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe84 	bl	80023b4 <LCD_WR_DATA>
 80026ac:	e003      	b.n	80026b6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80026ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fe7f 	bl	80023b4 <LCD_WR_DATA>
				m++;
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	3301      	adds	r3, #1
 80026ba:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80026bc:	7d7b      	ldrb	r3, [r7, #21]
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80026c4:	fb02 f201 	mul.w	r2, r2, r1
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11f      	bne.n	8002710 <lcd_ShowChar+0x170>
				{
					m=0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	757b      	strb	r3, [r7, #21]
					break;
 80026d4:	e022      	b.n	800271c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80026d6:	7dfa      	ldrb	r2, [r7, #23]
 80026d8:	7dbb      	ldrb	r3, [r7, #22]
 80026da:	fa42 f303 	asr.w	r3, r2, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <lcd_ShowChar+0x152>
 80026e6:	883a      	ldrh	r2, [r7, #0]
 80026e8:	88b9      	ldrh	r1, [r7, #4]
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff3f 	bl	8002570 <lcd_DrawPoint>
				x++;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	3301      	adds	r3, #1
 80026f6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	8a3b      	ldrh	r3, [r7, #16]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	429a      	cmp	r2, r3
 8002702:	d105      	bne.n	8002710 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002704:	8a3b      	ldrh	r3, [r7, #16]
 8002706:	80fb      	strh	r3, [r7, #6]
					y++;
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	80bb      	strh	r3, [r7, #4]
					break;
 800270e:	e005      	b.n	800271c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	3301      	adds	r3, #1
 8002714:	75bb      	strb	r3, [r7, #22]
 8002716:	7dbb      	ldrb	r3, [r7, #22]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d9b7      	bls.n	800268c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800271c:	8a7b      	ldrh	r3, [r7, #18]
 800271e:	3301      	adds	r3, #1
 8002720:	827b      	strh	r3, [r7, #18]
 8002722:	8a7a      	ldrh	r2, [r7, #18]
 8002724:	89bb      	ldrh	r3, [r7, #12]
 8002726:	429a      	cmp	r2, r3
 8002728:	d380      	bcc.n	800262c <lcd_ShowChar+0x8c>
 800272a:	e000      	b.n	800272e <lcd_ShowChar+0x18e>
		else return;
 800272c:	bf00      	nop
				}
			}
		}
	}
}
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	08008e64 	.word	0x08008e64
 8002738:	08009454 	.word	0x08009454
 800273c:	0800a624 	.word	0x0800a624

08002740 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	460a      	mov	r2, r1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	4613      	mov	r3, r2
 800274e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002750:	2301      	movs	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002754:	e004      	b.n	8002760 <mypow+0x20>
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	71ba      	strb	r2, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f5      	bne.n	8002756 <mypow+0x16>
	return result;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af04      	add	r7, sp, #16
 800277e:	4604      	mov	r4, r0
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	4603      	mov	r3, r0
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002796:	2300      	movs	r3, #0
 8002798:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800279a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e059      	b.n	800285c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80027a8:	887c      	ldrh	r4, [r7, #2]
 80027aa:	787a      	ldrb	r2, [r7, #1]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	200a      	movs	r0, #10
 80027ba:	f7ff ffc1 	bl	8002740 <mypow>
 80027be:	4603      	mov	r3, r0
 80027c0:	fbb4 f1f3 	udiv	r1, r4, r3
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <lcd_ShowIntNum+0xf8>)
 80027c6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	1aca      	subs	r2, r1, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <lcd_ShowIntNum+0xac>
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	429a      	cmp	r2, r3
 80027e8:	da1c      	bge.n	8002824 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d117      	bne.n	8002820 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	fb12 f303 	smulbb	r3, r2, r3
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	4413      	add	r3, r2
 8002802:	b298      	uxth	r0, r3
 8002804:	8c3a      	ldrh	r2, [r7, #32]
 8002806:	88b9      	ldrh	r1, [r7, #4]
 8002808:	2300      	movs	r3, #0
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	2220      	movs	r2, #32
 800281a:	f7ff fec1 	bl	80025a0 <lcd_ShowChar>
				continue;
 800281e:	e01a      	b.n	8002856 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002820:	2301      	movs	r3, #1
 8002822:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	b29a      	uxth	r2, r3
 8002828:	7b7b      	ldrb	r3, [r7, #13]
 800282a:	b29b      	uxth	r3, r3
 800282c:	fb12 f303 	smulbb	r3, r2, r3
 8002830:	b29a      	uxth	r2, r3
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4413      	add	r3, r2
 8002836:	b298      	uxth	r0, r3
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	3330      	adds	r3, #48	; 0x30
 800283c:	b2da      	uxtb	r2, r3
 800283e:	8c3c      	ldrh	r4, [r7, #32]
 8002840:	88b9      	ldrh	r1, [r7, #4]
 8002842:	2300      	movs	r3, #0
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4623      	mov	r3, r4
 8002852:	f7ff fea5 	bl	80025a0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	787b      	ldrb	r3, [r7, #1]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3a1      	bcc.n	80027a8 <lcd_ShowIntNum+0x30>
	}
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	cccccccd 	.word	0xcccccccd

08002874 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <lcd_SetDir+0x44>)
 8002890:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002894:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <lcd_SetDir+0x44>)
 8002898:	22f0      	movs	r2, #240	; 0xf0
 800289a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800289c:	e006      	b.n	80028ac <lcd_SetDir+0x38>
		lcddev.width=240;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <lcd_SetDir+0x44>)
 80028a0:	22f0      	movs	r2, #240	; 0xf0
 80028a2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <lcd_SetDir+0x44>)
 80028a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028aa:	805a      	strh	r2, [r3, #2]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	200001ac 	.word	0x200001ac

080028bc <lcd_init>:


void lcd_init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	48aa      	ldr	r0, [pc, #680]	; (8002b70 <lcd_init+0x2b4>)
 80028c8:	f001 fcf4 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80028cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d0:	f001 f98c 	bl	8003bec <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028da:	48a5      	ldr	r0, [pc, #660]	; (8002b70 <lcd_init+0x2b4>)
 80028dc:	f001 fcea 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80028e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028e4:	f001 f982 	bl	8003bec <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff ffc3 	bl	8002874 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80028ee:	20d3      	movs	r0, #211	; 0xd3
 80028f0:	f7ff fd50 	bl	8002394 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80028f4:	f7ff fd6e 	bl	80023d4 <LCD_RD_DATA>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b9d      	ldr	r3, [pc, #628]	; (8002b74 <lcd_init+0x2b8>)
 80028fe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002900:	f7ff fd68 	bl	80023d4 <LCD_RD_DATA>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b9a      	ldr	r3, [pc, #616]	; (8002b74 <lcd_init+0x2b8>)
 800290a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800290c:	f7ff fd62 	bl	80023d4 <LCD_RD_DATA>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	4b97      	ldr	r3, [pc, #604]	; (8002b74 <lcd_init+0x2b8>)
 8002916:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <lcd_init+0x2b8>)
 800291a:	889b      	ldrh	r3, [r3, #4]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b94      	ldr	r3, [pc, #592]	; (8002b74 <lcd_init+0x2b8>)
 8002922:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002924:	f7ff fd56 	bl	80023d4 <LCD_RD_DATA>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <lcd_init+0x2b8>)
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <lcd_init+0x2b8>)
 8002936:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002938:	20cf      	movs	r0, #207	; 0xcf
 800293a:	f7ff fd2b 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff fd38 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002944:	20c1      	movs	r0, #193	; 0xc1
 8002946:	f7ff fd35 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800294a:	2030      	movs	r0, #48	; 0x30
 800294c:	f7ff fd32 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002950:	20ed      	movs	r0, #237	; 0xed
 8002952:	f7ff fd1f 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002956:	2064      	movs	r0, #100	; 0x64
 8002958:	f7ff fd2c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800295c:	2003      	movs	r0, #3
 800295e:	f7ff fd29 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002962:	2012      	movs	r0, #18
 8002964:	f7ff fd26 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002968:	2081      	movs	r0, #129	; 0x81
 800296a:	f7ff fd23 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800296e:	20e8      	movs	r0, #232	; 0xe8
 8002970:	f7ff fd10 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002974:	2085      	movs	r0, #133	; 0x85
 8002976:	f7ff fd1d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800297a:	2010      	movs	r0, #16
 800297c:	f7ff fd1a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002980:	207a      	movs	r0, #122	; 0x7a
 8002982:	f7ff fd17 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002986:	20cb      	movs	r0, #203	; 0xcb
 8002988:	f7ff fd04 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800298c:	2039      	movs	r0, #57	; 0x39
 800298e:	f7ff fd11 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	f7ff fd0e 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7ff fd0b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800299e:	2034      	movs	r0, #52	; 0x34
 80029a0:	f7ff fd08 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7ff fd05 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80029aa:	20f7      	movs	r0, #247	; 0xf7
 80029ac:	f7ff fcf2 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80029b0:	2020      	movs	r0, #32
 80029b2:	f7ff fcff 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80029b6:	20ea      	movs	r0, #234	; 0xea
 80029b8:	f7ff fcec 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fcf9 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fcf6 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80029c8:	20c0      	movs	r0, #192	; 0xc0
 80029ca:	f7ff fce3 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80029ce:	201b      	movs	r0, #27
 80029d0:	f7ff fcf0 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80029d4:	20c1      	movs	r0, #193	; 0xc1
 80029d6:	f7ff fcdd 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fcea 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80029e0:	20c5      	movs	r0, #197	; 0xc5
 80029e2:	f7ff fcd7 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80029e6:	2030      	movs	r0, #48	; 0x30
 80029e8:	f7ff fce4 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80029ec:	2030      	movs	r0, #48	; 0x30
 80029ee:	f7ff fce1 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80029f2:	20c7      	movs	r0, #199	; 0xc7
 80029f4:	f7ff fcce 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80029f8:	20b7      	movs	r0, #183	; 0xb7
 80029fa:	f7ff fcdb 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80029fe:	2036      	movs	r0, #54	; 0x36
 8002a00:	f7ff fcc8 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002a04:	2008      	movs	r0, #8
 8002a06:	f7ff fcd5 	bl	80023b4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002a0a:	203a      	movs	r0, #58	; 0x3a
 8002a0c:	f7ff fcc2 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002a10:	2055      	movs	r0, #85	; 0x55
 8002a12:	f7ff fccf 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002a16:	20b1      	movs	r0, #177	; 0xb1
 8002a18:	f7ff fcbc 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fcc9 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002a22:	201a      	movs	r0, #26
 8002a24:	f7ff fcc6 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002a28:	20b6      	movs	r0, #182	; 0xb6
 8002a2a:	f7ff fcb3 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002a2e:	200a      	movs	r0, #10
 8002a30:	f7ff fcc0 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002a34:	20a2      	movs	r0, #162	; 0xa2
 8002a36:	f7ff fcbd 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002a3a:	20f2      	movs	r0, #242	; 0xf2
 8002a3c:	f7ff fcaa 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fcb7 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002a46:	2026      	movs	r0, #38	; 0x26
 8002a48:	f7ff fca4 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fcb1 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002a52:	20e0      	movs	r0, #224	; 0xe0
 8002a54:	f7ff fc9e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002a58:	200f      	movs	r0, #15
 8002a5a:	f7ff fcab 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002a5e:	202a      	movs	r0, #42	; 0x2a
 8002a60:	f7ff fca8 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002a64:	2028      	movs	r0, #40	; 0x28
 8002a66:	f7ff fca5 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f7ff fca2 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002a70:	200e      	movs	r0, #14
 8002a72:	f7ff fc9f 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002a76:	2008      	movs	r0, #8
 8002a78:	f7ff fc9c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002a7c:	2054      	movs	r0, #84	; 0x54
 8002a7e:	f7ff fc99 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002a82:	20a9      	movs	r0, #169	; 0xa9
 8002a84:	f7ff fc96 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002a88:	2043      	movs	r0, #67	; 0x43
 8002a8a:	f7ff fc93 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f7ff fc90 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002a94:	200f      	movs	r0, #15
 8002a96:	f7ff fc8d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff fc8a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff fc87 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fc84 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fc81 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002ab2:	20e1      	movs	r0, #225	; 0xe1
 8002ab4:	f7ff fc6e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7ff fc7b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002abe:	2015      	movs	r0, #21
 8002ac0:	f7ff fc78 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002ac4:	2017      	movs	r0, #23
 8002ac6:	f7ff fc75 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002aca:	2007      	movs	r0, #7
 8002acc:	f7ff fc72 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002ad0:	2011      	movs	r0, #17
 8002ad2:	f7ff fc6f 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002ad6:	2006      	movs	r0, #6
 8002ad8:	f7ff fc6c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002adc:	202b      	movs	r0, #43	; 0x2b
 8002ade:	f7ff fc69 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002ae2:	2056      	movs	r0, #86	; 0x56
 8002ae4:	f7ff fc66 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002ae8:	203c      	movs	r0, #60	; 0x3c
 8002aea:	f7ff fc63 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002aee:	2005      	movs	r0, #5
 8002af0:	f7ff fc60 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002af4:	2010      	movs	r0, #16
 8002af6:	f7ff fc5d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff fc5a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002b00:	203f      	movs	r0, #63	; 0x3f
 8002b02:	f7ff fc57 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002b06:	203f      	movs	r0, #63	; 0x3f
 8002b08:	f7ff fc54 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002b0c:	200f      	movs	r0, #15
 8002b0e:	f7ff fc51 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002b12:	202b      	movs	r0, #43	; 0x2b
 8002b14:	f7ff fc3e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff fc4b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff fc48 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f7ff fc45 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002b2a:	203f      	movs	r0, #63	; 0x3f
 8002b2c:	f7ff fc42 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002b30:	202a      	movs	r0, #42	; 0x2a
 8002b32:	f7ff fc2f 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fc3c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7ff fc39 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff fc36 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002b48:	20ef      	movs	r0, #239	; 0xef
 8002b4a:	f7ff fc33 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002b4e:	2011      	movs	r0, #17
 8002b50:	f7ff fc20 	bl	8002394 <LCD_WR_REG>
	HAL_Delay(120);
 8002b54:	2078      	movs	r0, #120	; 0x78
 8002b56:	f001 f849 	bl	8003bec <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002b5a:	2029      	movs	r0, #41	; 0x29
 8002b5c:	f7ff fc1a 	bl	8002394 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002b60:	2201      	movs	r2, #1
 8002b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <lcd_init+0x2bc>)
 8002b68:	f001 fba4 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40020800 	.word	0x40020800
 8002b74:	200001ac 	.word	0x200001ac
 8002b78:	40020000 	.word	0x40020000

08002b7c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	81fb      	strh	r3, [r7, #14]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	81bb      	strh	r3, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002b9a:	e048      	b.n	8002c2e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d145      	bne.n	8002c2e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002ba2:	89fa      	ldrh	r2, [r7, #14]
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <lcd_ShowStr+0xc4>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc3f      	bgt.n	8002c38 <lcd_ShowStr+0xbc>
 8002bb8:	89ba      	ldrh	r2, [r7, #12]
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <lcd_ShowStr+0xc4>)
 8002bbc:	885b      	ldrh	r3, [r3, #2]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bc4:	1acb      	subs	r3, r1, r3
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dc36      	bgt.n	8002c38 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d902      	bls.n	8002bd8 <lcd_ShowStr+0x5c>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
 8002bd6:	e02a      	b.n	8002c2e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b0d      	cmp	r3, #13
 8002bde:	d10b      	bne.n	8002bf8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	89bb      	ldrh	r3, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002bec:	8abb      	ldrh	r3, [r7, #20]
 8002bee:	81fb      	strh	r3, [r7, #14]
					str++;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	e017      	b.n	8002c28 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	88fc      	ldrh	r4, [r7, #6]
 8002bfe:	89b9      	ldrh	r1, [r7, #12]
 8002c00:	89f8      	ldrh	r0, [r7, #14]
 8002c02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7ff fcc4 	bl	80025a0 <lcd_ShowChar>
					x+=sizey/2;
 8002c18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	4413      	add	r3, r2
 8002c26:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1b2      	bne.n	8002b9c <lcd_ShowStr+0x20>
 8002c36:	e000      	b.n	8002c3a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002c38:	bf00      	nop
			}
		}
	}
}
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}
 8002c40:	200001ac 	.word	0x200001ac

08002c44 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af04      	add	r7, sp, #16
 8002c4a:	60ba      	str	r2, [r7, #8]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	81fb      	strh	r3, [r7, #14]
 8002c52:	460b      	mov	r3, r1
 8002c54:	81bb      	strh	r3, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f7fd fab8 	bl	80001d0 <strlen>
 8002c60:	4603      	mov	r3, r0
 8002c62:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <lcd_StrCenter+0x60>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	0fda      	lsrs	r2, r3, #31
 8002c72:	4413      	add	r3, r2
 8002c74:	105b      	asrs	r3, r3, #1
 8002c76:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002c78:	89fa      	ldrh	r2, [r7, #14]
 8002c7a:	8abb      	ldrh	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	89b9      	ldrh	r1, [r7, #12]
 8002c84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	8c3b      	ldrh	r3, [r7, #32]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f7ff ff70 	bl	8002b7c <lcd_ShowStr>
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200001ac 	.word	0x200001ac

08002ca8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <led7_init+0x14>)
 8002cb2:	f001 faff 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021800 	.word	0x40021800

08002cc0 <led7_Scan>:

void led7_Scan(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <led7_Scan+0x104>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <led7_Scan+0x104>)
 8002cce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <led7_Scan+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <led7_Scan+0x10c>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <led7_Scan+0x104>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <led7_Scan+0x104>)
 8002cea:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <led7_Scan+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d847      	bhi.n	8002d84 <led7_Scan+0xc4>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <led7_Scan+0x3c>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d2b 	.word	0x08002d2b
 8002d04:	08002d49 	.word	0x08002d49
 8002d08:	08002d67 	.word	0x08002d67
	case 0:
		spi_buffer |= 0x00b0;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <led7_Scan+0x104>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <led7_Scan+0x104>)
 8002d18:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <led7_Scan+0x104>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <led7_Scan+0x104>)
 8002d26:	801a      	strh	r2, [r3, #0]
		break;
 8002d28:	e02d      	b.n	8002d86 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <led7_Scan+0x104>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <led7_Scan+0x104>)
 8002d36:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <led7_Scan+0x104>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f023 0320 	bic.w	r3, r3, #32
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <led7_Scan+0x104>)
 8002d44:	801a      	strh	r2, [r3, #0]
		break;
 8002d46:	e01e      	b.n	8002d86 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <led7_Scan+0x104>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <led7_Scan+0x104>)
 8002d54:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <led7_Scan+0x104>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <led7_Scan+0x104>)
 8002d62:	801a      	strh	r2, [r3, #0]
		break;
 8002d64:	e00f      	b.n	8002d86 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <led7_Scan+0x104>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <led7_Scan+0x104>)
 8002d72:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <led7_Scan+0x104>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <led7_Scan+0x104>)
 8002d80:	801a      	strh	r2, [r3, #0]
		break;
 8002d82:	e000      	b.n	8002d86 <led7_Scan+0xc6>
	default:
		break;
 8002d84:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <led7_Scan+0x108>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	425a      	negs	r2, r3
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	bf58      	it	pl
 8002d98:	4253      	negpl	r3, r2
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <led7_Scan+0x108>)
 8002d9c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2140      	movs	r1, #64	; 0x40
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <led7_Scan+0x110>)
 8002da4:	f001 fa86 	bl	80042b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002da8:	2301      	movs	r3, #1
 8002daa:	2202      	movs	r2, #2
 8002dac:	4905      	ldr	r1, [pc, #20]	; (8002dc4 <led7_Scan+0x104>)
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <led7_Scan+0x114>)
 8002db0:	f003 f885 	bl	8005ebe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002db4:	2201      	movs	r2, #1
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <led7_Scan+0x110>)
 8002dba:	f001 fa7b 	bl	80042b4 <HAL_GPIO_WritePin>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	200000ac 	.word	0x200000ac
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	200001e8 	.word	0x200001e8

08002dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dde:	f000 fe93 	bl	8003b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002de2:	f000 f9b9 	bl	8003158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002de6:	f7fe fb9d 	bl	8001524 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002dea:	f000 fcd1 	bl	8003790 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002dee:	f000 fba3 	bl	8003538 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002df2:	f7fe fac7 	bl	8001384 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002df6:	f7fe fc8d 	bl	8001714 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002dfa:	f000 fda3 	bl	8003944 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002dfe:	f000 fa15 	bl	800322c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7ff fb44 	bl	8002490 <lcd_Clear>
  updateTime();
 8002e08:	f000 fa34 	bl	8003274 <updateTime>
  lcd_Fill(0, 250, 240, 320, BLACK);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e14:	22f0      	movs	r2, #240	; 0xf0
 8002e16:	21fa      	movs	r1, #250	; 0xfa
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff fb73 	bl	8002504 <lcd_Fill>
  lcd_ShowStr(70, 250, "NORMAL MODE", WHITE, BLACK, 24, 0);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	2318      	movs	r3, #24
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2e:	4aaa      	ldr	r2, [pc, #680]	; (80030d8 <main+0x300>)
 8002e30:	21fa      	movs	r1, #250	; 0xfa
 8002e32:	2046      	movs	r0, #70	; 0x46
 8002e34:	f7ff fea2 	bl	8002b7c <lcd_ShowStr>
  int status = UPDATE_HOURS;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  // Periodic timer interrupt flag
	  if (flag_timer2) {
 8002e3c:	4ba7      	ldr	r3, [pc, #668]	; (80030dc <main+0x304>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07a      	beq.n	8002f3a <main+0x162>
		  flag_timer2 = 0;
 8002e44:	4ba5      	ldr	r3, [pc, #660]	; (80030dc <main+0x304>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]

		  // Other periodic tasks
		  button_Scan();
 8002e4a:	f7fe f965 	bl	8001118 <button_Scan>
		  update_state();
 8002e4e:	f7fe fcd7 	bl	8001800 <update_state>
		  clock_run();
 8002e52:	f7fe fd89 	bl	8001968 <clock_run>

		  // Check for button press to enter UART update mode
		  update_time_uart();
 8002e56:	f000 faad 	bl	80033b4 <update_time_uart>

		  // Handle error message display timing
		  if (error_display_flag) {
 8002e5a:	4ba1      	ldr	r3, [pc, #644]	; (80030e0 <main+0x308>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d018      	beq.n	8002e94 <main+0xbc>
			  error_display_timer += 50; // Increment timer by the timer interval (50ms)
 8002e62:	4ba0      	ldr	r3, [pc, #640]	; (80030e4 <main+0x30c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a9e      	ldr	r2, [pc, #632]	; (80030e4 <main+0x30c>)
 8002e6a:	6013      	str	r3, [r2, #0]

			  if (error_display_timer >= 2000) { // 2000ms = 2 seconds
 8002e6c:	4b9d      	ldr	r3, [pc, #628]	; (80030e4 <main+0x30c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002e74:	d30e      	bcc.n	8002e94 <main+0xbc>
				  error_display_flag = 0;        // Reset the flag
 8002e76:	4b9a      	ldr	r3, [pc, #616]	; (80030e0 <main+0x308>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
				  error_display_timer = 0;       // Reset the timer
 8002e7c:	4b99      	ldr	r3, [pc, #612]	; (80030e4 <main+0x30c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

				  // Clear the error messages from the LCD
				  // You may need to adjust the coordinates based on your display layout
				  lcd_Fill(0, 20, lcddev.width, 60, BLACK); // Clear the area where messages were displayed
 8002e82:	4b99      	ldr	r3, [pc, #612]	; (80030e8 <main+0x310>)
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	233c      	movs	r3, #60	; 0x3c
 8002e8c:	2114      	movs	r1, #20
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff fb38 	bl	8002504 <lcd_Fill>
			  }
		  }

		  // Monitor timeout if waiting for a response
		  if (update_time_uart_flag) {
 8002e94:	4b95      	ldr	r3, [pc, #596]	; (80030ec <main+0x314>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d04e      	beq.n	8002f3a <main+0x162>
			  if (timeout_flag) {
 8002e9c:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <main+0x318>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d04a      	beq.n	8002f3a <main+0x162>
				  timeout_timer += 50; // Assuming the timer interval is 50ms
 8002ea4:	4b93      	ldr	r3, [pc, #588]	; (80030f4 <main+0x31c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3332      	adds	r3, #50	; 0x32
 8002eaa:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <main+0x31c>)
 8002eac:	6013      	str	r3, [r2, #0]

				  if (timeout_timer >= TIMEOUT_PERIOD) {
 8002eae:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <main+0x31c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d93f      	bls.n	8002f3a <main+0x162>
					  timeout_timer = 0; // Reset the timer for the next attempt
 8002eba:	4b8e      	ldr	r3, [pc, #568]	; (80030f4 <main+0x31c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
					  retry_count++;
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <main+0x320>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <main+0x320>)
 8002eca:	701a      	strb	r2, [r3, #0]

					  if (retry_count < MAX_RETRY) {
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	; (80030f8 <main+0x320>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d818      	bhi.n	8002f06 <main+0x12e>
						  // Retry sending the request
						  switch (status) {
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d011      	beq.n	8002efe <main+0x126>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	dc2c      	bgt.n	8002f3a <main+0x162>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <main+0x116>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d004      	beq.n	8002ef6 <main+0x11e>
 8002eec:	e025      	b.n	8002f3a <main+0x162>
							  case UPDATE_HOURS:
								  uart_Rs232SendString("Hours\n");
 8002eee:	4883      	ldr	r0, [pc, #524]	; (80030fc <main+0x324>)
 8002ef0:	f000 fcce 	bl	8003890 <uart_Rs232SendString>
								  break;
 8002ef4:	e021      	b.n	8002f3a <main+0x162>
							  case UPDATE_MINS:
								  uart_Rs232SendString("Minutes\n");
 8002ef6:	4882      	ldr	r0, [pc, #520]	; (8003100 <main+0x328>)
 8002ef8:	f000 fcca 	bl	8003890 <uart_Rs232SendString>
								  break;
 8002efc:	e01d      	b.n	8002f3a <main+0x162>
							  case UPDATE_SECS:
								  uart_Rs232SendString("Seconds\n");
 8002efe:	4881      	ldr	r0, [pc, #516]	; (8003104 <main+0x32c>)
 8002f00:	f000 fcc6 	bl	8003890 <uart_Rs232SendString>
								  break;
 8002f04:	e019      	b.n	8002f3a <main+0x162>
						  }
					  } else {
						  // Exceeded retry limit, display error and reset
						  lcd_StrCenter(0, 20, "Error: No response!", RED, BLACK, 16, 0);
 8002f06:	2300      	movs	r3, #0
 8002f08:	9302      	str	r3, [sp, #8]
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f16:	4a7c      	ldr	r2, [pc, #496]	; (8003108 <main+0x330>)
 8002f18:	2114      	movs	r1, #20
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7ff fe92 	bl	8002c44 <lcd_StrCenter>

						  // Set the error display flag and reset the timer
						  error_display_flag = 1;     // Start the error display duration
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <main+0x308>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
						  error_display_timer = 0;    // Reset the timer
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <main+0x30c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]


						  reset_timeout(); // Reset timeout and retry counters
 8002f2c:	f000 fa98 	bl	8003460 <reset_timeout>
						  status = UPDATE_HOURS; // Reset state machine to initial state
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
						  update_time_uart_flag = 0;
 8002f34:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <main+0x314>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  // Process received data if available
	  if (buffer_flag && update_time_uart_flag) {
 8002f3a:	4b74      	ldr	r3, [pc, #464]	; (800310c <main+0x334>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80a8 	beq.w	8003094 <main+0x2bc>
 8002f44:	4b69      	ldr	r3, [pc, #420]	; (80030ec <main+0x314>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a3 	beq.w	8003094 <main+0x2bc>
		  buffer_flag = 0; // Clear the buffer flag
 8002f4e:	4b6f      	ldr	r3, [pc, #444]	; (800310c <main+0x334>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]

		  // Process data based on the current state
		  switch (status) {
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d05a      	beq.n	8003010 <main+0x238>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	f300 809b 	bgt.w	8003098 <main+0x2c0>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <main+0x198>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d028      	beq.n	8002fc0 <main+0x1e8>
//				  status = UPDATE_HOURS; // Reset state machine for the next update
//				  update_time_uart_flag = 0;
//				  break;

			  default:
				  break;
 8002f6e:	e093      	b.n	8003098 <main+0x2c0>
				  if (isInteger(rcv)) {
 8002f70:	4867      	ldr	r0, [pc, #412]	; (8003110 <main+0x338>)
 8002f72:	f000 fa4f 	bl	8003414 <isInteger>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <main+0x1dc>
					  int hour = atoi(rcv);
 8002f7c:	4864      	ldr	r0, [pc, #400]	; (8003110 <main+0x338>)
 8002f7e:	f005 fa1b 	bl	80083b8 <atoi>
 8002f82:	6038      	str	r0, [r7, #0]
					  if (hour >= 0 && hour < 24) {
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0e      	blt.n	8002fa8 <main+0x1d0>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b17      	cmp	r3, #23
 8002f8e:	dc0b      	bgt.n	8002fa8 <main+0x1d0>
						  ds3231_Write(ADDRESS_HOUR, hour);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	4619      	mov	r1, r3
 8002f96:	2002      	movs	r0, #2
 8002f98:	f7fe f96e 	bl	8001278 <ds3231_Write>
						  status = UPDATE_MINS; // Proceed to updating minutes
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
						  reset_timeout();     // Clear timeout after valid response
 8002fa0:	f000 fa5e 	bl	8003460 <reset_timeout>
					  if (hour >= 0 && hour < 24) {
 8002fa4:	bf00      	nop
				  break;
 8002fa6:	e078      	b.n	800309a <main+0x2c2>
						  uart_Rs232SendString("Hours\n"); // Resend request for hours
 8002fa8:	4854      	ldr	r0, [pc, #336]	; (80030fc <main+0x324>)
 8002faa:	f000 fc71 	bl	8003890 <uart_Rs232SendString>
						  clear_buffer();
 8002fae:	f000 fa21 	bl	80033f4 <clear_buffer>
				  break;
 8002fb2:	e072      	b.n	800309a <main+0x2c2>
					  uart_Rs232SendString("Hours\n"); // Resend request for hours
 8002fb4:	4851      	ldr	r0, [pc, #324]	; (80030fc <main+0x324>)
 8002fb6:	f000 fc6b 	bl	8003890 <uart_Rs232SendString>
					  clear_buffer();
 8002fba:	f000 fa1b 	bl	80033f4 <clear_buffer>
				  break;
 8002fbe:	e06c      	b.n	800309a <main+0x2c2>
				  if (isInteger(rcv)) {
 8002fc0:	4853      	ldr	r0, [pc, #332]	; (8003110 <main+0x338>)
 8002fc2:	f000 fa27 	bl	8003414 <isInteger>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01b      	beq.n	8003004 <main+0x22c>
					  int mins = atoi(rcv);
 8002fcc:	4850      	ldr	r0, [pc, #320]	; (8003110 <main+0x338>)
 8002fce:	f005 f9f3 	bl	80083b8 <atoi>
 8002fd2:	6078      	str	r0, [r7, #4]
					  if (mins >= 0 && mins < 60) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	db0e      	blt.n	8002ff8 <main+0x220>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b3b      	cmp	r3, #59	; 0x3b
 8002fde:	dc0b      	bgt.n	8002ff8 <main+0x220>
						  ds3231_Write(ADDRESS_MIN, mins);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fe f946 	bl	8001278 <ds3231_Write>
						  status = UPDATE_SECS; // Proceed to updating seconds
 8002fec:	2302      	movs	r3, #2
 8002fee:	60fb      	str	r3, [r7, #12]
						  reset_timeout();     // Clear timeout after valid response
 8002ff0:	f000 fa36 	bl	8003460 <reset_timeout>
					  if (mins >= 0 && mins < 60) {
 8002ff4:	bf00      	nop
				  break;
 8002ff6:	e050      	b.n	800309a <main+0x2c2>
						  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
 8002ff8:	4841      	ldr	r0, [pc, #260]	; (8003100 <main+0x328>)
 8002ffa:	f000 fc49 	bl	8003890 <uart_Rs232SendString>
						  clear_buffer();
 8002ffe:	f000 f9f9 	bl	80033f4 <clear_buffer>
				  break;
 8003002:	e04a      	b.n	800309a <main+0x2c2>
					  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
 8003004:	483e      	ldr	r0, [pc, #248]	; (8003100 <main+0x328>)
 8003006:	f000 fc43 	bl	8003890 <uart_Rs232SendString>
					  clear_buffer();
 800300a:	f000 f9f3 	bl	80033f4 <clear_buffer>
				  break;
 800300e:	e044      	b.n	800309a <main+0x2c2>
				  if (isInteger(rcv)) {
 8003010:	483f      	ldr	r0, [pc, #252]	; (8003110 <main+0x338>)
 8003012:	f000 f9ff 	bl	8003414 <isInteger>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d035      	beq.n	8003088 <main+0x2b0>
					  int secs = atoi(rcv);
 800301c:	483c      	ldr	r0, [pc, #240]	; (8003110 <main+0x338>)
 800301e:	f005 f9cb 	bl	80083b8 <atoi>
 8003022:	60b8      	str	r0, [r7, #8]
					  if (secs >= 0 && secs < 60) {
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db28      	blt.n	800307c <main+0x2a4>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b3b      	cmp	r3, #59	; 0x3b
 800302e:	dc25      	bgt.n	800307c <main+0x2a4>
						  ds3231_Write(ADDRESS_SEC, secs);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	2000      	movs	r0, #0
 8003038:	f7fe f91e 	bl	8001278 <ds3231_Write>
						  status = CONFIRM; // Proceed to confirmation
 800303c:	2303      	movs	r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
						  reset_timeout(); // Clear timeout after valid response
 8003040:	f000 fa0e 	bl	8003460 <reset_timeout>
						  lcd_StrCenter(0, 20, "Time updated successfully", GREEN, BLACK, 16, 0);
 8003044:	2300      	movs	r3, #0
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	2310      	movs	r3, #16
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2300      	movs	r3, #0
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003054:	4a2f      	ldr	r2, [pc, #188]	; (8003114 <main+0x33c>)
 8003056:	2114      	movs	r1, #20
 8003058:	2000      	movs	r0, #0
 800305a:	f7ff fdf3 	bl	8002c44 <lcd_StrCenter>
						  error_display_flag = 1;     // Start the error display duration
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <main+0x308>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
						  error_display_timer = 0;    // Reset the timer
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <main+0x30c>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
						  reset_timeout(); // Clear timeout and reset retry counters
 800306a:	f000 f9f9 	bl	8003460 <reset_timeout>
						  status = UPDATE_HOURS; // Reset state machine for the next update
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
						  update_time_uart_flag = 0;
 8003072:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <main+0x314>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
					  if (secs >= 0 && secs < 60) {
 8003078:	bf00      	nop
				  break;
 800307a:	e00e      	b.n	800309a <main+0x2c2>
						  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
 800307c:	4821      	ldr	r0, [pc, #132]	; (8003104 <main+0x32c>)
 800307e:	f000 fc07 	bl	8003890 <uart_Rs232SendString>
						  clear_buffer();
 8003082:	f000 f9b7 	bl	80033f4 <clear_buffer>
				  break;
 8003086:	e008      	b.n	800309a <main+0x2c2>
					  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
 8003088:	481e      	ldr	r0, [pc, #120]	; (8003104 <main+0x32c>)
 800308a:	f000 fc01 	bl	8003890 <uart_Rs232SendString>
					  clear_buffer();
 800308e:	f000 f9b1 	bl	80033f4 <clear_buffer>
				  break;
 8003092:	e002      	b.n	800309a <main+0x2c2>
		  }
	  }
 8003094:	bf00      	nop
 8003096:	e000      	b.n	800309a <main+0x2c2>
				  break;
 8003098:	bf00      	nop

	  // Trigger sending a request if timeout_flag is not active
	  if (!timeout_flag && update_time_uart_flag) {
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <main+0x318>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d14e      	bne.n	8003140 <main+0x368>
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <main+0x314>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04a      	beq.n	8003140 <main+0x368>
		  switch (status) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d03d      	beq.n	800312c <main+0x354>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	dc46      	bgt.n	8003144 <main+0x36c>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <main+0x2ec>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d02a      	beq.n	8003118 <main+0x340>
				  timeout_flag = 1;  // Start the timeout timer
				  timeout_timer = 0; // Reset the timer
				  break;

			  default:
				  break;
 80030c2:	e03f      	b.n	8003144 <main+0x36c>
				  uart_Rs232SendString("Hours\n");
 80030c4:	480d      	ldr	r0, [pc, #52]	; (80030fc <main+0x324>)
 80030c6:	f000 fbe3 	bl	8003890 <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <main+0x318>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <main+0x31c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
				  break;
 80030d6:	e036      	b.n	8003146 <main+0x36e>
 80030d8:	08008de0 	.word	0x08008de0
 80030dc:	200000c0 	.word	0x200000c0
 80030e0:	200000ba 	.word	0x200000ba
 80030e4:	200000bc 	.word	0x200000bc
 80030e8:	200001ac 	.word	0x200001ac
 80030ec:	200000b9 	.word	0x200000b9
 80030f0:	200000b8 	.word	0x200000b8
 80030f4:	200000b4 	.word	0x200000b4
 80030f8:	200000b0 	.word	0x200000b0
 80030fc:	08008dec 	.word	0x08008dec
 8003100:	08008df4 	.word	0x08008df4
 8003104:	08008e00 	.word	0x08008e00
 8003108:	08008e0c 	.word	0x08008e0c
 800310c:	200000ce 	.word	0x200000ce
 8003110:	200002ec 	.word	0x200002ec
 8003114:	08008e20 	.word	0x08008e20
				  uart_Rs232SendString("Minutes\n");
 8003118:	480b      	ldr	r0, [pc, #44]	; (8003148 <main+0x370>)
 800311a:	f000 fbb9 	bl	8003890 <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <main+0x374>)
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <main+0x378>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
				  break;
 800312a:	e00c      	b.n	8003146 <main+0x36e>
				  uart_Rs232SendString("Seconds\n");
 800312c:	4809      	ldr	r0, [pc, #36]	; (8003154 <main+0x37c>)
 800312e:	f000 fbaf 	bl	8003890 <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <main+0x374>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <main+0x378>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
				  break;
 800313e:	e002      	b.n	8003146 <main+0x36e>
		  }
	  }
 8003140:	bf00      	nop
 8003142:	e67b      	b.n	8002e3c <main+0x64>
				  break;
 8003144:	bf00      	nop
	  if (flag_timer2) {
 8003146:	e679      	b.n	8002e3c <main+0x64>
 8003148:	08008df4 	.word	0x08008df4
 800314c:	200000b8 	.word	0x200000b8
 8003150:	200000b4 	.word	0x200000b4
 8003154:	08008e00 	.word	0x08008e00

08003158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b094      	sub	sp, #80	; 0x50
 800315c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800315e:	f107 0320 	add.w	r3, r7, #32
 8003162:	2230      	movs	r2, #48	; 0x30
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f005 f954 	bl	8008414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <SystemClock_Config+0xcc>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <SystemClock_Config+0xcc>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <SystemClock_Config+0xcc>)
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003198:	2300      	movs	r3, #0
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <SystemClock_Config+0xd0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a21      	ldr	r2, [pc, #132]	; (8003228 <SystemClock_Config+0xd0>)
 80031a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <SystemClock_Config+0xd0>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b0:	607b      	str	r3, [r7, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031b4:	2302      	movs	r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b8:	2301      	movs	r3, #1
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031bc:	2310      	movs	r3, #16
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c0:	2302      	movs	r3, #2
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031c4:	2300      	movs	r3, #0
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031c8:	2308      	movs	r3, #8
 80031ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031cc:	23a8      	movs	r3, #168	; 0xa8
 80031ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031d0:	2302      	movs	r3, #2
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031d4:	2304      	movs	r3, #4
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	4618      	mov	r0, r3
 80031de:	f002 f971 	bl	80054c4 <HAL_RCC_OscConfig>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031e8:	f000 f950 	bl	800348c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ec:	230f      	movs	r3, #15
 80031ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031f0:	2302      	movs	r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80031fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	2105      	movs	r1, #5
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fbd2 	bl	80059b4 <HAL_RCC_ClockConfig>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003216:	f000 f939 	bl	800348c <Error_Handler>
  }
}
 800321a:	bf00      	nop
 800321c:	3750      	adds	r7, #80	; 0x50
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40007000 	.word	0x40007000

0800322c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2120      	movs	r1, #32
 8003234:	480e      	ldr	r0, [pc, #56]	; (8003270 <system_init+0x44>)
 8003236:	f001 f83d 	bl	80042b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	2140      	movs	r1, #64	; 0x40
 800323e:	480c      	ldr	r0, [pc, #48]	; (8003270 <system_init+0x44>)
 8003240:	f001 f838 	bl	80042b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2110      	movs	r1, #16
 8003248:	4809      	ldr	r0, [pc, #36]	; (8003270 <system_init+0x44>)
 800324a:	f001 f833 	bl	80042b4 <HAL_GPIO_WritePin>
	  timer_init();
 800324e:	f000 f923 	bl	8003498 <timer_init>
	  led7_init();
 8003252:	f7ff fd29 	bl	8002ca8 <led7_init>
	  button_init();
 8003256:	f7fd ff53 	bl	8001100 <button_init>
	  lcd_init();
 800325a:	f7ff fb2f 	bl	80028bc <lcd_init>
	  uart_init_rs232();
 800325e:	f000 fb09 	bl	8003874 <uart_init_rs232>
	  ds3231_init();
 8003262:	f7fd ffc5 	bl	80011f0 <ds3231_init>
	  setTimer2(50);
 8003266:	2032      	movs	r0, #50	; 0x32
 8003268:	f000 f920 	bl	80034ac <setTimer2>
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000

08003274 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8003278:	2118      	movs	r1, #24
 800327a:	2006      	movs	r0, #6
 800327c:	f7fd fffc 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8003280:	210b      	movs	r1, #11
 8003282:	2005      	movs	r0, #5
 8003284:	f7fd fff8 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 8003288:	210f      	movs	r1, #15
 800328a:	2004      	movs	r0, #4
 800328c:	f7fd fff4 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8003290:	2106      	movs	r1, #6
 8003292:	2003      	movs	r0, #3
 8003294:	f7fd fff0 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 7);
 8003298:	2107      	movs	r1, #7
 800329a:	2002      	movs	r0, #2
 800329c:	f7fd ffec 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 40);
 80032a0:	2128      	movs	r1, #40	; 0x28
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fd ffe8 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 80032a8:	2117      	movs	r1, #23
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fd ffe4 	bl	8001278 <ds3231_Write>
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <displayTime>:
        return 1;
    else
        return 0;
}

void displayTime(){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <displayTime+0xe4>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	2318      	movs	r3, #24
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	2300      	movs	r3, #0
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	2302      	movs	r3, #2
 80032d0:	2164      	movs	r1, #100	; 0x64
 80032d2:	2046      	movs	r0, #70	; 0x46
 80032d4:	f7ff fa50 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <displayTime+0xe8>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	2318      	movs	r3, #24
 80032e0:	9302      	str	r3, [sp, #8]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2302      	movs	r3, #2
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	206e      	movs	r0, #110	; 0x6e
 80032f2:	f7ff fa41 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <displayTime+0xec>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	2318      	movs	r3, #24
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	2300      	movs	r3, #0
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2302      	movs	r3, #2
 800330c:	2164      	movs	r1, #100	; 0x64
 800330e:	2096      	movs	r0, #150	; 0x96
 8003310:	f7ff fa32 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <displayTime+0xf0>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	2318      	movs	r3, #24
 8003320:	9302      	str	r3, [sp, #8]
 8003322:	2300      	movs	r3, #0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2302      	movs	r3, #2
 800332e:	2182      	movs	r1, #130	; 0x82
 8003330:	2014      	movs	r0, #20
 8003332:	f7ff fa21 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <displayTime+0xf4>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b29a      	uxth	r2, r3
 800333c:	2318      	movs	r3, #24
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	2300      	movs	r3, #0
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2302      	movs	r3, #2
 800334c:	2182      	movs	r1, #130	; 0x82
 800334e:	2046      	movs	r0, #70	; 0x46
 8003350:	f7ff fa12 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8003354:	4b15      	ldr	r3, [pc, #84]	; (80033ac <displayTime+0xf8>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b29a      	uxth	r2, r3
 800335a:	2318      	movs	r3, #24
 800335c:	9302      	str	r3, [sp, #8]
 800335e:	2300      	movs	r3, #0
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2302      	movs	r3, #2
 800336a:	2182      	movs	r1, #130	; 0x82
 800336c:	206e      	movs	r0, #110	; 0x6e
 800336e:	f7ff fa03 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <displayTime+0xfc>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	2318      	movs	r3, #24
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	2300      	movs	r3, #0
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2302      	movs	r3, #2
 8003388:	2182      	movs	r1, #130	; 0x82
 800338a:	2096      	movs	r0, #150	; 0x96
 800338c:	f7ff f9f4 	bl	8002778 <lcd_ShowIntNum>
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200000fd 	.word	0x200000fd
 800339c:	200000fa 	.word	0x200000fa
 80033a0:	200000f8 	.word	0x200000f8
 80033a4:	200000fc 	.word	0x200000fc
 80033a8:	200000fb 	.word	0x200000fb
 80033ac:	200000fe 	.word	0x200000fe
 80033b0:	200000f9 	.word	0x200000f9

080033b4 <update_time_uart>:

// Exercise 5 =================================================================

void update_time_uart(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <update_time_uart+0x34>)
 80033bc:	8b1b      	ldrh	r3, [r3, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10f      	bne.n	80033e2 <update_time_uart+0x2e>
		lcd_StrCenter(0, 20, "Updating hours...", WHITE, BLACK, 16, 0);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	2310      	movs	r3, #16
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <update_time_uart+0x38>)
 80033d4:	2114      	movs	r1, #20
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7ff fc34 	bl	8002c44 <lcd_StrCenter>
		update_time_uart_flag = 1;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <update_time_uart+0x3c>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
	}
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200000d8 	.word	0x200000d8
 80033ec:	08008e3c 	.word	0x08008e3c
 80033f0:	200000b9 	.word	0x200000b9

080033f4 <clear_buffer>:

void clear_buffer() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	memset(rcv, 0, sizeof(rcv)); // Clear the buffer
 80033f8:	2264      	movs	r2, #100	; 0x64
 80033fa:	2100      	movs	r1, #0
 80033fc:	4803      	ldr	r0, [pc, #12]	; (800340c <clear_buffer+0x18>)
 80033fe:	f005 f809 	bl	8008414 <memset>
	index_buffer = 0; // reset the index
 8003402:	4b03      	ldr	r3, [pc, #12]	; (8003410 <clear_buffer+0x1c>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200002ec 	.word	0x200002ec
 8003410:	200000cd 	.word	0x200000cd

08003414 <isInteger>:
    }
    return 1; // All characters are digits
}
*/

int isInteger(const char *str) {
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    if (*str == '\0') return 0;  // Empty string
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d110      	bne.n	8003446 <isInteger+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	e013      	b.n	8003450 <isInteger+0x3c>
    while (*str) {
        if (!isdigit(*str)) return 0;  // Check if each character is a digit
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	3301      	adds	r3, #1
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <isInteger+0x48>)
 8003430:	4413      	add	r3, r2
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <isInteger+0x2c>
 800343c:	2300      	movs	r3, #0
 800343e:	e007      	b.n	8003450 <isInteger+0x3c>
        str++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	607b      	str	r3, [r7, #4]
    while (*str) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ec      	bne.n	8003428 <isInteger+0x14>
    }
    return 1;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	0800bdfc 	.word	0x0800bdfc

08003460 <reset_timeout>:

void reset_timeout() {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
    timeout_flag = 0;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <reset_timeout+0x20>)
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
    timeout_timer = 0;
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <reset_timeout+0x24>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    retry_count = 0;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <reset_timeout+0x28>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
    clear_buffer();
 8003476:	f7ff ffbd 	bl	80033f4 <clear_buffer>
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200000b8 	.word	0x200000b8
 8003484:	200000b4 	.word	0x200000b4
 8003488:	200000b0 	.word	0x200000b0

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	e7fe      	b.n	8003494 <Error_Handler+0x8>
	...

08003498 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <timer_init+0x10>)
 800349e:	f003 fac1 	bl	8006a24 <HAL_TIM_Base_Start_IT>
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000240 	.word	0x20000240

080034ac <setTimer2>:

void setTimer2(uint16_t duration){
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <setTimer2+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <setTimer2+0x2c>)
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <setTimer2+0x30>)
 80034c2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <setTimer2+0x34>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	801a      	strh	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	200000c4 	.word	0x200000c4
 80034dc:	200000c2 	.word	0x200000c2
 80034e0:	200000c0 	.word	0x200000c0

080034e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f4:	d116      	bne.n	8003524 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003508:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003514:	2201      	movs	r2, #1
 8003516:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800351a:	881a      	ldrh	r2, [r3, #0]
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800351e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003520:	f7ff fbce 	bl	8002cc0 <led7_Scan>
	}
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200000c2 	.word	0x200000c2
 8003530:	200000c0 	.word	0x200000c0
 8003534:	200000c4 	.word	0x200000c4

08003538 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <MX_SPI1_Init+0x64>)
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <MX_SPI1_Init+0x68>)
 8003540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003542:	4b16      	ldr	r3, [pc, #88]	; (800359c <MX_SPI1_Init+0x64>)
 8003544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800354a:	4b14      	ldr	r3, [pc, #80]	; (800359c <MX_SPI1_Init+0x64>)
 800354c:	2200      	movs	r2, #0
 800354e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <MX_SPI1_Init+0x64>)
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003556:	4b11      	ldr	r3, [pc, #68]	; (800359c <MX_SPI1_Init+0x64>)
 8003558:	2200      	movs	r2, #0
 800355a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800355c:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_SPI1_Init+0x64>)
 800355e:	2200      	movs	r2, #0
 8003560:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_SPI1_Init+0x64>)
 8003564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003568:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <MX_SPI1_Init+0x64>)
 800356c:	2200      	movs	r2, #0
 800356e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003570:	4b0a      	ldr	r3, [pc, #40]	; (800359c <MX_SPI1_Init+0x64>)
 8003572:	2200      	movs	r2, #0
 8003574:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <MX_SPI1_Init+0x64>)
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357c:	4b07      	ldr	r3, [pc, #28]	; (800359c <MX_SPI1_Init+0x64>)
 800357e:	2200      	movs	r2, #0
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <MX_SPI1_Init+0x64>)
 8003584:	220a      	movs	r2, #10
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <MX_SPI1_Init+0x64>)
 800358a:	f002 fc0f 	bl	8005dac <HAL_SPI_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003594:	f7ff ff7a 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200001e8 	.word	0x200001e8
 80035a0:	40013000 	.word	0x40013000

080035a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_SPI_MspInit+0x84>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d12b      	bne.n	800361e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a17      	ldr	r2, [pc, #92]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a10      	ldr	r2, [pc, #64]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_SPI_MspInit+0x88>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80035fe:	2338      	movs	r3, #56	; 0x38
 8003600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800360a:	2303      	movs	r3, #3
 800360c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800360e:	2305      	movs	r3, #5
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	4805      	ldr	r0, [pc, #20]	; (8003630 <HAL_SPI_MspInit+0x8c>)
 800361a:	f000 fcaf 	bl	8003f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800361e:	bf00      	nop
 8003620:	3728      	adds	r7, #40	; 0x28
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40013000 	.word	0x40013000
 800362c:	40023800 	.word	0x40023800
 8003630:	40020400 	.word	0x40020400

08003634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_MspInit+0x4c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_MspInit+0x4c>)
 8003644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003648:	6453      	str	r3, [r2, #68]	; 0x44
 800364a:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <HAL_MspInit+0x4c>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_MspInit+0x4c>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a08      	ldr	r2, [pc, #32]	; (8003680 <HAL_MspInit+0x4c>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_MspInit+0x4c>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <NMI_Handler+0x4>

0800368a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	e7fe      	b.n	8003694 <MemManage_Handler+0x4>

08003696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <BusFault_Handler+0x4>

0800369c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <UsageFault_Handler+0x4>

080036a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d0:	f000 fa6c 	bl	8003bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <TIM2_IRQHandler+0x10>)
 80036de:	f003 fa11 	bl	8006b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000240 	.word	0x20000240

080036ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <USART1_IRQHandler+0x10>)
 80036f2:	f003 fed9 	bl	80074a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000350 	.word	0x20000350

08003700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003708:	4a14      	ldr	r2, [pc, #80]	; (800375c <_sbrk+0x5c>)
 800370a:	4b15      	ldr	r3, [pc, #84]	; (8003760 <_sbrk+0x60>)
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <_sbrk+0x64>)
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <_sbrk+0x68>)
 8003720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003730:	f004 fe46 	bl	80083c0 <__errno>
 8003734:	4603      	mov	r3, r0
 8003736:	220c      	movs	r2, #12
 8003738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373a:	f04f 33ff 	mov.w	r3, #4294967295
 800373e:	e009      	b.n	8003754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003746:	4b07      	ldr	r3, [pc, #28]	; (8003764 <_sbrk+0x64>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <_sbrk+0x64>)
 8003750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20020000 	.word	0x20020000
 8003760:	00000400 	.word	0x00000400
 8003764:	200000c8 	.word	0x200000c8
 8003768:	200003a8 	.word	0x200003a8

0800376c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <SystemInit+0x20>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <SystemInit+0x20>)
 8003778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800377c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	609a      	str	r2, [r3, #8]
 80037a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a4:	463b      	mov	r3, r7
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <MX_TIM2_Init+0x94>)
 80037ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <MX_TIM2_Init+0x94>)
 80037b6:	f240 3247 	movw	r2, #839	; 0x347
 80037ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <MX_TIM2_Init+0x94>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <MX_TIM2_Init+0x94>)
 80037c4:	2263      	movs	r2, #99	; 0x63
 80037c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <MX_TIM2_Init+0x94>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ce:	4b15      	ldr	r3, [pc, #84]	; (8003824 <MX_TIM2_Init+0x94>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037d4:	4813      	ldr	r0, [pc, #76]	; (8003824 <MX_TIM2_Init+0x94>)
 80037d6:	f003 f8d5 	bl	8006984 <HAL_TIM_Base_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037e0:	f7ff fe54 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037ea:	f107 0308 	add.w	r3, r7, #8
 80037ee:	4619      	mov	r1, r3
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <MX_TIM2_Init+0x94>)
 80037f2:	f003 fa8f 	bl	8006d14 <HAL_TIM_ConfigClockSource>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037fc:	f7ff fe46 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003808:	463b      	mov	r3, r7
 800380a:	4619      	mov	r1, r3
 800380c:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_TIM2_Init+0x94>)
 800380e:	f003 fcab 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003818:	f7ff fe38 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800381c:	bf00      	nop
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000240 	.word	0x20000240

08003828 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d115      	bne.n	8003866 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <HAL_TIM_Base_MspInit+0x48>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <HAL_TIM_Base_MspInit+0x48>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_TIM_Base_MspInit+0x48>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	201c      	movs	r0, #28
 800385c:	f000 fac5 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003860:	201c      	movs	r0, #28
 8003862:	f000 fade 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <uart_init_rs232>:
uint8_t index_buffer = 0;
char rcv[100];
uint8_t msg[100];
uint8_t buffer_flag = 0;

void uart_init_rs232(){
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003878:	2201      	movs	r2, #1
 800387a:	4903      	ldr	r1, [pc, #12]	; (8003888 <uart_init_rs232+0x14>)
 800387c:	4803      	ldr	r0, [pc, #12]	; (800388c <uart_init_rs232+0x18>)
 800387e:	f003 fde2 	bl	8007446 <HAL_UART_Receive_IT>
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200000cc 	.word	0x200000cc
 800388c:	20000350 	.word	0x20000350

08003890 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4907      	ldr	r1, [pc, #28]	; (80038b8 <uart_Rs232SendString+0x28>)
 800389c:	4807      	ldr	r0, [pc, #28]	; (80038bc <uart_Rs232SendString+0x2c>)
 800389e:	f004 fdc1 	bl	8008424 <siprintf>
 80038a2:	4603      	mov	r3, r0
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	230a      	movs	r3, #10
 80038a8:	4904      	ldr	r1, [pc, #16]	; (80038bc <uart_Rs232SendString+0x2c>)
 80038aa:	4805      	ldr	r0, [pc, #20]	; (80038c0 <uart_Rs232SendString+0x30>)
 80038ac:	f003 fd39 	bl	8007322 <HAL_UART_Transmit>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	08008e50 	.word	0x08008e50
 80038bc:	20000288 	.word	0x20000288
 80038c0:	20000350 	.word	0x20000350

080038c4 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
		buffer_flag = 1;
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
	}
	*/

	if (huart->Instance == USART1) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_UART_RxCpltCallback+0x68>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d125      	bne.n	8003922 <HAL_UART_RxCpltCallback+0x5e>
		// Store the received character into the ring buffer
		rcv[index_buffer] = receive_buffer1;
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_UART_RxCpltCallback+0x70>)
 80038de:	7819      	ldrb	r1, [r3, #0]
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_UART_RxCpltCallback+0x74>)
 80038e2:	5499      	strb	r1, [r3, r2]

		// Check for end-of-message (newline character '\n')
		if (receive_buffer1 == '!') {
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_UART_RxCpltCallback+0x70>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b21      	cmp	r3, #33	; 0x21
 80038ea:	d108      	bne.n	80038fe <HAL_UART_RxCpltCallback+0x3a>
			rcv[index_buffer] = '\0'; // Null-terminate the message
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_UART_RxCpltCallback+0x74>)
 80038f4:	2100      	movs	r1, #0
 80038f6:	5499      	strb	r1, [r3, r2]
			buffer_flag = 1;          // Set buffer flag to indicate a complete message
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_UART_RxCpltCallback+0x78>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
		}

		// Increment the index for the next character
		index_buffer++;
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 8003908:	701a      	strb	r2, [r3, #0]

		// Wrap around if the end of the buffer is reached
		if (index_buffer >= 100) {
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b63      	cmp	r3, #99	; 0x63
 8003910:	d902      	bls.n	8003918 <HAL_UART_RxCpltCallback+0x54>
			index_buffer = 0;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_UART_RxCpltCallback+0x6c>)
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
		}

		// Reactivate UART interrupt for the next byte
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003918:	2201      	movs	r2, #1
 800391a:	4906      	ldr	r1, [pc, #24]	; (8003934 <HAL_UART_RxCpltCallback+0x70>)
 800391c:	4808      	ldr	r0, [pc, #32]	; (8003940 <HAL_UART_RxCpltCallback+0x7c>)
 800391e:	f003 fd92 	bl	8007446 <HAL_UART_Receive_IT>
	}
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40011000 	.word	0x40011000
 8003930:	200000cd 	.word	0x200000cd
 8003934:	200000cc 	.word	0x200000cc
 8003938:	200002ec 	.word	0x200002ec
 800393c:	200000ce 	.word	0x200000ce
 8003940:	20000350 	.word	0x20000350

08003944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003948:	4b11      	ldr	r3, [pc, #68]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 800394a:	4a12      	ldr	r2, [pc, #72]	; (8003994 <MX_USART1_UART_Init+0x50>)
 800394c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800394e:	4b10      	ldr	r3, [pc, #64]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 8003950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	; (8003990 <MX_USART1_UART_Init+0x4c>)
 800397c:	f003 fc84 	bl	8007288 <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003986:	f7ff fd81 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000350 	.word	0x20000350
 8003994:	40011000 	.word	0x40011000

08003998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_UART_MspInit+0x94>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d134      	bne.n	8003a24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a14      	ldr	r2, [pc, #80]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_UART_MspInit+0x98>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a04:	2307      	movs	r3, #7
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4809      	ldr	r0, [pc, #36]	; (8003a34 <HAL_UART_MspInit+0x9c>)
 8003a10:	f000 fab4 	bl	8003f7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	2025      	movs	r0, #37	; 0x25
 8003a1a:	f000 f9e6 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a1e:	2025      	movs	r0, #37	; 0x25
 8003a20:	f000 f9ff 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a24:	bf00      	nop
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40020000 	.word	0x40020000

08003a38 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b2db      	uxtb	r3, r3
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <DEC2BCD+0x44>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	08db      	lsrs	r3, r3, #3
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	b258      	sxtb	r0, r3
 8003a86:	79fa      	ldrb	r2, [r7, #7]
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <DEC2BCD+0x44>)
 8003a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8e:	08d9      	lsrs	r1, r3, #3
 8003a90:	460b      	mov	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	b25b      	sxtb	r3, r3
 8003a9e:	4303      	orrs	r3, r0
 8003aa0:	b25b      	sxtb	r3, r3
 8003aa2:	b2db      	uxtb	r3, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	cccccccd 	.word	0xcccccccd

08003ab4 <Reset_Handler>:
 8003ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aec <LoopFillZerobss+0x12>
 8003ab8:	480d      	ldr	r0, [pc, #52]	; (8003af0 <LoopFillZerobss+0x16>)
 8003aba:	490e      	ldr	r1, [pc, #56]	; (8003af4 <LoopFillZerobss+0x1a>)
 8003abc:	4a0e      	ldr	r2, [pc, #56]	; (8003af8 <LoopFillZerobss+0x1e>)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e002      	b.n	8003ac8 <LoopCopyDataInit>

08003ac2 <CopyDataInit>:
 8003ac2:	58d4      	ldr	r4, [r2, r3]
 8003ac4:	50c4      	str	r4, [r0, r3]
 8003ac6:	3304      	adds	r3, #4

08003ac8 <LoopCopyDataInit>:
 8003ac8:	18c4      	adds	r4, r0, r3
 8003aca:	428c      	cmp	r4, r1
 8003acc:	d3f9      	bcc.n	8003ac2 <CopyDataInit>
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <LoopFillZerobss+0x22>)
 8003ad0:	4c0b      	ldr	r4, [pc, #44]	; (8003b00 <LoopFillZerobss+0x26>)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e001      	b.n	8003ada <LoopFillZerobss>

08003ad6 <FillZerobss>:
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	3204      	adds	r2, #4

08003ada <LoopFillZerobss>:
 8003ada:	42a2      	cmp	r2, r4
 8003adc:	d3fb      	bcc.n	8003ad6 <FillZerobss>
 8003ade:	f7ff fe45 	bl	800376c <SystemInit>
 8003ae2:	f004 fc73 	bl	80083cc <__libc_init_array>
 8003ae6:	f7ff f977 	bl	8002dd8 <main>
 8003aea:	4770      	bx	lr
 8003aec:	20020000 	.word	0x20020000
 8003af0:	20000000 	.word	0x20000000
 8003af4:	2000007c 	.word	0x2000007c
 8003af8:	0800bf40 	.word	0x0800bf40
 8003afc:	2000007c 	.word	0x2000007c
 8003b00:	200003a8 	.word	0x200003a8

08003b04 <ADC_IRQHandler>:
 8003b04:	e7fe      	b.n	8003b04 <ADC_IRQHandler>
	...

08003b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <HAL_Init+0x40>)
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <HAL_Init+0x40>)
 8003b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_Init+0x40>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b30:	2003      	movs	r0, #3
 8003b32:	f000 f94f 	bl	8003dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b36:	200f      	movs	r0, #15
 8003b38:	f000 f808 	bl	8003b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b3c:	f7ff fd7a 	bl	8003634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00

08003b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_InitTick+0x54>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_InitTick+0x58>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f967 	bl	8003e3e <HAL_SYSTICK_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00e      	b.n	8003b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	d80a      	bhi.n	8003b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b80:	2200      	movs	r2, #0
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f000 f92f 	bl	8003dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <HAL_InitTick+0x5c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	2000000c 	.word	0x2000000c
 8003ba4:	20000014 	.word	0x20000014
 8003ba8:	20000010 	.word	0x20000010

08003bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_IncTick+0x20>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	4a04      	ldr	r2, [pc, #16]	; (8003bd0 <HAL_IncTick+0x24>)
 8003bbe:	6013      	str	r3, [r2, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000014 	.word	0x20000014
 8003bd0:	20000394 	.word	0x20000394

08003bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <HAL_GetTick+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000394 	.word	0x20000394

08003bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bf4:	f7ff ffee 	bl	8003bd4 <HAL_GetTick>
 8003bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d005      	beq.n	8003c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_Delay+0x44>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c12:	bf00      	nop
 8003c14:	f7ff ffde 	bl	8003bd4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d8f7      	bhi.n	8003c14 <HAL_Delay+0x28>
  {
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000014 	.word	0x20000014

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	; (8003cd0 <__NVIC_EnableIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	; (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da0:	d301      	bcc.n	8003da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da2:	2301      	movs	r3, #1
 8003da4:	e00f      	b.n	8003dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <SysTick_Config+0x40>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dae:	210f      	movs	r1, #15
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	f7ff ff8e 	bl	8003cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <SysTick_Config+0x40>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <SysTick_Config+0x40>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	e000e010 	.word	0xe000e010

08003dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff29 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfc:	f7ff ff3e 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff8e 	bl	8003d28 <NVIC_EncodePriority>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff5d 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff31 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ffa2 	bl	8003d90 <SysTick_Config>
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff feb6 	bl	8003bd4 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d008      	beq.n	8003e88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e052      	b.n	8003f2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0216 	bic.w	r2, r2, #22
 8003e96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <HAL_DMA_Abort+0x62>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d007      	beq.n	8003ec8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0208 	bic.w	r2, r2, #8
 8003ec6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed8:	e013      	b.n	8003f02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eda:	f7ff fe7b 	bl	8003bd4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d90c      	bls.n	8003f02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e015      	b.n	8003f2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e4      	bne.n	8003eda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	223f      	movs	r2, #63	; 0x3f
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d004      	beq.n	8003f54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e00c      	b.n	8003f6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2205      	movs	r2, #5
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e16b      	b.n	8004270 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f040 815a 	bne.w	800426a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d005      	beq.n	8003fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d130      	bne.n	8004030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	2203      	movs	r2, #3
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004004:	2201      	movs	r2, #1
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 0201 	and.w	r2, r3, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4313      	orrs	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b03      	cmp	r3, #3
 800403a:	d017      	beq.n	800406c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d123      	bne.n	80040c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	08da      	lsrs	r2, r3, #3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3208      	adds	r2, #8
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	08da      	lsrs	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3208      	adds	r2, #8
 80040ba:	69b9      	ldr	r1, [r7, #24]
 80040bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	2203      	movs	r2, #3
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0203 	and.w	r2, r3, #3
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80b4 	beq.w	800426a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	4b60      	ldr	r3, [pc, #384]	; (8004288 <HAL_GPIO_Init+0x30c>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	4a5f      	ldr	r2, [pc, #380]	; (8004288 <HAL_GPIO_Init+0x30c>)
 800410c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004110:	6453      	str	r3, [r2, #68]	; 0x44
 8004112:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_GPIO_Init+0x30c>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800411e:	4a5b      	ldr	r2, [pc, #364]	; (800428c <HAL_GPIO_Init+0x310>)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	3302      	adds	r3, #2
 8004126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800412a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	220f      	movs	r2, #15
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a52      	ldr	r2, [pc, #328]	; (8004290 <HAL_GPIO_Init+0x314>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d02b      	beq.n	80041a2 <HAL_GPIO_Init+0x226>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a51      	ldr	r2, [pc, #324]	; (8004294 <HAL_GPIO_Init+0x318>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d025      	beq.n	800419e <HAL_GPIO_Init+0x222>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a50      	ldr	r2, [pc, #320]	; (8004298 <HAL_GPIO_Init+0x31c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01f      	beq.n	800419a <HAL_GPIO_Init+0x21e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4f      	ldr	r2, [pc, #316]	; (800429c <HAL_GPIO_Init+0x320>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d019      	beq.n	8004196 <HAL_GPIO_Init+0x21a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a4e      	ldr	r2, [pc, #312]	; (80042a0 <HAL_GPIO_Init+0x324>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d013      	beq.n	8004192 <HAL_GPIO_Init+0x216>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4d      	ldr	r2, [pc, #308]	; (80042a4 <HAL_GPIO_Init+0x328>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00d      	beq.n	800418e <HAL_GPIO_Init+0x212>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <HAL_GPIO_Init+0x32c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d007      	beq.n	800418a <HAL_GPIO_Init+0x20e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_GPIO_Init+0x330>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_GPIO_Init+0x20a>
 8004182:	2307      	movs	r3, #7
 8004184:	e00e      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 8004186:	2308      	movs	r3, #8
 8004188:	e00c      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 800418a:	2306      	movs	r3, #6
 800418c:	e00a      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 800418e:	2305      	movs	r3, #5
 8004190:	e008      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 8004192:	2304      	movs	r3, #4
 8004194:	e006      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 8004196:	2303      	movs	r3, #3
 8004198:	e004      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 800419a:	2302      	movs	r3, #2
 800419c:	e002      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_GPIO_Init+0x228>
 80041a2:	2300      	movs	r3, #0
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	f002 0203 	and.w	r2, r2, #3
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	4093      	lsls	r3, r2
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041b4:	4935      	ldr	r1, [pc, #212]	; (800428c <HAL_GPIO_Init+0x310>)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	3302      	adds	r3, #2
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c2:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_GPIO_Init+0x334>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e6:	4a32      	ldr	r2, [pc, #200]	; (80042b0 <HAL_GPIO_Init+0x334>)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041ec:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <HAL_GPIO_Init+0x334>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_GPIO_Init+0x334>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_GPIO_Init+0x334>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800423a:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <HAL_GPIO_Init+0x334>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_GPIO_Init+0x334>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004264:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <HAL_GPIO_Init+0x334>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	f67f ae90 	bls.w	8003f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3724      	adds	r7, #36	; 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40013800 	.word	0x40013800
 8004290:	40020000 	.word	0x40020000
 8004294:	40020400 	.word	0x40020400
 8004298:	40020800 	.word	0x40020800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40021800 	.word	0x40021800
 80042ac:	40021c00 	.word	0x40021c00
 80042b0:	40013c00 	.word	0x40013c00

080042b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
 80042c0:	4613      	mov	r3, r2
 80042c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c4:	787b      	ldrb	r3, [r7, #1]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d0:	e003      	b.n	80042da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d2:	887b      	ldrh	r3, [r7, #2]
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	619a      	str	r2, [r3, #24]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e12b      	b.n	8004552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd fa2e 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800434c:	f001 fd06 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8004350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4a81      	ldr	r2, [pc, #516]	; (800455c <HAL_I2C_Init+0x274>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d807      	bhi.n	800436c <HAL_I2C_Init+0x84>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a80      	ldr	r2, [pc, #512]	; (8004560 <HAL_I2C_Init+0x278>)
 8004360:	4293      	cmp	r3, r2
 8004362:	bf94      	ite	ls
 8004364:	2301      	movls	r3, #1
 8004366:	2300      	movhi	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e006      	b.n	800437a <HAL_I2C_Init+0x92>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4a7d      	ldr	r2, [pc, #500]	; (8004564 <HAL_I2C_Init+0x27c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	bf94      	ite	ls
 8004374:	2301      	movls	r3, #1
 8004376:	2300      	movhi	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e0e7      	b.n	8004552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a78      	ldr	r2, [pc, #480]	; (8004568 <HAL_I2C_Init+0x280>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0c9b      	lsrs	r3, r3, #18
 800438c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a6a      	ldr	r2, [pc, #424]	; (800455c <HAL_I2C_Init+0x274>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d802      	bhi.n	80043bc <HAL_I2C_Init+0xd4>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3301      	adds	r3, #1
 80043ba:	e009      	b.n	80043d0 <HAL_I2C_Init+0xe8>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	4a69      	ldr	r2, [pc, #420]	; (800456c <HAL_I2C_Init+0x284>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	3301      	adds	r3, #1
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	495c      	ldr	r1, [pc, #368]	; (800455c <HAL_I2C_Init+0x274>)
 80043ec:	428b      	cmp	r3, r1
 80043ee:	d819      	bhi.n	8004424 <HAL_I2C_Init+0x13c>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1e59      	subs	r1, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80043fe:	1c59      	adds	r1, r3, #1
 8004400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004404:	400b      	ands	r3, r1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_I2C_Init+0x138>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1e59      	subs	r1, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fbb1 f3f3 	udiv	r3, r1, r3
 8004418:	3301      	adds	r3, #1
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	e051      	b.n	80044c4 <HAL_I2C_Init+0x1dc>
 8004420:	2304      	movs	r3, #4
 8004422:	e04f      	b.n	80044c4 <HAL_I2C_Init+0x1dc>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d111      	bne.n	8004450 <HAL_I2C_Init+0x168>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e012      	b.n	8004476 <HAL_I2C_Init+0x18e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	0099      	lsls	r1, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Init+0x196>
 800447a:	2301      	movs	r3, #1
 800447c:	e022      	b.n	80044c4 <HAL_I2C_Init+0x1dc>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10e      	bne.n	80044a4 <HAL_I2C_Init+0x1bc>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1e58      	subs	r0, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	440b      	add	r3, r1
 8004494:	fbb0 f3f3 	udiv	r3, r0, r3
 8004498:	3301      	adds	r3, #1
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	e00f      	b.n	80044c4 <HAL_I2C_Init+0x1dc>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e58      	subs	r0, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	0099      	lsls	r1, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	6809      	ldr	r1, [r1, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6911      	ldr	r1, [r2, #16]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68d2      	ldr	r2, [r2, #12]
 80044fe:	4311      	orrs	r1, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	430b      	orrs	r3, r1
 8004506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	000186a0 	.word	0x000186a0
 8004560:	001e847f 	.word	0x001e847f
 8004564:	003d08ff 	.word	0x003d08ff
 8004568:	431bde83 	.word	0x431bde83
 800456c:	10624dd3 	.word	0x10624dd3

08004570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	817b      	strh	r3, [r7, #10]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458a:	f7ff fb23 	bl	8003bd4 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b20      	cmp	r3, #32
 800459a:	f040 80d9 	bne.w	8004750 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2319      	movs	r3, #25
 80045a4:	2201      	movs	r2, #1
 80045a6:	496d      	ldr	r1, [pc, #436]	; (800475c <HAL_I2C_Mem_Write+0x1ec>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fdad 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0cc      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_I2C_Mem_Write+0x56>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0c5      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d007      	beq.n	80045ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2221      	movs	r2, #33	; 0x21
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a3a      	ldr	r2, [r7, #32]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a4d      	ldr	r2, [pc, #308]	; (8004760 <HAL_I2C_Mem_Write+0x1f0>)
 800462c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800462e:	88f8      	ldrh	r0, [r7, #6]
 8004630:	893a      	ldrh	r2, [r7, #8]
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	4603      	mov	r3, r0
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fbe4 	bl	8004e0c <I2C_RequestMemoryWrite>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d052      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e081      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fe2e 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b04      	cmp	r3, #4
 8004664:	d107      	bne.n	8004676 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e06b      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d11b      	bne.n	80046f0 <HAL_I2C_Mem_Write+0x180>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1aa      	bne.n	800464e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 fe1a 	bl	8005336 <I2C_WaitOnBTFFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470c:	2b04      	cmp	r3, #4
 800470e:	d107      	bne.n	8004720 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e016      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	00100002 	.word	0x00100002
 8004760:	ffff0000 	.word	0xffff0000

08004764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	; 0x30
 8004768:	af02      	add	r7, sp, #8
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	461a      	mov	r2, r3
 8004772:	4603      	mov	r3, r0
 8004774:	817b      	strh	r3, [r7, #10]
 8004776:	460b      	mov	r3, r1
 8004778:	813b      	strh	r3, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800477e:	f7ff fa29 	bl	8003bd4 <HAL_GetTick>
 8004782:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	f040 8208 	bne.w	8004ba2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2319      	movs	r3, #25
 8004798:	2201      	movs	r2, #1
 800479a:	497b      	ldr	r1, [pc, #492]	; (8004988 <HAL_I2C_Mem_Read+0x224>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fcb3 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
 80047aa:	e1fb      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Mem_Read+0x56>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e1f4      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d007      	beq.n	80047e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2222      	movs	r2, #34	; 0x22
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a5b      	ldr	r2, [pc, #364]	; (800498c <HAL_I2C_Mem_Read+0x228>)
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004822:	88f8      	ldrh	r0, [r7, #6]
 8004824:	893a      	ldrh	r2, [r7, #8]
 8004826:	8979      	ldrh	r1, [r7, #10]
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	4603      	mov	r3, r0
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fb80 	bl	8004f38 <I2C_RequestMemoryRead>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e1b0      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e184      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b01      	cmp	r3, #1
 8004878:	d11b      	bne.n	80048b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e164      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d11b      	bne.n	80048f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	e144      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004908:	e138      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	2b03      	cmp	r3, #3
 8004910:	f200 80f1 	bhi.w	8004af6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b01      	cmp	r3, #1
 800491a:	d123      	bne.n	8004964 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fd49 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e139      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004962:	e10b      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b02      	cmp	r3, #2
 800496a:	d14e      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	2200      	movs	r2, #0
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <HAL_I2C_Mem_Read+0x22c>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fbc6 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d008      	beq.n	8004994 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e10e      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
 8004986:	bf00      	nop
 8004988:	00100002 	.word	0x00100002
 800498c:	ffff0000 	.word	0xffff0000
 8004990:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a08:	e0b8      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	2200      	movs	r2, #0
 8004a12:	4966      	ldr	r1, [pc, #408]	; (8004bac <HAL_I2C_Mem_Read+0x448>)
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fb77 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0bf      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	494f      	ldr	r1, [pc, #316]	; (8004bac <HAL_I2C_Mem_Read+0x448>)
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fb49 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e091      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af4:	e042      	b.n	8004b7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fc5c 	bl	80053b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e04c      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d118      	bne.n	8004b7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f aec2 	bne.w	800490a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	00010004 	.word	0x00010004

08004bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	607a      	str	r2, [r7, #4]
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7ff f808 	bl	8003bd4 <HAL_GetTick>
 8004bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	f040 8111 	bne.w	8004dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2319      	movs	r3, #25
 8004bde:	2201      	movs	r2, #1
 8004be0:	4988      	ldr	r1, [pc, #544]	; (8004e04 <HAL_I2C_IsDeviceReady+0x254>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa90 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e104      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2C_IsDeviceReady+0x50>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e0fd      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d007      	beq.n	8004c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2224      	movs	r2, #36	; 0x24
 8004c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a70      	ldr	r2, [pc, #448]	; (8004e08 <HAL_I2C_IsDeviceReady+0x258>)
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa4e 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c80:	d103      	bne.n	8004c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0b6      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fe ff99 	bl	8003bd4 <HAL_GetTick>
 8004ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004cd2:	e025      	b.n	8004d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cd4:	f7fe ff7e 	bl	8003bd4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d302      	bcc.n	8004cea <HAL_I2C_IsDeviceReady+0x13a>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d103      	bne.n	8004cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	22a0      	movs	r2, #160	; 0xa0
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2ba0      	cmp	r3, #160	; 0xa0
 8004d2a:	d005      	beq.n	8004d38 <HAL_I2C_IsDeviceReady+0x188>
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_I2C_IsDeviceReady+0x188>
 8004d32:	7dbb      	ldrb	r3, [r7, #22]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0cd      	beq.n	8004cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d129      	bne.n	8004da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2319      	movs	r3, #25
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4921      	ldr	r1, [pc, #132]	; (8004e04 <HAL_I2C_IsDeviceReady+0x254>)
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f9c2 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e036      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e02c      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2319      	movs	r3, #25
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	490f      	ldr	r1, [pc, #60]	; (8004e04 <HAL_I2C_IsDeviceReady+0x254>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f99e 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e012      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	f4ff af32 	bcc.w	8004c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	00100002 	.word	0x00100002
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	4608      	mov	r0, r1
 8004e16:	4611      	mov	r1, r2
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	813b      	strh	r3, [r7, #8]
 8004e22:	4613      	mov	r3, r2
 8004e24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f960 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5c:	d103      	bne.n	8004e66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e05f      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e6a:	897b      	ldrh	r3, [r7, #10]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	492d      	ldr	r1, [pc, #180]	; (8004f34 <I2C_RequestMemoryWrite+0x128>)
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f998 	bl	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e04c      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	6a39      	ldr	r1, [r7, #32]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fa02 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00d      	beq.n	8004ed2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d107      	bne.n	8004ece <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e02b      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed8:	893b      	ldrh	r3, [r7, #8]
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]
 8004ee2:	e021      	b.n	8004f28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee4:	893b      	ldrh	r3, [r7, #8]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef4:	6a39      	ldr	r1, [r7, #32]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f9dc 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00d      	beq.n	8004f1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d107      	bne.n	8004f1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e005      	b.n	8004f2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1e:	893b      	ldrh	r3, [r7, #8]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	00010002 	.word	0x00010002

08004f38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af02      	add	r7, sp, #8
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	4608      	mov	r0, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	817b      	strh	r3, [r7, #10]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	813b      	strh	r3, [r7, #8]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8c2 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f98:	d103      	bne.n	8004fa2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0aa      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fa6:	897b      	ldrh	r3, [r7, #10]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	6a3a      	ldr	r2, [r7, #32]
 8004fba:	4952      	ldr	r1, [pc, #328]	; (8005104 <I2C_RequestMemoryRead+0x1cc>)
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f8fa 	bl	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e097      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f964 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d107      	bne.n	800500a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e076      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005014:	893b      	ldrh	r3, [r7, #8]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	e021      	b.n	8005064 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	b29b      	uxth	r3, r3
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	6a39      	ldr	r1, [r7, #32]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f93e 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b04      	cmp	r3, #4
 8005044:	d107      	bne.n	8005056 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005054:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e050      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800505a:	893b      	ldrh	r3, [r7, #8]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f923 	bl	80052b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00d      	beq.n	8005090 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	2b04      	cmp	r3, #4
 800507a:	d107      	bne.n	800508c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e035      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f82b 	bl	8005108 <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d103      	bne.n	80050d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e013      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050d4:	897b      	ldrh	r3, [r7, #10]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	6a3a      	ldr	r2, [r7, #32]
 80050e8:	4906      	ldr	r1, [pc, #24]	; (8005104 <I2C_RequestMemoryRead+0x1cc>)
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f863 	bl	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	00010002 	.word	0x00010002

08005108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005118:	e025      	b.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d021      	beq.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005122:	f7fe fd57 	bl	8003bd4 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d116      	bne.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e023      	b.n	80051ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10d      	bne.n	800518c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	43da      	mvns	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	e00c      	b.n	80051a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	43da      	mvns	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d0b6      	beq.n	800511a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051c4:	e051      	b.n	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d4:	d123      	bne.n	800521e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f043 0204 	orr.w	r2, r3, #4
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e046      	b.n	80052ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d021      	beq.n	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fe fcd5 	bl	8003bd4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0220 	orr.w	r2, r3, #32
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e020      	b.n	80052ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d10c      	bne.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	43da      	mvns	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4013      	ands	r3, r2
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e00b      	b.n	80052a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	43da      	mvns	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d18d      	bne.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c0:	e02d      	b.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f8ce 	bl	8005464 <I2C_IsAcknowledgeFailed>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e02d      	b.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d021      	beq.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe fc7b 	bl	8003bd4 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e007      	b.n	800532e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	d1ca      	bne.n	80052c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005342:	e02d      	b.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f88d 	bl	8005464 <I2C_IsAcknowledgeFailed>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e02d      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535a:	d021      	beq.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535c:	f7fe fc3a 	bl	8003bd4 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e007      	b.n	80053b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d1ca      	bne.n	8005344 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c4:	e042      	b.n	800544c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d119      	bne.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e029      	b.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fe fbe4 	bl	8003bd4 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d116      	bne.n	800544c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e007      	b.n	800545c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d1b5      	bne.n	80053c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547a:	d11b      	bne.n	80054b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005484:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e264      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d075      	beq.n	80055ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e2:	4ba3      	ldr	r3, [pc, #652]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d00c      	beq.n	8005508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ee:	4ba0      	ldr	r3, [pc, #640]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d112      	bne.n	8005520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fa:	4b9d      	ldr	r3, [pc, #628]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005506:	d10b      	bne.n	8005520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	4b99      	ldr	r3, [pc, #612]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d05b      	beq.n	80055cc <HAL_RCC_OscConfig+0x108>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d157      	bne.n	80055cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e23f      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d106      	bne.n	8005538 <HAL_RCC_OscConfig+0x74>
 800552a:	4b91      	ldr	r3, [pc, #580]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a90      	ldr	r2, [pc, #576]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01d      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x98>
 8005542:	4b8b      	ldr	r3, [pc, #556]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a8a      	ldr	r2, [pc, #552]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b88      	ldr	r3, [pc, #544]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a87      	ldr	r2, [pc, #540]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 800555c:	4b84      	ldr	r3, [pc, #528]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a83      	ldr	r2, [pc, #524]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b81      	ldr	r3, [pc, #516]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a80      	ldr	r2, [pc, #512]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fe fb2a 	bl	8003bd4 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005584:	f7fe fb26 	bl	8003bd4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	; 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e204      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	4b76      	ldr	r3, [pc, #472]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0xc0>
 80055a2:	e014      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe fb16 	bl	8003bd4 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ac:	f7fe fb12 	bl	8003bd4 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1f0      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	4b6c      	ldr	r3, [pc, #432]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0xe8>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d063      	beq.n	80056a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055da:	4b65      	ldr	r3, [pc, #404]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e6:	4b62      	ldr	r3, [pc, #392]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d11c      	bne.n	800562c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b5f      	ldr	r3, [pc, #380]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fe:	4b5c      	ldr	r3, [pc, #368]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x152>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1c4      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005616:	4b56      	ldr	r3, [pc, #344]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4952      	ldr	r1, [pc, #328]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562a:	e03a      	b.n	80056a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	4b4f      	ldr	r3, [pc, #316]	; (8005774 <HAL_RCC_OscConfig+0x2b0>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fe facb 	bl	8003bd4 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fe fac7 	bl	8003bd4 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e1a5      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	4b46      	ldr	r3, [pc, #280]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005660:	4b43      	ldr	r3, [pc, #268]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4940      	ldr	r1, [pc, #256]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e015      	b.n	80056a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005676:	4b3f      	ldr	r3, [pc, #252]	; (8005774 <HAL_RCC_OscConfig+0x2b0>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fe faaa 	bl	8003bd4 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005684:	f7fe faa6 	bl	8003bd4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e184      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	4b36      	ldr	r3, [pc, #216]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d030      	beq.n	8005710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b6:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_RCC_OscConfig+0x2b4>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fe fa8a 	bl	8003bd4 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fe fa86 	bl	8003bd4 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e164      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	4b26      	ldr	r3, [pc, #152]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x200>
 80056e2:	e015      	b.n	8005710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCC_OscConfig+0x2b4>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ea:	f7fe fa73 	bl	8003bd4 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fe fa6f 	bl	8003bd4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e14d      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005704:	4b1a      	ldr	r3, [pc, #104]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a0 	beq.w	800585e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800571e:	2300      	movs	r3, #0
 8005720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	4a0e      	ldr	r2, [pc, #56]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6413      	str	r3, [r2, #64]	; 0x40
 800573e:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_OscConfig+0x2b8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d121      	bne.n	800579e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <HAL_RCC_OscConfig+0x2b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a07      	ldr	r2, [pc, #28]	; (800577c <HAL_RCC_OscConfig+0x2b8>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005766:	f7fe fa35 	bl	8003bd4 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576c:	e011      	b.n	8005792 <HAL_RCC_OscConfig+0x2ce>
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800
 8005774:	42470000 	.word	0x42470000
 8005778:	42470e80 	.word	0x42470e80
 800577c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005780:	f7fe fa28 	bl	8003bd4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e106      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005792:	4b85      	ldr	r3, [pc, #532]	; (80059a8 <HAL_RCC_OscConfig+0x4e4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x2f0>
 80057a6:	4b81      	ldr	r3, [pc, #516]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057aa:	4a80      	ldr	r2, [pc, #512]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6713      	str	r3, [r2, #112]	; 0x70
 80057b2:	e01c      	b.n	80057ee <HAL_RCC_OscConfig+0x32a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCC_OscConfig+0x312>
 80057bc:	4b7b      	ldr	r3, [pc, #492]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	4a7a      	ldr	r2, [pc, #488]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6713      	str	r3, [r2, #112]	; 0x70
 80057c8:	4b78      	ldr	r3, [pc, #480]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a77      	ldr	r2, [pc, #476]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
 80057d4:	e00b      	b.n	80057ee <HAL_RCC_OscConfig+0x32a>
 80057d6:	4b75      	ldr	r3, [pc, #468]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a74      	ldr	r2, [pc, #464]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	4b72      	ldr	r3, [pc, #456]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	4a71      	ldr	r2, [pc, #452]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80057e8:	f023 0304 	bic.w	r3, r3, #4
 80057ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d015      	beq.n	8005822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f6:	f7fe f9ed 	bl	8003bd4 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fc:	e00a      	b.n	8005814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fe:	f7fe f9e9 	bl	8003bd4 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	f241 3288 	movw	r2, #5000	; 0x1388
 800580c:	4293      	cmp	r3, r2
 800580e:	d901      	bls.n	8005814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0c5      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005814:	4b65      	ldr	r3, [pc, #404]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d0ee      	beq.n	80057fe <HAL_RCC_OscConfig+0x33a>
 8005820:	e014      	b.n	800584c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005822:	f7fe f9d7 	bl	8003bd4 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fe f9d3 	bl	8003bd4 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	; 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e0af      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005840:	4b5a      	ldr	r3, [pc, #360]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ee      	bne.n	800582a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4b56      	ldr	r3, [pc, #344]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	4a55      	ldr	r2, [pc, #340]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 809b 	beq.w	800599e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005868:	4b50      	ldr	r3, [pc, #320]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b08      	cmp	r3, #8
 8005872:	d05c      	beq.n	800592e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d141      	bne.n	8005900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587c:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <HAL_RCC_OscConfig+0x4ec>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fe f9a7 	bl	8003bd4 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588a:	f7fe f9a3 	bl	8003bd4 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e081      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589c:	4b43      	ldr	r3, [pc, #268]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	019b      	lsls	r3, r3, #6
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	3b01      	subs	r3, #1
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	4937      	ldr	r1, [pc, #220]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d2:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCC_OscConfig+0x4ec>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fe f97c 	bl	8003bd4 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fe f978 	bl	8003bd4 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e056      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x41c>
 80058fe:	e04e      	b.n	800599e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005900:	4b2b      	ldr	r3, [pc, #172]	; (80059b0 <HAL_RCC_OscConfig+0x4ec>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fe f965 	bl	8003bd4 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590e:	f7fe f961 	bl	8003bd4 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e03f      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005920:	4b22      	ldr	r3, [pc, #136]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0x44a>
 800592c:	e037      	b.n	800599e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e032      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <HAL_RCC_OscConfig+0x4e8>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d028      	beq.n	800599a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d121      	bne.n	800599a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d11a      	bne.n	800599a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800596a:	4013      	ands	r3, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005970:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005972:	4293      	cmp	r3, r2
 8005974:	d111      	bne.n	800599a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	3b01      	subs	r3, #1
 8005984:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d107      	bne.n	800599a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40007000 	.word	0x40007000
 80059ac:	40023800 	.word	0x40023800
 80059b0:	42470060 	.word	0x42470060

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0cc      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b68      	ldr	r3, [pc, #416]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90c      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b65      	ldr	r3, [pc, #404]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b63      	ldr	r3, [pc, #396]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0b8      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d020      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a08:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a58      	ldr	r2, [pc, #352]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a20:	4b53      	ldr	r3, [pc, #332]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a52      	ldr	r2, [pc, #328]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b50      	ldr	r3, [pc, #320]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	494d      	ldr	r1, [pc, #308]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d044      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	4b47      	ldr	r3, [pc, #284]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d119      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e07f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a82:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e067      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	4b37      	ldr	r3, [pc, #220]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4934      	ldr	r1, [pc, #208]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa4:	f7fe f896 	bl	8003bd4 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fe f892 	bl	8003bd4 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e04f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 020c 	and.w	r2, r3, #12
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1eb      	bne.n	8005aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d20c      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e032      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4916      	ldr	r1, [pc, #88]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	490e      	ldr	r1, [pc, #56]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b3a:	f000 f821 	bl	8005b80 <HAL_RCC_GetSysClockFreq>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	490a      	ldr	r1, [pc, #40]	; (8005b74 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	5ccb      	ldrb	r3, [r1, r3]
 8005b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fff6 	bl	8003b4c <HAL_InitTick>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023c00 	.word	0x40023c00
 8005b70:	40023800 	.word	0x40023800
 8005b74:	0800bde4 	.word	0x0800bde4
 8005b78:	2000000c 	.word	0x2000000c
 8005b7c:	20000010 	.word	0x20000010

08005b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	2300      	movs	r3, #0
 8005b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b98:	4b67      	ldr	r3, [pc, #412]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 030c 	and.w	r3, r3, #12
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	f200 80bd 	bhi.w	8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d003      	beq.n	8005bba <HAL_RCC_GetSysClockFreq+0x3a>
 8005bb2:	e0b7      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb4:	4b61      	ldr	r3, [pc, #388]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bb6:	60bb      	str	r3, [r7, #8]
       break;
 8005bb8:	e0b7      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bba:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bbc:	60bb      	str	r3, [r7, #8]
      break;
 8005bbe:	e0b4      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc0:	4b5d      	ldr	r3, [pc, #372]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bca:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d04d      	beq.n	8005c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd6:	4b58      	ldr	r3, [pc, #352]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	099b      	lsrs	r3, r3, #6
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	ea02 0800 	and.w	r8, r2, r0
 8005bee:	ea03 0901 	and.w	r9, r3, r1
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	f04f 0200 	mov.w	r2, #0
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	014b      	lsls	r3, r1, #5
 8005c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c04:	0142      	lsls	r2, r0, #5
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8005c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	018b      	lsls	r3, r1, #6
 8005c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c20:	0182      	lsls	r2, r0, #6
 8005c22:	1a12      	subs	r2, r2, r0
 8005c24:	eb63 0301 	sbc.w	r3, r3, r1
 8005c28:	f04f 0000 	mov.w	r0, #0
 8005c2c:	f04f 0100 	mov.w	r1, #0
 8005c30:	00d9      	lsls	r1, r3, #3
 8005c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c36:	00d0      	lsls	r0, r2, #3
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	eb12 0208 	adds.w	r2, r2, r8
 8005c40:	eb43 0309 	adc.w	r3, r3, r9
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f04f 0100 	mov.w	r1, #0
 8005c4c:	0259      	lsls	r1, r3, #9
 8005c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c52:	0250      	lsls	r0, r2, #9
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f7fa fb0c 	bl	8000280 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	e04a      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c72:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	099b      	lsrs	r3, r3, #6
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c82:	f04f 0100 	mov.w	r1, #0
 8005c86:	ea02 0400 	and.w	r4, r2, r0
 8005c8a:	ea03 0501 	and.w	r5, r3, r1
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	014b      	lsls	r3, r1, #5
 8005c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ca0:	0142      	lsls	r2, r0, #5
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	1b00      	subs	r0, r0, r4
 8005ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	018b      	lsls	r3, r1, #6
 8005cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cba:	0182      	lsls	r2, r0, #6
 8005cbc:	1a12      	subs	r2, r2, r0
 8005cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	00d9      	lsls	r1, r3, #3
 8005ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cd0:	00d0      	lsls	r0, r2, #3
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	1912      	adds	r2, r2, r4
 8005cd8:	eb45 0303 	adc.w	r3, r5, r3
 8005cdc:	f04f 0000 	mov.w	r0, #0
 8005ce0:	f04f 0100 	mov.w	r1, #0
 8005ce4:	0299      	lsls	r1, r3, #10
 8005ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cea:	0290      	lsls	r0, r2, #10
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	f7fa fac0 	bl	8000280 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4613      	mov	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	3301      	adds	r3, #1
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d20:	60bb      	str	r3, [r7, #8]
      break;
 8005d22:	e002      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d26:	60bb      	str	r3, [r7, #8]
      break;
 8005d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d36:	bf00      	nop
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	007a1200 	.word	0x007a1200

08005d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d48:	4b03      	ldr	r3, [pc, #12]	; (8005d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	2000000c 	.word	0x2000000c

08005d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d60:	f7ff fff0 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	0a9b      	lsrs	r3, r3, #10
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4903      	ldr	r1, [pc, #12]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800bdf4 	.word	0x0800bdf4

08005d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d88:	f7ff ffdc 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	0b5b      	lsrs	r3, r3, #13
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	4903      	ldr	r1, [pc, #12]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800
 8005da8:	0800bdf4 	.word	0x0800bdf4

08005dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e07b      	b.n	8005eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d108      	bne.n	8005dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dce:	d009      	beq.n	8005de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	61da      	str	r2, [r3, #28]
 8005dd6:	e005      	b.n	8005de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fd fbd0 	bl	80035a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	ea42 0103 	orr.w	r1, r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0104 	and.w	r1, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	f003 0210 	and.w	r2, r3, #16
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_SPI_Transmit+0x22>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e126      	b.n	800612e <HAL_SPI_Transmit+0x270>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee8:	f7fd fe74 	bl	8003bd4 <HAL_GetTick>
 8005eec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
 8005f00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f02:	e10b      	b.n	800611c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Transmit+0x52>
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f14:	e102      	b.n	800611c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2203      	movs	r2, #3
 8005f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	88fa      	ldrh	r2, [r7, #6]
 8005f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d10f      	bne.n	8005f7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d007      	beq.n	8005f9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa4:	d14b      	bne.n	800603e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0xf6>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d13e      	bne.n	8006032 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	881a      	ldrh	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	1c9a      	adds	r2, r3, #2
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fd8:	e02b      	b.n	8006032 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d112      	bne.n	800600e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	881a      	ldrh	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	1c9a      	adds	r2, r3, #2
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	86da      	strh	r2, [r3, #54]	; 0x36
 800600c:	e011      	b.n	8006032 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800600e:	f7fd fde1 	bl	8003bd4 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d803      	bhi.n	8006026 <HAL_SPI_Transmit+0x168>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d102      	bne.n	800602c <HAL_SPI_Transmit+0x16e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006030:	e074      	b.n	800611c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1ce      	bne.n	8005fda <HAL_SPI_Transmit+0x11c>
 800603c:	e04c      	b.n	80060d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0x18e>
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d140      	bne.n	80060ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006072:	e02c      	b.n	80060ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b02      	cmp	r3, #2
 8006080:	d113      	bne.n	80060aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	7812      	ldrb	r2, [r2, #0]
 800608e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80060a8:	e011      	b.n	80060ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060aa:	f7fd fd93 	bl	8003bd4 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d803      	bhi.n	80060c2 <HAL_SPI_Transmit+0x204>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Transmit+0x20a>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d102      	bne.n	80060ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060cc:	e026      	b.n	800611c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1cd      	bne.n	8006074 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fbcb 	bl	8006878 <SPI_EndRxTxTransaction>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	77fb      	strb	r3, [r7, #31]
 8006118:	e000      	b.n	800611c <HAL_SPI_Transmit+0x25e>
  }

error:
 800611a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800612c:	7ffb      	ldrb	r3, [r7, #31]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b088      	sub	sp, #32
 800613a:	af02      	add	r7, sp, #8
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006152:	d112      	bne.n	800617a <HAL_SPI_Receive+0x44>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10e      	bne.n	800617a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2204      	movs	r2, #4
 8006160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006164:	88fa      	ldrh	r2, [r7, #6]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 f8f1 	bl	8006358 <HAL_SPI_TransmitReceive>
 8006176:	4603      	mov	r3, r0
 8006178:	e0ea      	b.n	8006350 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_SPI_Receive+0x52>
 8006184:	2302      	movs	r3, #2
 8006186:	e0e3      	b.n	8006350 <HAL_SPI_Receive+0x21a>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006190:	f7fd fd20 	bl	8003bd4 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d002      	beq.n	80061a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061a6:	e0ca      	b.n	800633e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Receive+0x7e>
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d102      	bne.n	80061ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b8:	e0c1      	b.n	800633e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2204      	movs	r2, #4
 80061be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	88fa      	ldrh	r2, [r7, #6]
 80061d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d10f      	bne.n	8006222 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006210:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d007      	beq.n	8006240 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d162      	bne.n	800630e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006248:	e02e      	b.n	80062a8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d115      	bne.n	8006284 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f103 020c 	add.w	r2, r3, #12
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006282:	e011      	b.n	80062a8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006284:	f7fd fca6 	bl	8003bd4 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d803      	bhi.n	800629c <HAL_SPI_Receive+0x166>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d102      	bne.n	80062a2 <HAL_SPI_Receive+0x16c>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062a6:	e04a      	b.n	800633e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1cb      	bne.n	800624a <HAL_SPI_Receive+0x114>
 80062b2:	e031      	b.n	8006318 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d113      	bne.n	80062ea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	b292      	uxth	r2, r2
 80062ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	1c9a      	adds	r2, r3, #2
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062e8:	e011      	b.n	800630e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ea:	f7fd fc73 	bl	8003bd4 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d803      	bhi.n	8006302 <HAL_SPI_Receive+0x1cc>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d102      	bne.n	8006308 <HAL_SPI_Receive+0x1d2>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800630c:	e017      	b.n	800633e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006312:	b29b      	uxth	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1cd      	bne.n	80062b4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fa45 	bl	80067ac <SPI_EndRxTransaction>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
 800633a:	e000      	b.n	800633e <HAL_SPI_Receive+0x208>
  }

error :
 800633c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	; 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006366:	2301      	movs	r3, #1
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_SPI_TransmitReceive+0x26>
 800637a:	2302      	movs	r3, #2
 800637c:	e18a      	b.n	8006694 <HAL_SPI_TransmitReceive+0x33c>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006386:	f7fd fc25 	bl	8003bd4 <HAL_GetTick>
 800638a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800639c:	887b      	ldrh	r3, [r7, #2]
 800639e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d00f      	beq.n	80063c8 <HAL_SPI_TransmitReceive+0x70>
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ae:	d107      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x68>
 80063b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d003      	beq.n	80063c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80063c0:	2302      	movs	r3, #2
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063c6:	e15b      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <HAL_SPI_TransmitReceive+0x82>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_TransmitReceive+0x82>
 80063d4:	887b      	ldrh	r3, [r7, #2]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063e0:	e14e      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d003      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2205      	movs	r2, #5
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	887a      	ldrh	r2, [r7, #2]
 8006406:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	887a      	ldrh	r2, [r7, #2]
 8006418:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	887a      	ldrh	r2, [r7, #2]
 800641e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d007      	beq.n	800644a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006448:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006452:	d178      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_SPI_TransmitReceive+0x10a>
 800645c:	8b7b      	ldrh	r3, [r7, #26]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d166      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	881a      	ldrh	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006486:	e053      	b.n	8006530 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d11b      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x176>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d016      	beq.n	80064ce <HAL_SPI_TransmitReceive+0x176>
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d113      	bne.n	80064ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	881a      	ldrh	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	1c9a      	adds	r2, r3, #2
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d119      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x1b8>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d014      	beq.n	8006510 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	b292      	uxth	r2, r2
 80064f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	1c9a      	adds	r2, r3, #2
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800650c:	2301      	movs	r3, #1
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006510:	f7fd fb60 	bl	8003bd4 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800651c:	429a      	cmp	r2, r3
 800651e:	d807      	bhi.n	8006530 <HAL_SPI_TransmitReceive+0x1d8>
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d003      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800652e:	e0a7      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1a6      	bne.n	8006488 <HAL_SPI_TransmitReceive+0x130>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1a1      	bne.n	8006488 <HAL_SPI_TransmitReceive+0x130>
 8006544:	e07c      	b.n	8006640 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x1fc>
 800654e:	8b7b      	ldrh	r3, [r7, #26]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d16b      	bne.n	800662c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657a:	e057      	b.n	800662c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d11c      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x26c>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d017      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x26c>
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d114      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d119      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x2ae>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d014      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006602:	2301      	movs	r3, #1
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006606:	f7fd fae5 	bl	8003bd4 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006612:	429a      	cmp	r2, r3
 8006614:	d803      	bhi.n	800661e <HAL_SPI_TransmitReceive+0x2c6>
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d102      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2cc>
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800662a:	e029      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1a2      	bne.n	800657c <HAL_SPI_TransmitReceive+0x224>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d19d      	bne.n	800657c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f917 	bl	8006878 <SPI_EndRxTxTransaction>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800665c:	e010      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e000      	b.n	8006680 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800667e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006694:	4618      	mov	r0, r3
 8006696:	3730      	adds	r7, #48	; 0x30
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066ac:	f7fd fa92 	bl	8003bd4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066bc:	f7fd fa8a 	bl	8003bd4 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	015b      	lsls	r3, r3, #5
 80066c8:	0d1b      	lsrs	r3, r3, #20
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	e054      	b.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d050      	beq.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066dc:	f7fd fa7a 	bl	8003bd4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d902      	bls.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d13d      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d111      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d004      	beq.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d107      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d10f      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e017      	b.n	800679e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3b01      	subs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d19b      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	2000000c 	.word	0x2000000c

080067ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067c0:	d111      	bne.n	80067e6 <SPI_EndRxTransaction+0x3a>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067ca:	d004      	beq.n	80067d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d4:	d107      	bne.n	80067e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ee:	d12a      	bne.n	8006846 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f8:	d012      	beq.n	8006820 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2200      	movs	r2, #0
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f7ff ff49 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d02d      	beq.n	800686c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e026      	b.n	800686e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2200      	movs	r2, #0
 8006828:	2101      	movs	r1, #1
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f7ff ff36 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01a      	beq.n	800686c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	f043 0220 	orr.w	r2, r3, #32
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e013      	b.n	800686e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	2101      	movs	r1, #1
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff ff23 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e000      	b.n	800686e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <SPI_EndRxTxTransaction+0x7c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <SPI_EndRxTxTransaction+0x80>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0d5b      	lsrs	r3, r3, #21
 8006890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a2:	d112      	bne.n	80068ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	2180      	movs	r1, #128	; 0x80
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff fef4 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00f      	b.n	80068ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e0:	2b80      	cmp	r3, #128	; 0x80
 80068e2:	d0f2      	beq.n	80068ca <SPI_EndRxTxTransaction+0x52>
 80068e4:	e000      	b.n	80068e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80068e6:	bf00      	nop
  }

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	2000000c 	.word	0x2000000c
 80068f8:	165e9f81 	.word	0x165e9f81

080068fc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e034      	b.n	800697c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7fa fdf2 	bl	8001510 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3308      	adds	r3, #8
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f001 fc6e 	bl	8008218 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	461a      	mov	r2, r3
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	f001 fcb8 	bl	80082bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6858      	ldr	r0, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	f001 fced 	bl	8008338 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	6892      	ldr	r2, [r2, #8]
 8006966:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6892      	ldr	r2, [r2, #8]
 8006972:	f041 0101 	orr.w	r1, r1, #1
 8006976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e041      	b.n	8006a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fc ff3c 	bl	8003828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f000 fa96 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d001      	beq.n	8006a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e04e      	b.n	8006ada <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d022      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a66:	d01d      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <HAL_TIM_Base_Start_IT+0xc8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d018      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d013      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d009      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <HAL_TIM_Base_Start_IT+0xd8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d004      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x80>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d111      	bne.n	8006ac8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b06      	cmp	r3, #6
 8006ab4:	d010      	beq.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac6:	e007      	b.n	8006ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40001800 	.word	0x40001800

08006b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0202 	mvn.w	r2, #2
 8006b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f9b5 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9a7 	bl	8006ea2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f9b8 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0204 	mvn.w	r2, #4
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f98b 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f97d 	bl	8006ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f98e 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d122      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d11b      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0208 	mvn.w	r2, #8
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f961 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f953 	bl	8006ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f964 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d122      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b10      	cmp	r3, #16
 8006c22:	d11b      	bne.n	8006c5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0210 	mvn.w	r2, #16
 8006c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2208      	movs	r2, #8
 8006c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f937 	bl	8006eb6 <HAL_TIM_IC_CaptureCallback>
 8006c48:	e005      	b.n	8006c56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f929 	bl	8006ea2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f93a 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10e      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f06f 0201 	mvn.w	r2, #1
 8006c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fc fc2e 	bl	80034e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d10e      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d107      	bne.n	8006cb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fae0 	bl	8007274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	d107      	bne.n	8006ce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f8ff 	bl	8006ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d10e      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d107      	bne.n	8006d0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f06f 0220 	mvn.w	r2, #32
 8006d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 faaa 	bl	8007260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIM_ConfigClockSource+0x1c>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e0b4      	b.n	8006e9a <HAL_TIM_ConfigClockSource+0x186>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d68:	d03e      	beq.n	8006de8 <HAL_TIM_ConfigClockSource+0xd4>
 8006d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6e:	f200 8087 	bhi.w	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	f000 8086 	beq.w	8006e86 <HAL_TIM_ConfigClockSource+0x172>
 8006d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7e:	d87f      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006d80:	2b70      	cmp	r3, #112	; 0x70
 8006d82:	d01a      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0xa6>
 8006d84:	2b70      	cmp	r3, #112	; 0x70
 8006d86:	d87b      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006d88:	2b60      	cmp	r3, #96	; 0x60
 8006d8a:	d050      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x11a>
 8006d8c:	2b60      	cmp	r3, #96	; 0x60
 8006d8e:	d877      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d03c      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0xfa>
 8006d94:	2b50      	cmp	r3, #80	; 0x50
 8006d96:	d873      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d058      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x13a>
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d86f      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006da0:	2b30      	cmp	r3, #48	; 0x30
 8006da2:	d064      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x15a>
 8006da4:	2b30      	cmp	r3, #48	; 0x30
 8006da6:	d86b      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d060      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x15a>
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d867      	bhi.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d05c      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x15a>
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d05a      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x15a>
 8006db8:	e062      	b.n	8006e80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6899      	ldr	r1, [r3, #8]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f000 f9ad 	bl	8007128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ddc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	609a      	str	r2, [r3, #8]
      break;
 8006de6:	e04f      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6899      	ldr	r1, [r3, #8]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f000 f996 	bl	8007128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e0a:	609a      	str	r2, [r3, #8]
      break;
 8006e0c:	e03c      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 f90a 	bl	8007034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2150      	movs	r1, #80	; 0x50
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f963 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e02c      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6859      	ldr	r1, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f000 f929 	bl	8007092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2160      	movs	r1, #96	; 0x60
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f953 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e4c:	e01c      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6859      	ldr	r1, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f000 f8ea 	bl	8007034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2140      	movs	r1, #64	; 0x40
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f943 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e6c:	e00c      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 f93a 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e7e:	e003      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	73fb      	strb	r3, [r7, #15]
      break;
 8006e84:	e000      	b.n	8006e88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a40      	ldr	r2, [pc, #256]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f12:	d00f      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3d      	ldr	r2, [pc, #244]	; (800700c <TIM_Base_SetConfig+0x118>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3c      	ldr	r2, [pc, #240]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3b      	ldr	r2, [pc, #236]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a3a      	ldr	r2, [pc, #232]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d108      	bne.n	8006f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d027      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2c      	ldr	r2, [pc, #176]	; (800700c <TIM_Base_SetConfig+0x118>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d023      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2b      	ldr	r2, [pc, #172]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01f      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2a      	ldr	r2, [pc, #168]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a29      	ldr	r2, [pc, #164]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d017      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a28      	ldr	r2, [pc, #160]	; (800701c <TIM_Base_SetConfig+0x128>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a27      	ldr	r2, [pc, #156]	; (8007020 <TIM_Base_SetConfig+0x12c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a26      	ldr	r2, [pc, #152]	; (8007024 <TIM_Base_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <TIM_Base_SetConfig+0x134>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a24      	ldr	r2, [pc, #144]	; (800702c <TIM_Base_SetConfig+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a23      	ldr	r2, [pc, #140]	; (8007030 <TIM_Base_SetConfig+0x13c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d108      	bne.n	8006fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_Base_SetConfig+0xf8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d103      	bne.n	8006ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	615a      	str	r2, [r3, #20]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40010400 	.word	0x40010400
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800
 8007028:	40001800 	.word	0x40001800
 800702c:	40001c00 	.word	0x40001c00
 8007030:	40002000 	.word	0x40002000

08007034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800705e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f023 030a 	bic.w	r3, r3, #10
 8007070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0210 	bic.w	r2, r3, #16
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	031b      	lsls	r3, r3, #12
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	f043 0307 	orr.w	r3, r3, #7
 8007114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	609a      	str	r2, [r3, #8]
}
 800711c:	bf00      	nop
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	021a      	lsls	r2, r3, #8
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	431a      	orrs	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4313      	orrs	r3, r2
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	609a      	str	r2, [r3, #8]
}
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800717c:	2302      	movs	r3, #2
 800717e:	e05a      	b.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a21      	ldr	r2, [pc, #132]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d022      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071cc:	d01d      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d018      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1b      	ldr	r2, [pc, #108]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1a      	ldr	r2, [pc, #104]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d00e      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a18      	ldr	r2, [pc, #96]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d009      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d004      	beq.n	800720a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a15      	ldr	r2, [pc, #84]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10c      	bne.n	8007224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	4313      	orrs	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40010000 	.word	0x40010000
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00
 8007254:	40010400 	.word	0x40010400
 8007258:	40014000 	.word	0x40014000
 800725c:	40001800 	.word	0x40001800

08007260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e03f      	b.n	800731a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fc fb72 	bl	8003998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	; 0x24
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fddb 	bl	8007e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007300:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b08a      	sub	sp, #40	; 0x28
 8007326:	af02      	add	r7, sp, #8
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b20      	cmp	r3, #32
 8007340:	d17c      	bne.n	800743c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_UART_Transmit+0x2c>
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e075      	b.n	800743e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_UART_Transmit+0x3e>
 800735c:	2302      	movs	r3, #2
 800735e:	e06e      	b.n	800743e <HAL_UART_Transmit+0x11c>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2221      	movs	r2, #33	; 0x21
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007376:	f7fc fc2d 	bl	8003bd4 <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007390:	d108      	bne.n	80073a4 <HAL_UART_Transmit+0x82>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	61bb      	str	r3, [r7, #24]
 80073a2:	e003      	b.n	80073ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073b4:	e02a      	b.n	800740c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fb1f 	bl	8007a04 <UART_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e036      	b.n	800743e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10b      	bne.n	80073ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	3302      	adds	r3, #2
 80073ea:	61bb      	str	r3, [r7, #24]
 80073ec:	e007      	b.n	80073fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007402:	b29b      	uxth	r3, r3
 8007404:	3b01      	subs	r3, #1
 8007406:	b29a      	uxth	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1cf      	bne.n	80073b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	2140      	movs	r1, #64	; 0x40
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 faef 	bl	8007a04 <UART_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e006      	b.n	800743e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	e000      	b.n	800743e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
  }
}
 800743e:	4618      	mov	r0, r3
 8007440:	3720      	adds	r7, #32
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	4613      	mov	r3, r2
 8007452:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b20      	cmp	r3, #32
 800745e:	d11d      	bne.n	800749c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_UART_Receive_IT+0x26>
 8007466:	88fb      	ldrh	r3, [r7, #6]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e016      	b.n	800749e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_UART_Receive_IT+0x38>
 800747a:	2302      	movs	r3, #2
 800747c:	e00f      	b.n	800749e <HAL_UART_Receive_IT+0x58>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	461a      	mov	r2, r3
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fb24 	bl	8007ae0 <UART_Start_Receive_IT>
 8007498:	4603      	mov	r3, r0
 800749a:	e000      	b.n	800749e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
  }
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b0ba      	sub	sp, #232	; 0xe8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10f      	bne.n	800750e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <HAL_UART_IRQHandler+0x66>
 80074fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fc03 	bl	8007d12 <UART_Receive_IT>
      return;
 800750c:	e256      	b.n	80079bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800750e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 80de 	beq.w	80076d4 <HAL_UART_IRQHandler+0x22c>
 8007518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007528:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80d1 	beq.w	80076d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <HAL_UART_IRQHandler+0xae>
 800753e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0201 	orr.w	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755a:	f003 0304 	and.w	r3, r3, #4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_UART_IRQHandler+0xd2>
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f043 0202 	orr.w	r2, r3, #2
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800757a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <HAL_UART_IRQHandler+0xf6>
 8007586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	d005      	beq.n	800759e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	f043 0204 	orr.w	r2, r3, #4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d011      	beq.n	80075ce <HAL_UART_IRQHandler+0x126>
 80075aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d105      	bne.n	80075c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f043 0208 	orr.w	r2, r3, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 81ed 	beq.w	80079b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d008      	beq.n	80075f6 <HAL_UART_IRQHandler+0x14e>
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb8e 	bl	8007d12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b40      	cmp	r3, #64	; 0x40
 8007602:	bf0c      	ite	eq
 8007604:	2301      	moveq	r3, #1
 8007606:	2300      	movne	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <HAL_UART_IRQHandler+0x17a>
 800761a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d04f      	beq.n	80076c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa96 	bl	8007b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d141      	bne.n	80076ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3314      	adds	r3, #20
 800763c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800764c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3314      	adds	r3, #20
 800765e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800766e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800767a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1d9      	bne.n	8007636 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	2b00      	cmp	r3, #0
 8007688:	d013      	beq.n	80076b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	4a7d      	ldr	r2, [pc, #500]	; (8007884 <HAL_UART_IRQHandler+0x3dc>)
 8007690:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	4618      	mov	r0, r3
 8007698:	f7fc fc4d 	bl	8003f36 <HAL_DMA_Abort_IT>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d016      	beq.n	80076d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b0:	e00e      	b.n	80076d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f990 	bl	80079d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b8:	e00a      	b.n	80076d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f98c 	bl	80079d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c0:	e006      	b.n	80076d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f988 	bl	80079d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076ce:	e170      	b.n	80079b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	bf00      	nop
    return;
 80076d2:	e16e      	b.n	80079b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 814a 	bne.w	8007972 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8143 	beq.w	8007972 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 813c 	beq.w	8007972 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60bb      	str	r3, [r7, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	f040 80b4 	bne.w	8007888 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800772c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8140 	beq.w	80079b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800773a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773e:	429a      	cmp	r2, r3
 8007740:	f080 8139 	bcs.w	80079b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800774a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007756:	f000 8088 	beq.w	800786a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007778:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	330c      	adds	r3, #12
 8007782:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800778a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800779e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1d9      	bne.n	800775a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	3314      	adds	r3, #20
 80077c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e1      	bne.n	80077a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3314      	adds	r3, #20
 80077e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007806:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007808:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800780c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e3      	bne.n	80077e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800784c:	65ba      	str	r2, [r7, #88]	; 0x58
 800784e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800785a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e3      	bne.n	8007828 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	4618      	mov	r0, r3
 8007866:	f7fc faf6 	bl	8003e56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007872:	b29b      	uxth	r3, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	b29b      	uxth	r3, r3
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8b6 	bl	80079ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007880:	e099      	b.n	80079b6 <HAL_UART_IRQHandler+0x50e>
 8007882:	bf00      	nop
 8007884:	08007c1b 	.word	0x08007c1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007890:	b29b      	uxth	r3, r3
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 808b 	beq.w	80079ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80078a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8086 	beq.w	80079ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	330c      	adds	r3, #12
 80078ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078d2:	647a      	str	r2, [r7, #68]	; 0x44
 80078d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3314      	adds	r3, #20
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	623b      	str	r3, [r7, #32]
   return(result);
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3314      	adds	r3, #20
 8007906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800790a:	633a      	str	r2, [r7, #48]	; 0x30
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e3      	bne.n	80078e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	60fb      	str	r3, [r7, #12]
   return(result);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0310 	bic.w	r3, r3, #16
 8007942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007950:	61fa      	str	r2, [r7, #28]
 8007952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	69b9      	ldr	r1, [r7, #24]
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	617b      	str	r3, [r7, #20]
   return(result);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e3      	bne.n	800792c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f83e 	bl	80079ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007970:	e023      	b.n	80079ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_UART_IRQHandler+0x4ea>
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f959 	bl	8007c42 <UART_Transmit_IT>
    return;
 8007990:	e014      	b.n	80079bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00e      	beq.n	80079bc <HAL_UART_IRQHandler+0x514>
 800799e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f999 	bl	8007ce2 <UART_EndTransmit_IT>
    return;
 80079b0:	e004      	b.n	80079bc <HAL_UART_IRQHandler+0x514>
    return;
 80079b2:	bf00      	nop
 80079b4:	e002      	b.n	80079bc <HAL_UART_IRQHandler+0x514>
      return;
 80079b6:	bf00      	nop
 80079b8:	e000      	b.n	80079bc <HAL_UART_IRQHandler+0x514>
      return;
 80079ba:	bf00      	nop
  }
}
 80079bc:	37e8      	adds	r7, #232	; 0xe8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b090      	sub	sp, #64	; 0x40
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	4613      	mov	r3, r2
 8007a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a14:	e050      	b.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d04c      	beq.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a24:	f7fc f8d6 	bl	8003bd4 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d241      	bcs.n	8007ab8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a54:	637a      	str	r2, [r7, #52]	; 0x34
 8007a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e5      	bne.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	613b      	str	r3, [r7, #16]
   return(result);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f023 0301 	bic.w	r3, r3, #1
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3314      	adds	r3, #20
 8007a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a88:	623a      	str	r2, [r7, #32]
 8007a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	6a3a      	ldr	r2, [r7, #32]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e00f      	b.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d09f      	beq.n	8007a16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3740      	adds	r7, #64	; 0x40
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2222      	movs	r2, #34	; 0x22
 8007b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b24:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0201 	orr.w	r2, r2, #1
 8007b34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0220 	orr.w	r2, r2, #32
 8007b44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b095      	sub	sp, #84	; 0x54
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	e853 3f00 	ldrex	r3, [r3]
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	330c      	adds	r3, #12
 8007b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b7c:	643a      	str	r2, [r7, #64]	; 0x40
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b84:	e841 2300 	strex	r3, r2, [r1]
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e5      	bne.n	8007b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3314      	adds	r3, #20
 8007b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d119      	bne.n	8007c00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	e853 3f00 	ldrex	r3, [r3]
 8007bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f023 0310 	bic.w	r3, r3, #16
 8007be2:	647b      	str	r3, [r7, #68]	; 0x44
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	330c      	adds	r3, #12
 8007bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bec:	61ba      	str	r2, [r7, #24]
 8007bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e5      	bne.n	8007bcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c0e:	bf00      	nop
 8007c10:	3754      	adds	r7, #84	; 0x54
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff fecf 	bl	80079d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c3a:	bf00      	nop
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b21      	cmp	r3, #33	; 0x21
 8007c54:	d13e      	bne.n	8007cd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5e:	d114      	bne.n	8007c8a <UART_Transmit_IT+0x48>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d110      	bne.n	8007c8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	1c9a      	adds	r2, r3, #2
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	621a      	str	r2, [r3, #32]
 8007c88:	e008      	b.n	8007c9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6211      	str	r1, [r2, #32]
 8007c94:	781a      	ldrb	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10f      	bne.n	8007cd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68da      	ldr	r2, [r3, #12]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff fe5e 	bl	80079c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b08c      	sub	sp, #48	; 0x30
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b22      	cmp	r3, #34	; 0x22
 8007d24:	f040 80ab 	bne.w	8007e7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d30:	d117      	bne.n	8007d62 <UART_Receive_IT+0x50>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d113      	bne.n	8007d62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007d60:	e026      	b.n	8007db0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d74:	d007      	beq.n	8007d86 <UART_Receive_IT+0x74>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10a      	bne.n	8007d94 <UART_Receive_IT+0x82>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	e008      	b.n	8007da6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d15a      	bne.n	8007e7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0220 	bic.w	r2, r2, #32
 8007dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007de2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695a      	ldr	r2, [r3, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d135      	bne.n	8007e70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	f023 0310 	bic.w	r3, r3, #16
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	623a      	str	r2, [r7, #32]
 8007e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	69f9      	ldr	r1, [r7, #28]
 8007e30:	6a3a      	ldr	r2, [r7, #32]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e5      	bne.n	8007e0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0310 	and.w	r3, r3, #16
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d10a      	bne.n	8007e62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff fdbf 	bl	80079ec <HAL_UARTEx_RxEventCallback>
 8007e6e:	e002      	b.n	8007e76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7fb fd27 	bl	80038c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e002      	b.n	8007e80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
  }
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3730      	adds	r7, #48	; 0x30
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	b09f      	sub	sp, #124	; 0x7c
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	68d9      	ldr	r1, [r3, #12]
 8007ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	ea40 0301 	orr.w	r3, r0, r1
 8007ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ecc:	f021 010c 	bic.w	r1, r1, #12
 8007ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee6:	6999      	ldr	r1, [r3, #24]
 8007ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	ea40 0301 	orr.w	r3, r0, r1
 8007ef0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4bc5      	ldr	r3, [pc, #788]	; (800820c <UART_SetConfig+0x384>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d004      	beq.n	8007f06 <UART_SetConfig+0x7e>
 8007efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4bc3      	ldr	r3, [pc, #780]	; (8008210 <UART_SetConfig+0x388>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d103      	bne.n	8007f0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f06:	f7fd ff3d 	bl	8005d84 <HAL_RCC_GetPCLK2Freq>
 8007f0a:	6778      	str	r0, [r7, #116]	; 0x74
 8007f0c:	e002      	b.n	8007f14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f0e:	f7fd ff25 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8007f12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1c:	f040 80b6 	bne.w	800808c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f22:	461c      	mov	r4, r3
 8007f24:	f04f 0500 	mov.w	r5, #0
 8007f28:	4622      	mov	r2, r4
 8007f2a:	462b      	mov	r3, r5
 8007f2c:	1891      	adds	r1, r2, r2
 8007f2e:	6439      	str	r1, [r7, #64]	; 0x40
 8007f30:	415b      	adcs	r3, r3
 8007f32:	647b      	str	r3, [r7, #68]	; 0x44
 8007f34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f38:	1912      	adds	r2, r2, r4
 8007f3a:	eb45 0303 	adc.w	r3, r5, r3
 8007f3e:	f04f 0000 	mov.w	r0, #0
 8007f42:	f04f 0100 	mov.w	r1, #0
 8007f46:	00d9      	lsls	r1, r3, #3
 8007f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f4c:	00d0      	lsls	r0, r2, #3
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	1911      	adds	r1, r2, r4
 8007f54:	6639      	str	r1, [r7, #96]	; 0x60
 8007f56:	416b      	adcs	r3, r5
 8007f58:	667b      	str	r3, [r7, #100]	; 0x64
 8007f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	1891      	adds	r1, r2, r2
 8007f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f68:	415b      	adcs	r3, r3
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f74:	f7f8 f984 	bl	8000280 <__aeabi_uldivmod>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4ba5      	ldr	r3, [pc, #660]	; (8008214 <UART_SetConfig+0x38c>)
 8007f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	011e      	lsls	r6, r3, #4
 8007f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f88:	461c      	mov	r4, r3
 8007f8a:	f04f 0500 	mov.w	r5, #0
 8007f8e:	4622      	mov	r2, r4
 8007f90:	462b      	mov	r3, r5
 8007f92:	1891      	adds	r1, r2, r2
 8007f94:	6339      	str	r1, [r7, #48]	; 0x30
 8007f96:	415b      	adcs	r3, r3
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f9e:	1912      	adds	r2, r2, r4
 8007fa0:	eb45 0303 	adc.w	r3, r5, r3
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	00d9      	lsls	r1, r3, #3
 8007fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fb2:	00d0      	lsls	r0, r2, #3
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	1911      	adds	r1, r2, r4
 8007fba:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fbc:	416b      	adcs	r3, r5
 8007fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	1891      	adds	r1, r2, r2
 8007fcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fce:	415b      	adcs	r3, r3
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007fda:	f7f8 f951 	bl	8000280 <__aeabi_uldivmod>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4b8c      	ldr	r3, [pc, #560]	; (8008214 <UART_SetConfig+0x38c>)
 8007fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	2164      	movs	r1, #100	; 0x64
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	3332      	adds	r3, #50	; 0x32
 8007ff6:	4a87      	ldr	r2, [pc, #540]	; (8008214 <UART_SetConfig+0x38c>)
 8007ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008004:	441e      	add	r6, r3
 8008006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008008:	4618      	mov	r0, r3
 800800a:	f04f 0100 	mov.w	r1, #0
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	1894      	adds	r4, r2, r2
 8008014:	623c      	str	r4, [r7, #32]
 8008016:	415b      	adcs	r3, r3
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
 800801a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800801e:	1812      	adds	r2, r2, r0
 8008020:	eb41 0303 	adc.w	r3, r1, r3
 8008024:	f04f 0400 	mov.w	r4, #0
 8008028:	f04f 0500 	mov.w	r5, #0
 800802c:	00dd      	lsls	r5, r3, #3
 800802e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008032:	00d4      	lsls	r4, r2, #3
 8008034:	4622      	mov	r2, r4
 8008036:	462b      	mov	r3, r5
 8008038:	1814      	adds	r4, r2, r0
 800803a:	653c      	str	r4, [r7, #80]	; 0x50
 800803c:	414b      	adcs	r3, r1
 800803e:	657b      	str	r3, [r7, #84]	; 0x54
 8008040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	461a      	mov	r2, r3
 8008046:	f04f 0300 	mov.w	r3, #0
 800804a:	1891      	adds	r1, r2, r2
 800804c:	61b9      	str	r1, [r7, #24]
 800804e:	415b      	adcs	r3, r3
 8008050:	61fb      	str	r3, [r7, #28]
 8008052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008056:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800805a:	f7f8 f911 	bl	8000280 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4b6c      	ldr	r3, [pc, #432]	; (8008214 <UART_SetConfig+0x38c>)
 8008064:	fba3 1302 	umull	r1, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	2164      	movs	r1, #100	; 0x64
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	3332      	adds	r3, #50	; 0x32
 8008076:	4a67      	ldr	r2, [pc, #412]	; (8008214 <UART_SetConfig+0x38c>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f003 0207 	and.w	r2, r3, #7
 8008082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4432      	add	r2, r6
 8008088:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800808a:	e0b9      	b.n	8008200 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800808c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800808e:	461c      	mov	r4, r3
 8008090:	f04f 0500 	mov.w	r5, #0
 8008094:	4622      	mov	r2, r4
 8008096:	462b      	mov	r3, r5
 8008098:	1891      	adds	r1, r2, r2
 800809a:	6139      	str	r1, [r7, #16]
 800809c:	415b      	adcs	r3, r3
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080a4:	1912      	adds	r2, r2, r4
 80080a6:	eb45 0303 	adc.w	r3, r5, r3
 80080aa:	f04f 0000 	mov.w	r0, #0
 80080ae:	f04f 0100 	mov.w	r1, #0
 80080b2:	00d9      	lsls	r1, r3, #3
 80080b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080b8:	00d0      	lsls	r0, r2, #3
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	eb12 0804 	adds.w	r8, r2, r4
 80080c2:	eb43 0905 	adc.w	r9, r3, r5
 80080c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f04f 0100 	mov.w	r1, #0
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	008b      	lsls	r3, r1, #2
 80080da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080de:	0082      	lsls	r2, r0, #2
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 f8cc 	bl	8000280 <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4b49      	ldr	r3, [pc, #292]	; (8008214 <UART_SetConfig+0x38c>)
 80080ee:	fba3 2302 	umull	r2, r3, r3, r2
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	011e      	lsls	r6, r3, #4
 80080f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f8:	4618      	mov	r0, r3
 80080fa:	f04f 0100 	mov.w	r1, #0
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	1894      	adds	r4, r2, r2
 8008104:	60bc      	str	r4, [r7, #8]
 8008106:	415b      	adcs	r3, r3
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800810e:	1812      	adds	r2, r2, r0
 8008110:	eb41 0303 	adc.w	r3, r1, r3
 8008114:	f04f 0400 	mov.w	r4, #0
 8008118:	f04f 0500 	mov.w	r5, #0
 800811c:	00dd      	lsls	r5, r3, #3
 800811e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008122:	00d4      	lsls	r4, r2, #3
 8008124:	4622      	mov	r2, r4
 8008126:	462b      	mov	r3, r5
 8008128:	1814      	adds	r4, r2, r0
 800812a:	64bc      	str	r4, [r7, #72]	; 0x48
 800812c:	414b      	adcs	r3, r1
 800812e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4618      	mov	r0, r3
 8008136:	f04f 0100 	mov.w	r1, #0
 800813a:	f04f 0200 	mov.w	r2, #0
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	008b      	lsls	r3, r1, #2
 8008144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008148:	0082      	lsls	r2, r0, #2
 800814a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800814e:	f7f8 f897 	bl	8000280 <__aeabi_uldivmod>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4b2f      	ldr	r3, [pc, #188]	; (8008214 <UART_SetConfig+0x38c>)
 8008158:	fba3 1302 	umull	r1, r3, r3, r2
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	2164      	movs	r1, #100	; 0x64
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	3332      	adds	r3, #50	; 0x32
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <UART_SetConfig+0x38c>)
 800816c:	fba2 2303 	umull	r2, r3, r2, r3
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008176:	441e      	add	r6, r3
 8008178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800817a:	4618      	mov	r0, r3
 800817c:	f04f 0100 	mov.w	r1, #0
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	1894      	adds	r4, r2, r2
 8008186:	603c      	str	r4, [r7, #0]
 8008188:	415b      	adcs	r3, r3
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008190:	1812      	adds	r2, r2, r0
 8008192:	eb41 0303 	adc.w	r3, r1, r3
 8008196:	f04f 0400 	mov.w	r4, #0
 800819a:	f04f 0500 	mov.w	r5, #0
 800819e:	00dd      	lsls	r5, r3, #3
 80081a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081a4:	00d4      	lsls	r4, r2, #3
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	eb12 0a00 	adds.w	sl, r2, r0
 80081ae:	eb43 0b01 	adc.w	fp, r3, r1
 80081b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	008b      	lsls	r3, r1, #2
 80081c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081ca:	0082      	lsls	r2, r0, #2
 80081cc:	4650      	mov	r0, sl
 80081ce:	4659      	mov	r1, fp
 80081d0:	f7f8 f856 	bl	8000280 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <UART_SetConfig+0x38c>)
 80081da:	fba3 1302 	umull	r1, r3, r3, r2
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	2164      	movs	r1, #100	; 0x64
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	3332      	adds	r3, #50	; 0x32
 80081ec:	4a09      	ldr	r2, [pc, #36]	; (8008214 <UART_SetConfig+0x38c>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	f003 020f 	and.w	r2, r3, #15
 80081f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4432      	add	r2, r6
 80081fe:	609a      	str	r2, [r3, #8]
}
 8008200:	bf00      	nop
 8008202:	377c      	adds	r7, #124	; 0x7c
 8008204:	46bd      	mov	sp, r7
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	bf00      	nop
 800820c:	40011000 	.word	0x40011000
 8008210:	40011400 	.word	0x40011400
 8008214:	51eb851f 	.word	0x51eb851f

08008218 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <FSMC_NORSRAM_Init+0xa0>)
 8008236:	4013      	ands	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008242:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008248:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800824e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008254:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800825a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008260:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008266:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800826c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008272:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008278:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800827e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008284:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b08      	cmp	r3, #8
 8008292:	d103      	bne.n	800829c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800829a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	fff00080 	.word	0xfff00080

080082bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80082de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80082f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80082fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	3b01      	subs	r3, #1
 8008302:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008304:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	3b02      	subs	r3, #2
 800830c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800830e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008314:	4313      	orrs	r3, r2
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008350:	d122      	bne.n	8008398 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008360:	4013      	ands	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800836e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008376:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800837e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008384:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	4313      	orrs	r3, r2
 800838a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6979      	ldr	r1, [r7, #20]
 8008392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008396:	e005      	b.n	80083a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80083a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	cff00000 	.word	0xcff00000

080083b8 <atoi>:
 80083b8:	220a      	movs	r2, #10
 80083ba:	2100      	movs	r1, #0
 80083bc:	f000 b8d6 	b.w	800856c <strtol>

080083c0 <__errno>:
 80083c0:	4b01      	ldr	r3, [pc, #4]	; (80083c8 <__errno+0x8>)
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000018 	.word	0x20000018

080083cc <__libc_init_array>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	4d0d      	ldr	r5, [pc, #52]	; (8008404 <__libc_init_array+0x38>)
 80083d0:	4c0d      	ldr	r4, [pc, #52]	; (8008408 <__libc_init_array+0x3c>)
 80083d2:	1b64      	subs	r4, r4, r5
 80083d4:	10a4      	asrs	r4, r4, #2
 80083d6:	2600      	movs	r6, #0
 80083d8:	42a6      	cmp	r6, r4
 80083da:	d109      	bne.n	80083f0 <__libc_init_array+0x24>
 80083dc:	4d0b      	ldr	r5, [pc, #44]	; (800840c <__libc_init_array+0x40>)
 80083de:	4c0c      	ldr	r4, [pc, #48]	; (8008410 <__libc_init_array+0x44>)
 80083e0:	f000 fcdc 	bl	8008d9c <_init>
 80083e4:	1b64      	subs	r4, r4, r5
 80083e6:	10a4      	asrs	r4, r4, #2
 80083e8:	2600      	movs	r6, #0
 80083ea:	42a6      	cmp	r6, r4
 80083ec:	d105      	bne.n	80083fa <__libc_init_array+0x2e>
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f4:	4798      	blx	r3
 80083f6:	3601      	adds	r6, #1
 80083f8:	e7ee      	b.n	80083d8 <__libc_init_array+0xc>
 80083fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fe:	4798      	blx	r3
 8008400:	3601      	adds	r6, #1
 8008402:	e7f2      	b.n	80083ea <__libc_init_array+0x1e>
 8008404:	0800bf38 	.word	0x0800bf38
 8008408:	0800bf38 	.word	0x0800bf38
 800840c:	0800bf38 	.word	0x0800bf38
 8008410:	0800bf3c 	.word	0x0800bf3c

08008414 <memset>:
 8008414:	4402      	add	r2, r0
 8008416:	4603      	mov	r3, r0
 8008418:	4293      	cmp	r3, r2
 800841a:	d100      	bne.n	800841e <memset+0xa>
 800841c:	4770      	bx	lr
 800841e:	f803 1b01 	strb.w	r1, [r3], #1
 8008422:	e7f9      	b.n	8008418 <memset+0x4>

08008424 <siprintf>:
 8008424:	b40e      	push	{r1, r2, r3}
 8008426:	b500      	push	{lr}
 8008428:	b09c      	sub	sp, #112	; 0x70
 800842a:	ab1d      	add	r3, sp, #116	; 0x74
 800842c:	9002      	str	r0, [sp, #8]
 800842e:	9006      	str	r0, [sp, #24]
 8008430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008434:	4809      	ldr	r0, [pc, #36]	; (800845c <siprintf+0x38>)
 8008436:	9107      	str	r1, [sp, #28]
 8008438:	9104      	str	r1, [sp, #16]
 800843a:	4909      	ldr	r1, [pc, #36]	; (8008460 <siprintf+0x3c>)
 800843c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008440:	9105      	str	r1, [sp, #20]
 8008442:	6800      	ldr	r0, [r0, #0]
 8008444:	9301      	str	r3, [sp, #4]
 8008446:	a902      	add	r1, sp, #8
 8008448:	f000 f8f6 	bl	8008638 <_svfiprintf_r>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	2200      	movs	r2, #0
 8008450:	701a      	strb	r2, [r3, #0]
 8008452:	b01c      	add	sp, #112	; 0x70
 8008454:	f85d eb04 	ldr.w	lr, [sp], #4
 8008458:	b003      	add	sp, #12
 800845a:	4770      	bx	lr
 800845c:	20000018 	.word	0x20000018
 8008460:	ffff0208 	.word	0xffff0208

08008464 <_strtol_l.isra.0>:
 8008464:	2b01      	cmp	r3, #1
 8008466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800846a:	d001      	beq.n	8008470 <_strtol_l.isra.0+0xc>
 800846c:	2b24      	cmp	r3, #36	; 0x24
 800846e:	d906      	bls.n	800847e <_strtol_l.isra.0+0x1a>
 8008470:	f7ff ffa6 	bl	80083c0 <__errno>
 8008474:	2316      	movs	r3, #22
 8008476:	6003      	str	r3, [r0, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847e:	4f3a      	ldr	r7, [pc, #232]	; (8008568 <_strtol_l.isra.0+0x104>)
 8008480:	468e      	mov	lr, r1
 8008482:	4676      	mov	r6, lr
 8008484:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008488:	5de5      	ldrb	r5, [r4, r7]
 800848a:	f015 0508 	ands.w	r5, r5, #8
 800848e:	d1f8      	bne.n	8008482 <_strtol_l.isra.0+0x1e>
 8008490:	2c2d      	cmp	r4, #45	; 0x2d
 8008492:	d134      	bne.n	80084fe <_strtol_l.isra.0+0x9a>
 8008494:	f89e 4000 	ldrb.w	r4, [lr]
 8008498:	f04f 0801 	mov.w	r8, #1
 800849c:	f106 0e02 	add.w	lr, r6, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d05c      	beq.n	800855e <_strtol_l.isra.0+0xfa>
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	d10c      	bne.n	80084c2 <_strtol_l.isra.0+0x5e>
 80084a8:	2c30      	cmp	r4, #48	; 0x30
 80084aa:	d10a      	bne.n	80084c2 <_strtol_l.isra.0+0x5e>
 80084ac:	f89e 4000 	ldrb.w	r4, [lr]
 80084b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084b4:	2c58      	cmp	r4, #88	; 0x58
 80084b6:	d14d      	bne.n	8008554 <_strtol_l.isra.0+0xf0>
 80084b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80084bc:	2310      	movs	r3, #16
 80084be:	f10e 0e02 	add.w	lr, lr, #2
 80084c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80084c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084ca:	2600      	movs	r6, #0
 80084cc:	fbbc f9f3 	udiv	r9, ip, r3
 80084d0:	4635      	mov	r5, r6
 80084d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80084d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80084da:	2f09      	cmp	r7, #9
 80084dc:	d818      	bhi.n	8008510 <_strtol_l.isra.0+0xac>
 80084de:	463c      	mov	r4, r7
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	dd24      	ble.n	800852e <_strtol_l.isra.0+0xca>
 80084e4:	2e00      	cmp	r6, #0
 80084e6:	db1f      	blt.n	8008528 <_strtol_l.isra.0+0xc4>
 80084e8:	45a9      	cmp	r9, r5
 80084ea:	d31d      	bcc.n	8008528 <_strtol_l.isra.0+0xc4>
 80084ec:	d101      	bne.n	80084f2 <_strtol_l.isra.0+0x8e>
 80084ee:	45a2      	cmp	sl, r4
 80084f0:	db1a      	blt.n	8008528 <_strtol_l.isra.0+0xc4>
 80084f2:	fb05 4503 	mla	r5, r5, r3, r4
 80084f6:	2601      	movs	r6, #1
 80084f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084fc:	e7eb      	b.n	80084d6 <_strtol_l.isra.0+0x72>
 80084fe:	2c2b      	cmp	r4, #43	; 0x2b
 8008500:	bf08      	it	eq
 8008502:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008506:	46a8      	mov	r8, r5
 8008508:	bf08      	it	eq
 800850a:	f106 0e02 	addeq.w	lr, r6, #2
 800850e:	e7c7      	b.n	80084a0 <_strtol_l.isra.0+0x3c>
 8008510:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008514:	2f19      	cmp	r7, #25
 8008516:	d801      	bhi.n	800851c <_strtol_l.isra.0+0xb8>
 8008518:	3c37      	subs	r4, #55	; 0x37
 800851a:	e7e1      	b.n	80084e0 <_strtol_l.isra.0+0x7c>
 800851c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008520:	2f19      	cmp	r7, #25
 8008522:	d804      	bhi.n	800852e <_strtol_l.isra.0+0xca>
 8008524:	3c57      	subs	r4, #87	; 0x57
 8008526:	e7db      	b.n	80084e0 <_strtol_l.isra.0+0x7c>
 8008528:	f04f 36ff 	mov.w	r6, #4294967295
 800852c:	e7e4      	b.n	80084f8 <_strtol_l.isra.0+0x94>
 800852e:	2e00      	cmp	r6, #0
 8008530:	da05      	bge.n	800853e <_strtol_l.isra.0+0xda>
 8008532:	2322      	movs	r3, #34	; 0x22
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	4665      	mov	r5, ip
 8008538:	b942      	cbnz	r2, 800854c <_strtol_l.isra.0+0xe8>
 800853a:	4628      	mov	r0, r5
 800853c:	e79d      	b.n	800847a <_strtol_l.isra.0+0x16>
 800853e:	f1b8 0f00 	cmp.w	r8, #0
 8008542:	d000      	beq.n	8008546 <_strtol_l.isra.0+0xe2>
 8008544:	426d      	negs	r5, r5
 8008546:	2a00      	cmp	r2, #0
 8008548:	d0f7      	beq.n	800853a <_strtol_l.isra.0+0xd6>
 800854a:	b10e      	cbz	r6, 8008550 <_strtol_l.isra.0+0xec>
 800854c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	e7f2      	b.n	800853a <_strtol_l.isra.0+0xd6>
 8008554:	2430      	movs	r4, #48	; 0x30
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1b3      	bne.n	80084c2 <_strtol_l.isra.0+0x5e>
 800855a:	2308      	movs	r3, #8
 800855c:	e7b1      	b.n	80084c2 <_strtol_l.isra.0+0x5e>
 800855e:	2c30      	cmp	r4, #48	; 0x30
 8008560:	d0a4      	beq.n	80084ac <_strtol_l.isra.0+0x48>
 8008562:	230a      	movs	r3, #10
 8008564:	e7ad      	b.n	80084c2 <_strtol_l.isra.0+0x5e>
 8008566:	bf00      	nop
 8008568:	0800bdfd 	.word	0x0800bdfd

0800856c <strtol>:
 800856c:	4613      	mov	r3, r2
 800856e:	460a      	mov	r2, r1
 8008570:	4601      	mov	r1, r0
 8008572:	4802      	ldr	r0, [pc, #8]	; (800857c <strtol+0x10>)
 8008574:	6800      	ldr	r0, [r0, #0]
 8008576:	f7ff bf75 	b.w	8008464 <_strtol_l.isra.0>
 800857a:	bf00      	nop
 800857c:	20000018 	.word	0x20000018

08008580 <__ssputs_r>:
 8008580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	688e      	ldr	r6, [r1, #8]
 8008586:	429e      	cmp	r6, r3
 8008588:	4682      	mov	sl, r0
 800858a:	460c      	mov	r4, r1
 800858c:	4690      	mov	r8, r2
 800858e:	461f      	mov	r7, r3
 8008590:	d838      	bhi.n	8008604 <__ssputs_r+0x84>
 8008592:	898a      	ldrh	r2, [r1, #12]
 8008594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008598:	d032      	beq.n	8008600 <__ssputs_r+0x80>
 800859a:	6825      	ldr	r5, [r4, #0]
 800859c:	6909      	ldr	r1, [r1, #16]
 800859e:	eba5 0901 	sub.w	r9, r5, r1
 80085a2:	6965      	ldr	r5, [r4, #20]
 80085a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ac:	3301      	adds	r3, #1
 80085ae:	444b      	add	r3, r9
 80085b0:	106d      	asrs	r5, r5, #1
 80085b2:	429d      	cmp	r5, r3
 80085b4:	bf38      	it	cc
 80085b6:	461d      	movcc	r5, r3
 80085b8:	0553      	lsls	r3, r2, #21
 80085ba:	d531      	bpl.n	8008620 <__ssputs_r+0xa0>
 80085bc:	4629      	mov	r1, r5
 80085be:	f000 fb47 	bl	8008c50 <_malloc_r>
 80085c2:	4606      	mov	r6, r0
 80085c4:	b950      	cbnz	r0, 80085dc <__ssputs_r+0x5c>
 80085c6:	230c      	movs	r3, #12
 80085c8:	f8ca 3000 	str.w	r3, [sl]
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085dc:	6921      	ldr	r1, [r4, #16]
 80085de:	464a      	mov	r2, r9
 80085e0:	f000 fabe 	bl	8008b60 <memcpy>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	6126      	str	r6, [r4, #16]
 80085f2:	6165      	str	r5, [r4, #20]
 80085f4:	444e      	add	r6, r9
 80085f6:	eba5 0509 	sub.w	r5, r5, r9
 80085fa:	6026      	str	r6, [r4, #0]
 80085fc:	60a5      	str	r5, [r4, #8]
 80085fe:	463e      	mov	r6, r7
 8008600:	42be      	cmp	r6, r7
 8008602:	d900      	bls.n	8008606 <__ssputs_r+0x86>
 8008604:	463e      	mov	r6, r7
 8008606:	4632      	mov	r2, r6
 8008608:	6820      	ldr	r0, [r4, #0]
 800860a:	4641      	mov	r1, r8
 800860c:	f000 fab6 	bl	8008b7c <memmove>
 8008610:	68a3      	ldr	r3, [r4, #8]
 8008612:	6822      	ldr	r2, [r4, #0]
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	4432      	add	r2, r6
 8008618:	60a3      	str	r3, [r4, #8]
 800861a:	6022      	str	r2, [r4, #0]
 800861c:	2000      	movs	r0, #0
 800861e:	e7db      	b.n	80085d8 <__ssputs_r+0x58>
 8008620:	462a      	mov	r2, r5
 8008622:	f000 fb6f 	bl	8008d04 <_realloc_r>
 8008626:	4606      	mov	r6, r0
 8008628:	2800      	cmp	r0, #0
 800862a:	d1e1      	bne.n	80085f0 <__ssputs_r+0x70>
 800862c:	6921      	ldr	r1, [r4, #16]
 800862e:	4650      	mov	r0, sl
 8008630:	f000 fabe 	bl	8008bb0 <_free_r>
 8008634:	e7c7      	b.n	80085c6 <__ssputs_r+0x46>
	...

08008638 <_svfiprintf_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4698      	mov	r8, r3
 800863e:	898b      	ldrh	r3, [r1, #12]
 8008640:	061b      	lsls	r3, r3, #24
 8008642:	b09d      	sub	sp, #116	; 0x74
 8008644:	4607      	mov	r7, r0
 8008646:	460d      	mov	r5, r1
 8008648:	4614      	mov	r4, r2
 800864a:	d50e      	bpl.n	800866a <_svfiprintf_r+0x32>
 800864c:	690b      	ldr	r3, [r1, #16]
 800864e:	b963      	cbnz	r3, 800866a <_svfiprintf_r+0x32>
 8008650:	2140      	movs	r1, #64	; 0x40
 8008652:	f000 fafd 	bl	8008c50 <_malloc_r>
 8008656:	6028      	str	r0, [r5, #0]
 8008658:	6128      	str	r0, [r5, #16]
 800865a:	b920      	cbnz	r0, 8008666 <_svfiprintf_r+0x2e>
 800865c:	230c      	movs	r3, #12
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e0d1      	b.n	800880a <_svfiprintf_r+0x1d2>
 8008666:	2340      	movs	r3, #64	; 0x40
 8008668:	616b      	str	r3, [r5, #20]
 800866a:	2300      	movs	r3, #0
 800866c:	9309      	str	r3, [sp, #36]	; 0x24
 800866e:	2320      	movs	r3, #32
 8008670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008674:	f8cd 800c 	str.w	r8, [sp, #12]
 8008678:	2330      	movs	r3, #48	; 0x30
 800867a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008824 <_svfiprintf_r+0x1ec>
 800867e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008682:	f04f 0901 	mov.w	r9, #1
 8008686:	4623      	mov	r3, r4
 8008688:	469a      	mov	sl, r3
 800868a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800868e:	b10a      	cbz	r2, 8008694 <_svfiprintf_r+0x5c>
 8008690:	2a25      	cmp	r2, #37	; 0x25
 8008692:	d1f9      	bne.n	8008688 <_svfiprintf_r+0x50>
 8008694:	ebba 0b04 	subs.w	fp, sl, r4
 8008698:	d00b      	beq.n	80086b2 <_svfiprintf_r+0x7a>
 800869a:	465b      	mov	r3, fp
 800869c:	4622      	mov	r2, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ff6d 	bl	8008580 <__ssputs_r>
 80086a6:	3001      	adds	r0, #1
 80086a8:	f000 80aa 	beq.w	8008800 <_svfiprintf_r+0x1c8>
 80086ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ae:	445a      	add	r2, fp
 80086b0:	9209      	str	r2, [sp, #36]	; 0x24
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80a2 	beq.w	8008800 <_svfiprintf_r+0x1c8>
 80086bc:	2300      	movs	r3, #0
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c6:	f10a 0a01 	add.w	sl, sl, #1
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	9307      	str	r3, [sp, #28]
 80086ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086d2:	931a      	str	r3, [sp, #104]	; 0x68
 80086d4:	4654      	mov	r4, sl
 80086d6:	2205      	movs	r2, #5
 80086d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086dc:	4851      	ldr	r0, [pc, #324]	; (8008824 <_svfiprintf_r+0x1ec>)
 80086de:	f7f7 fd7f 	bl	80001e0 <memchr>
 80086e2:	9a04      	ldr	r2, [sp, #16]
 80086e4:	b9d8      	cbnz	r0, 800871e <_svfiprintf_r+0xe6>
 80086e6:	06d0      	lsls	r0, r2, #27
 80086e8:	bf44      	itt	mi
 80086ea:	2320      	movmi	r3, #32
 80086ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f0:	0711      	lsls	r1, r2, #28
 80086f2:	bf44      	itt	mi
 80086f4:	232b      	movmi	r3, #43	; 0x2b
 80086f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086fa:	f89a 3000 	ldrb.w	r3, [sl]
 80086fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008700:	d015      	beq.n	800872e <_svfiprintf_r+0xf6>
 8008702:	9a07      	ldr	r2, [sp, #28]
 8008704:	4654      	mov	r4, sl
 8008706:	2000      	movs	r0, #0
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4621      	mov	r1, r4
 800870e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008712:	3b30      	subs	r3, #48	; 0x30
 8008714:	2b09      	cmp	r3, #9
 8008716:	d94e      	bls.n	80087b6 <_svfiprintf_r+0x17e>
 8008718:	b1b0      	cbz	r0, 8008748 <_svfiprintf_r+0x110>
 800871a:	9207      	str	r2, [sp, #28]
 800871c:	e014      	b.n	8008748 <_svfiprintf_r+0x110>
 800871e:	eba0 0308 	sub.w	r3, r0, r8
 8008722:	fa09 f303 	lsl.w	r3, r9, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	46a2      	mov	sl, r4
 800872c:	e7d2      	b.n	80086d4 <_svfiprintf_r+0x9c>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	1d19      	adds	r1, r3, #4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	9103      	str	r1, [sp, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	bfbb      	ittet	lt
 800873a:	425b      	neglt	r3, r3
 800873c:	f042 0202 	orrlt.w	r2, r2, #2
 8008740:	9307      	strge	r3, [sp, #28]
 8008742:	9307      	strlt	r3, [sp, #28]
 8008744:	bfb8      	it	lt
 8008746:	9204      	strlt	r2, [sp, #16]
 8008748:	7823      	ldrb	r3, [r4, #0]
 800874a:	2b2e      	cmp	r3, #46	; 0x2e
 800874c:	d10c      	bne.n	8008768 <_svfiprintf_r+0x130>
 800874e:	7863      	ldrb	r3, [r4, #1]
 8008750:	2b2a      	cmp	r3, #42	; 0x2a
 8008752:	d135      	bne.n	80087c0 <_svfiprintf_r+0x188>
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	1d1a      	adds	r2, r3, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	9203      	str	r2, [sp, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	bfb8      	it	lt
 8008760:	f04f 33ff 	movlt.w	r3, #4294967295
 8008764:	3402      	adds	r4, #2
 8008766:	9305      	str	r3, [sp, #20]
 8008768:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008834 <_svfiprintf_r+0x1fc>
 800876c:	7821      	ldrb	r1, [r4, #0]
 800876e:	2203      	movs	r2, #3
 8008770:	4650      	mov	r0, sl
 8008772:	f7f7 fd35 	bl	80001e0 <memchr>
 8008776:	b140      	cbz	r0, 800878a <_svfiprintf_r+0x152>
 8008778:	2340      	movs	r3, #64	; 0x40
 800877a:	eba0 000a 	sub.w	r0, r0, sl
 800877e:	fa03 f000 	lsl.w	r0, r3, r0
 8008782:	9b04      	ldr	r3, [sp, #16]
 8008784:	4303      	orrs	r3, r0
 8008786:	3401      	adds	r4, #1
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878e:	4826      	ldr	r0, [pc, #152]	; (8008828 <_svfiprintf_r+0x1f0>)
 8008790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008794:	2206      	movs	r2, #6
 8008796:	f7f7 fd23 	bl	80001e0 <memchr>
 800879a:	2800      	cmp	r0, #0
 800879c:	d038      	beq.n	8008810 <_svfiprintf_r+0x1d8>
 800879e:	4b23      	ldr	r3, [pc, #140]	; (800882c <_svfiprintf_r+0x1f4>)
 80087a0:	bb1b      	cbnz	r3, 80087ea <_svfiprintf_r+0x1b2>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	3307      	adds	r3, #7
 80087a6:	f023 0307 	bic.w	r3, r3, #7
 80087aa:	3308      	adds	r3, #8
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	4433      	add	r3, r6
 80087b2:	9309      	str	r3, [sp, #36]	; 0x24
 80087b4:	e767      	b.n	8008686 <_svfiprintf_r+0x4e>
 80087b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ba:	460c      	mov	r4, r1
 80087bc:	2001      	movs	r0, #1
 80087be:	e7a5      	b.n	800870c <_svfiprintf_r+0xd4>
 80087c0:	2300      	movs	r3, #0
 80087c2:	3401      	adds	r4, #1
 80087c4:	9305      	str	r3, [sp, #20]
 80087c6:	4619      	mov	r1, r3
 80087c8:	f04f 0c0a 	mov.w	ip, #10
 80087cc:	4620      	mov	r0, r4
 80087ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087d2:	3a30      	subs	r2, #48	; 0x30
 80087d4:	2a09      	cmp	r2, #9
 80087d6:	d903      	bls.n	80087e0 <_svfiprintf_r+0x1a8>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0c5      	beq.n	8008768 <_svfiprintf_r+0x130>
 80087dc:	9105      	str	r1, [sp, #20]
 80087de:	e7c3      	b.n	8008768 <_svfiprintf_r+0x130>
 80087e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80087e4:	4604      	mov	r4, r0
 80087e6:	2301      	movs	r3, #1
 80087e8:	e7f0      	b.n	80087cc <_svfiprintf_r+0x194>
 80087ea:	ab03      	add	r3, sp, #12
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	462a      	mov	r2, r5
 80087f0:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <_svfiprintf_r+0x1f8>)
 80087f2:	a904      	add	r1, sp, #16
 80087f4:	4638      	mov	r0, r7
 80087f6:	f3af 8000 	nop.w
 80087fa:	1c42      	adds	r2, r0, #1
 80087fc:	4606      	mov	r6, r0
 80087fe:	d1d6      	bne.n	80087ae <_svfiprintf_r+0x176>
 8008800:	89ab      	ldrh	r3, [r5, #12]
 8008802:	065b      	lsls	r3, r3, #25
 8008804:	f53f af2c 	bmi.w	8008660 <_svfiprintf_r+0x28>
 8008808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800880a:	b01d      	add	sp, #116	; 0x74
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	ab03      	add	r3, sp, #12
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	462a      	mov	r2, r5
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <_svfiprintf_r+0x1f8>)
 8008818:	a904      	add	r1, sp, #16
 800881a:	4638      	mov	r0, r7
 800881c:	f000 f87a 	bl	8008914 <_printf_i>
 8008820:	e7eb      	b.n	80087fa <_svfiprintf_r+0x1c2>
 8008822:	bf00      	nop
 8008824:	0800befd 	.word	0x0800befd
 8008828:	0800bf07 	.word	0x0800bf07
 800882c:	00000000 	.word	0x00000000
 8008830:	08008581 	.word	0x08008581
 8008834:	0800bf03 	.word	0x0800bf03

08008838 <_printf_common>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	4616      	mov	r6, r2
 800883e:	4699      	mov	r9, r3
 8008840:	688a      	ldr	r2, [r1, #8]
 8008842:	690b      	ldr	r3, [r1, #16]
 8008844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008848:	4293      	cmp	r3, r2
 800884a:	bfb8      	it	lt
 800884c:	4613      	movlt	r3, r2
 800884e:	6033      	str	r3, [r6, #0]
 8008850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008854:	4607      	mov	r7, r0
 8008856:	460c      	mov	r4, r1
 8008858:	b10a      	cbz	r2, 800885e <_printf_common+0x26>
 800885a:	3301      	adds	r3, #1
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	0699      	lsls	r1, r3, #26
 8008862:	bf42      	ittt	mi
 8008864:	6833      	ldrmi	r3, [r6, #0]
 8008866:	3302      	addmi	r3, #2
 8008868:	6033      	strmi	r3, [r6, #0]
 800886a:	6825      	ldr	r5, [r4, #0]
 800886c:	f015 0506 	ands.w	r5, r5, #6
 8008870:	d106      	bne.n	8008880 <_printf_common+0x48>
 8008872:	f104 0a19 	add.w	sl, r4, #25
 8008876:	68e3      	ldr	r3, [r4, #12]
 8008878:	6832      	ldr	r2, [r6, #0]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	42ab      	cmp	r3, r5
 800887e:	dc26      	bgt.n	80088ce <_printf_common+0x96>
 8008880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008884:	1e13      	subs	r3, r2, #0
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	bf18      	it	ne
 800888a:	2301      	movne	r3, #1
 800888c:	0692      	lsls	r2, r2, #26
 800888e:	d42b      	bmi.n	80088e8 <_printf_common+0xb0>
 8008890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d01e      	beq.n	80088dc <_printf_common+0xa4>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	68e5      	ldr	r5, [r4, #12]
 80088a2:	6832      	ldr	r2, [r6, #0]
 80088a4:	f003 0306 	and.w	r3, r3, #6
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	bf08      	it	eq
 80088ac:	1aad      	subeq	r5, r5, r2
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	6922      	ldr	r2, [r4, #16]
 80088b2:	bf0c      	ite	eq
 80088b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088b8:	2500      	movne	r5, #0
 80088ba:	4293      	cmp	r3, r2
 80088bc:	bfc4      	itt	gt
 80088be:	1a9b      	subgt	r3, r3, r2
 80088c0:	18ed      	addgt	r5, r5, r3
 80088c2:	2600      	movs	r6, #0
 80088c4:	341a      	adds	r4, #26
 80088c6:	42b5      	cmp	r5, r6
 80088c8:	d11a      	bne.n	8008900 <_printf_common+0xc8>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e008      	b.n	80088e0 <_printf_common+0xa8>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4652      	mov	r2, sl
 80088d2:	4649      	mov	r1, r9
 80088d4:	4638      	mov	r0, r7
 80088d6:	47c0      	blx	r8
 80088d8:	3001      	adds	r0, #1
 80088da:	d103      	bne.n	80088e4 <_printf_common+0xac>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	3501      	adds	r5, #1
 80088e6:	e7c6      	b.n	8008876 <_printf_common+0x3e>
 80088e8:	18e1      	adds	r1, r4, r3
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	2030      	movs	r0, #48	; 0x30
 80088ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088f2:	4422      	add	r2, r4
 80088f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088fc:	3302      	adds	r3, #2
 80088fe:	e7c7      	b.n	8008890 <_printf_common+0x58>
 8008900:	2301      	movs	r3, #1
 8008902:	4622      	mov	r2, r4
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d0e6      	beq.n	80088dc <_printf_common+0xa4>
 800890e:	3601      	adds	r6, #1
 8008910:	e7d9      	b.n	80088c6 <_printf_common+0x8e>
	...

08008914 <_printf_i>:
 8008914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	460c      	mov	r4, r1
 800891a:	4691      	mov	r9, r2
 800891c:	7e27      	ldrb	r7, [r4, #24]
 800891e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008920:	2f78      	cmp	r7, #120	; 0x78
 8008922:	4680      	mov	r8, r0
 8008924:	469a      	mov	sl, r3
 8008926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800892a:	d807      	bhi.n	800893c <_printf_i+0x28>
 800892c:	2f62      	cmp	r7, #98	; 0x62
 800892e:	d80a      	bhi.n	8008946 <_printf_i+0x32>
 8008930:	2f00      	cmp	r7, #0
 8008932:	f000 80d8 	beq.w	8008ae6 <_printf_i+0x1d2>
 8008936:	2f58      	cmp	r7, #88	; 0x58
 8008938:	f000 80a3 	beq.w	8008a82 <_printf_i+0x16e>
 800893c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008944:	e03a      	b.n	80089bc <_printf_i+0xa8>
 8008946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800894a:	2b15      	cmp	r3, #21
 800894c:	d8f6      	bhi.n	800893c <_printf_i+0x28>
 800894e:	a001      	add	r0, pc, #4	; (adr r0, 8008954 <_printf_i+0x40>)
 8008950:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089c1 	.word	0x080089c1
 800895c:	0800893d 	.word	0x0800893d
 8008960:	0800893d 	.word	0x0800893d
 8008964:	0800893d 	.word	0x0800893d
 8008968:	0800893d 	.word	0x0800893d
 800896c:	080089c1 	.word	0x080089c1
 8008970:	0800893d 	.word	0x0800893d
 8008974:	0800893d 	.word	0x0800893d
 8008978:	0800893d 	.word	0x0800893d
 800897c:	0800893d 	.word	0x0800893d
 8008980:	08008acd 	.word	0x08008acd
 8008984:	080089f1 	.word	0x080089f1
 8008988:	08008aaf 	.word	0x08008aaf
 800898c:	0800893d 	.word	0x0800893d
 8008990:	0800893d 	.word	0x0800893d
 8008994:	08008aef 	.word	0x08008aef
 8008998:	0800893d 	.word	0x0800893d
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	0800893d 	.word	0x0800893d
 80089a4:	0800893d 	.word	0x0800893d
 80089a8:	08008ab7 	.word	0x08008ab7
 80089ac:	680b      	ldr	r3, [r1, #0]
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	600a      	str	r2, [r1, #0]
 80089b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089bc:	2301      	movs	r3, #1
 80089be:	e0a3      	b.n	8008b08 <_printf_i+0x1f4>
 80089c0:	6825      	ldr	r5, [r4, #0]
 80089c2:	6808      	ldr	r0, [r1, #0]
 80089c4:	062e      	lsls	r6, r5, #24
 80089c6:	f100 0304 	add.w	r3, r0, #4
 80089ca:	d50a      	bpl.n	80089e2 <_printf_i+0xce>
 80089cc:	6805      	ldr	r5, [r0, #0]
 80089ce:	600b      	str	r3, [r1, #0]
 80089d0:	2d00      	cmp	r5, #0
 80089d2:	da03      	bge.n	80089dc <_printf_i+0xc8>
 80089d4:	232d      	movs	r3, #45	; 0x2d
 80089d6:	426d      	negs	r5, r5
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089dc:	485e      	ldr	r0, [pc, #376]	; (8008b58 <_printf_i+0x244>)
 80089de:	230a      	movs	r3, #10
 80089e0:	e019      	b.n	8008a16 <_printf_i+0x102>
 80089e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089e6:	6805      	ldr	r5, [r0, #0]
 80089e8:	600b      	str	r3, [r1, #0]
 80089ea:	bf18      	it	ne
 80089ec:	b22d      	sxthne	r5, r5
 80089ee:	e7ef      	b.n	80089d0 <_printf_i+0xbc>
 80089f0:	680b      	ldr	r3, [r1, #0]
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	1d18      	adds	r0, r3, #4
 80089f6:	6008      	str	r0, [r1, #0]
 80089f8:	0628      	lsls	r0, r5, #24
 80089fa:	d501      	bpl.n	8008a00 <_printf_i+0xec>
 80089fc:	681d      	ldr	r5, [r3, #0]
 80089fe:	e002      	b.n	8008a06 <_printf_i+0xf2>
 8008a00:	0669      	lsls	r1, r5, #25
 8008a02:	d5fb      	bpl.n	80089fc <_printf_i+0xe8>
 8008a04:	881d      	ldrh	r5, [r3, #0]
 8008a06:	4854      	ldr	r0, [pc, #336]	; (8008b58 <_printf_i+0x244>)
 8008a08:	2f6f      	cmp	r7, #111	; 0x6f
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2308      	moveq	r3, #8
 8008a0e:	230a      	movne	r3, #10
 8008a10:	2100      	movs	r1, #0
 8008a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a16:	6866      	ldr	r6, [r4, #4]
 8008a18:	60a6      	str	r6, [r4, #8]
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	bfa2      	ittt	ge
 8008a1e:	6821      	ldrge	r1, [r4, #0]
 8008a20:	f021 0104 	bicge.w	r1, r1, #4
 8008a24:	6021      	strge	r1, [r4, #0]
 8008a26:	b90d      	cbnz	r5, 8008a2c <_printf_i+0x118>
 8008a28:	2e00      	cmp	r6, #0
 8008a2a:	d04d      	beq.n	8008ac8 <_printf_i+0x1b4>
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a32:	fb03 5711 	mls	r7, r3, r1, r5
 8008a36:	5dc7      	ldrb	r7, [r0, r7]
 8008a38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a3c:	462f      	mov	r7, r5
 8008a3e:	42bb      	cmp	r3, r7
 8008a40:	460d      	mov	r5, r1
 8008a42:	d9f4      	bls.n	8008a2e <_printf_i+0x11a>
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d10b      	bne.n	8008a60 <_printf_i+0x14c>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07df      	lsls	r7, r3, #31
 8008a4c:	d508      	bpl.n	8008a60 <_printf_i+0x14c>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	4299      	cmp	r1, r3
 8008a54:	bfde      	ittt	le
 8008a56:	2330      	movle	r3, #48	; 0x30
 8008a58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a60:	1b92      	subs	r2, r2, r6
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	f8cd a000 	str.w	sl, [sp]
 8008a68:	464b      	mov	r3, r9
 8008a6a:	aa03      	add	r2, sp, #12
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7ff fee2 	bl	8008838 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	d14c      	bne.n	8008b12 <_printf_i+0x1fe>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	b004      	add	sp, #16
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	4835      	ldr	r0, [pc, #212]	; (8008b58 <_printf_i+0x244>)
 8008a84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	680e      	ldr	r6, [r1, #0]
 8008a8c:	061f      	lsls	r7, r3, #24
 8008a8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a92:	600e      	str	r6, [r1, #0]
 8008a94:	d514      	bpl.n	8008ac0 <_printf_i+0x1ac>
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	bf44      	itt	mi
 8008a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a9e:	6023      	strmi	r3, [r4, #0]
 8008aa0:	b91d      	cbnz	r5, 8008aaa <_printf_i+0x196>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f023 0320 	bic.w	r3, r3, #32
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	2310      	movs	r3, #16
 8008aac:	e7b0      	b.n	8008a10 <_printf_i+0xfc>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	f043 0320 	orr.w	r3, r3, #32
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	2378      	movs	r3, #120	; 0x78
 8008ab8:	4828      	ldr	r0, [pc, #160]	; (8008b5c <_printf_i+0x248>)
 8008aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008abe:	e7e3      	b.n	8008a88 <_printf_i+0x174>
 8008ac0:	065e      	lsls	r6, r3, #25
 8008ac2:	bf48      	it	mi
 8008ac4:	b2ad      	uxthmi	r5, r5
 8008ac6:	e7e6      	b.n	8008a96 <_printf_i+0x182>
 8008ac8:	4616      	mov	r6, r2
 8008aca:	e7bb      	b.n	8008a44 <_printf_i+0x130>
 8008acc:	680b      	ldr	r3, [r1, #0]
 8008ace:	6826      	ldr	r6, [r4, #0]
 8008ad0:	6960      	ldr	r0, [r4, #20]
 8008ad2:	1d1d      	adds	r5, r3, #4
 8008ad4:	600d      	str	r5, [r1, #0]
 8008ad6:	0635      	lsls	r5, r6, #24
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	d501      	bpl.n	8008ae0 <_printf_i+0x1cc>
 8008adc:	6018      	str	r0, [r3, #0]
 8008ade:	e002      	b.n	8008ae6 <_printf_i+0x1d2>
 8008ae0:	0671      	lsls	r1, r6, #25
 8008ae2:	d5fb      	bpl.n	8008adc <_printf_i+0x1c8>
 8008ae4:	8018      	strh	r0, [r3, #0]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	4616      	mov	r6, r2
 8008aec:	e7ba      	b.n	8008a64 <_printf_i+0x150>
 8008aee:	680b      	ldr	r3, [r1, #0]
 8008af0:	1d1a      	adds	r2, r3, #4
 8008af2:	600a      	str	r2, [r1, #0]
 8008af4:	681e      	ldr	r6, [r3, #0]
 8008af6:	6862      	ldr	r2, [r4, #4]
 8008af8:	2100      	movs	r1, #0
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7f7 fb70 	bl	80001e0 <memchr>
 8008b00:	b108      	cbz	r0, 8008b06 <_printf_i+0x1f2>
 8008b02:	1b80      	subs	r0, r0, r6
 8008b04:	6060      	str	r0, [r4, #4]
 8008b06:	6863      	ldr	r3, [r4, #4]
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b10:	e7a8      	b.n	8008a64 <_printf_i+0x150>
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	4632      	mov	r2, r6
 8008b16:	4649      	mov	r1, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	47d0      	blx	sl
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d0ab      	beq.n	8008a78 <_printf_i+0x164>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	079b      	lsls	r3, r3, #30
 8008b24:	d413      	bmi.n	8008b4e <_printf_i+0x23a>
 8008b26:	68e0      	ldr	r0, [r4, #12]
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	4298      	cmp	r0, r3
 8008b2c:	bfb8      	it	lt
 8008b2e:	4618      	movlt	r0, r3
 8008b30:	e7a4      	b.n	8008a7c <_printf_i+0x168>
 8008b32:	2301      	movs	r3, #1
 8008b34:	4632      	mov	r2, r6
 8008b36:	4649      	mov	r1, r9
 8008b38:	4640      	mov	r0, r8
 8008b3a:	47d0      	blx	sl
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d09b      	beq.n	8008a78 <_printf_i+0x164>
 8008b40:	3501      	adds	r5, #1
 8008b42:	68e3      	ldr	r3, [r4, #12]
 8008b44:	9903      	ldr	r1, [sp, #12]
 8008b46:	1a5b      	subs	r3, r3, r1
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dcf2      	bgt.n	8008b32 <_printf_i+0x21e>
 8008b4c:	e7eb      	b.n	8008b26 <_printf_i+0x212>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	f104 0619 	add.w	r6, r4, #25
 8008b54:	e7f5      	b.n	8008b42 <_printf_i+0x22e>
 8008b56:	bf00      	nop
 8008b58:	0800bf0e 	.word	0x0800bf0e
 8008b5c:	0800bf1f 	.word	0x0800bf1f

08008b60 <memcpy>:
 8008b60:	440a      	add	r2, r1
 8008b62:	4291      	cmp	r1, r2
 8008b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b68:	d100      	bne.n	8008b6c <memcpy+0xc>
 8008b6a:	4770      	bx	lr
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b76:	4291      	cmp	r1, r2
 8008b78:	d1f9      	bne.n	8008b6e <memcpy+0xe>
 8008b7a:	bd10      	pop	{r4, pc}

08008b7c <memmove>:
 8008b7c:	4288      	cmp	r0, r1
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	eb01 0402 	add.w	r4, r1, r2
 8008b84:	d902      	bls.n	8008b8c <memmove+0x10>
 8008b86:	4284      	cmp	r4, r0
 8008b88:	4623      	mov	r3, r4
 8008b8a:	d807      	bhi.n	8008b9c <memmove+0x20>
 8008b8c:	1e43      	subs	r3, r0, #1
 8008b8e:	42a1      	cmp	r1, r4
 8008b90:	d008      	beq.n	8008ba4 <memmove+0x28>
 8008b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b9a:	e7f8      	b.n	8008b8e <memmove+0x12>
 8008b9c:	4402      	add	r2, r0
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	d100      	bne.n	8008ba6 <memmove+0x2a>
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bae:	e7f7      	b.n	8008ba0 <memmove+0x24>

08008bb0 <_free_r>:
 8008bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	d048      	beq.n	8008c48 <_free_r+0x98>
 8008bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bba:	9001      	str	r0, [sp, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008bc2:	bfb8      	it	lt
 8008bc4:	18e4      	addlt	r4, r4, r3
 8008bc6:	f000 f8d3 	bl	8008d70 <__malloc_lock>
 8008bca:	4a20      	ldr	r2, [pc, #128]	; (8008c4c <_free_r+0x9c>)
 8008bcc:	9801      	ldr	r0, [sp, #4]
 8008bce:	6813      	ldr	r3, [r2, #0]
 8008bd0:	4615      	mov	r5, r2
 8008bd2:	b933      	cbnz	r3, 8008be2 <_free_r+0x32>
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	6014      	str	r4, [r2, #0]
 8008bd8:	b003      	add	sp, #12
 8008bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bde:	f000 b8cd 	b.w	8008d7c <__malloc_unlock>
 8008be2:	42a3      	cmp	r3, r4
 8008be4:	d90b      	bls.n	8008bfe <_free_r+0x4e>
 8008be6:	6821      	ldr	r1, [r4, #0]
 8008be8:	1862      	adds	r2, r4, r1
 8008bea:	4293      	cmp	r3, r2
 8008bec:	bf04      	itt	eq
 8008bee:	681a      	ldreq	r2, [r3, #0]
 8008bf0:	685b      	ldreq	r3, [r3, #4]
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	bf04      	itt	eq
 8008bf6:	1852      	addeq	r2, r2, r1
 8008bf8:	6022      	streq	r2, [r4, #0]
 8008bfa:	602c      	str	r4, [r5, #0]
 8008bfc:	e7ec      	b.n	8008bd8 <_free_r+0x28>
 8008bfe:	461a      	mov	r2, r3
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	b10b      	cbz	r3, 8008c08 <_free_r+0x58>
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d9fa      	bls.n	8008bfe <_free_r+0x4e>
 8008c08:	6811      	ldr	r1, [r2, #0]
 8008c0a:	1855      	adds	r5, r2, r1
 8008c0c:	42a5      	cmp	r5, r4
 8008c0e:	d10b      	bne.n	8008c28 <_free_r+0x78>
 8008c10:	6824      	ldr	r4, [r4, #0]
 8008c12:	4421      	add	r1, r4
 8008c14:	1854      	adds	r4, r2, r1
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	6011      	str	r1, [r2, #0]
 8008c1a:	d1dd      	bne.n	8008bd8 <_free_r+0x28>
 8008c1c:	681c      	ldr	r4, [r3, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	6053      	str	r3, [r2, #4]
 8008c22:	4421      	add	r1, r4
 8008c24:	6011      	str	r1, [r2, #0]
 8008c26:	e7d7      	b.n	8008bd8 <_free_r+0x28>
 8008c28:	d902      	bls.n	8008c30 <_free_r+0x80>
 8008c2a:	230c      	movs	r3, #12
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	e7d3      	b.n	8008bd8 <_free_r+0x28>
 8008c30:	6825      	ldr	r5, [r4, #0]
 8008c32:	1961      	adds	r1, r4, r5
 8008c34:	428b      	cmp	r3, r1
 8008c36:	bf04      	itt	eq
 8008c38:	6819      	ldreq	r1, [r3, #0]
 8008c3a:	685b      	ldreq	r3, [r3, #4]
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	bf04      	itt	eq
 8008c40:	1949      	addeq	r1, r1, r5
 8008c42:	6021      	streq	r1, [r4, #0]
 8008c44:	6054      	str	r4, [r2, #4]
 8008c46:	e7c7      	b.n	8008bd8 <_free_r+0x28>
 8008c48:	b003      	add	sp, #12
 8008c4a:	bd30      	pop	{r4, r5, pc}
 8008c4c:	200000d0 	.word	0x200000d0

08008c50 <_malloc_r>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	1ccd      	adds	r5, r1, #3
 8008c54:	f025 0503 	bic.w	r5, r5, #3
 8008c58:	3508      	adds	r5, #8
 8008c5a:	2d0c      	cmp	r5, #12
 8008c5c:	bf38      	it	cc
 8008c5e:	250c      	movcc	r5, #12
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	4606      	mov	r6, r0
 8008c64:	db01      	blt.n	8008c6a <_malloc_r+0x1a>
 8008c66:	42a9      	cmp	r1, r5
 8008c68:	d903      	bls.n	8008c72 <_malloc_r+0x22>
 8008c6a:	230c      	movs	r3, #12
 8008c6c:	6033      	str	r3, [r6, #0]
 8008c6e:	2000      	movs	r0, #0
 8008c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c72:	f000 f87d 	bl	8008d70 <__malloc_lock>
 8008c76:	4921      	ldr	r1, [pc, #132]	; (8008cfc <_malloc_r+0xac>)
 8008c78:	680a      	ldr	r2, [r1, #0]
 8008c7a:	4614      	mov	r4, r2
 8008c7c:	b99c      	cbnz	r4, 8008ca6 <_malloc_r+0x56>
 8008c7e:	4f20      	ldr	r7, [pc, #128]	; (8008d00 <_malloc_r+0xb0>)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	b923      	cbnz	r3, 8008c8e <_malloc_r+0x3e>
 8008c84:	4621      	mov	r1, r4
 8008c86:	4630      	mov	r0, r6
 8008c88:	f000 f862 	bl	8008d50 <_sbrk_r>
 8008c8c:	6038      	str	r0, [r7, #0]
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4630      	mov	r0, r6
 8008c92:	f000 f85d 	bl	8008d50 <_sbrk_r>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	d123      	bne.n	8008ce2 <_malloc_r+0x92>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	6033      	str	r3, [r6, #0]
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	f000 f86c 	bl	8008d7c <__malloc_unlock>
 8008ca4:	e7e3      	b.n	8008c6e <_malloc_r+0x1e>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	1b5b      	subs	r3, r3, r5
 8008caa:	d417      	bmi.n	8008cdc <_malloc_r+0x8c>
 8008cac:	2b0b      	cmp	r3, #11
 8008cae:	d903      	bls.n	8008cb8 <_malloc_r+0x68>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	441c      	add	r4, r3
 8008cb4:	6025      	str	r5, [r4, #0]
 8008cb6:	e004      	b.n	8008cc2 <_malloc_r+0x72>
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	42a2      	cmp	r2, r4
 8008cbc:	bf0c      	ite	eq
 8008cbe:	600b      	streq	r3, [r1, #0]
 8008cc0:	6053      	strne	r3, [r2, #4]
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f000 f85a 	bl	8008d7c <__malloc_unlock>
 8008cc8:	f104 000b 	add.w	r0, r4, #11
 8008ccc:	1d23      	adds	r3, r4, #4
 8008cce:	f020 0007 	bic.w	r0, r0, #7
 8008cd2:	1ac2      	subs	r2, r0, r3
 8008cd4:	d0cc      	beq.n	8008c70 <_malloc_r+0x20>
 8008cd6:	1a1b      	subs	r3, r3, r0
 8008cd8:	50a3      	str	r3, [r4, r2]
 8008cda:	e7c9      	b.n	8008c70 <_malloc_r+0x20>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	6864      	ldr	r4, [r4, #4]
 8008ce0:	e7cc      	b.n	8008c7c <_malloc_r+0x2c>
 8008ce2:	1cc4      	adds	r4, r0, #3
 8008ce4:	f024 0403 	bic.w	r4, r4, #3
 8008ce8:	42a0      	cmp	r0, r4
 8008cea:	d0e3      	beq.n	8008cb4 <_malloc_r+0x64>
 8008cec:	1a21      	subs	r1, r4, r0
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f000 f82e 	bl	8008d50 <_sbrk_r>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d1dd      	bne.n	8008cb4 <_malloc_r+0x64>
 8008cf8:	e7cf      	b.n	8008c9a <_malloc_r+0x4a>
 8008cfa:	bf00      	nop
 8008cfc:	200000d0 	.word	0x200000d0
 8008d00:	200000d4 	.word	0x200000d4

08008d04 <_realloc_r>:
 8008d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d06:	4607      	mov	r7, r0
 8008d08:	4614      	mov	r4, r2
 8008d0a:	460e      	mov	r6, r1
 8008d0c:	b921      	cbnz	r1, 8008d18 <_realloc_r+0x14>
 8008d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d12:	4611      	mov	r1, r2
 8008d14:	f7ff bf9c 	b.w	8008c50 <_malloc_r>
 8008d18:	b922      	cbnz	r2, 8008d24 <_realloc_r+0x20>
 8008d1a:	f7ff ff49 	bl	8008bb0 <_free_r>
 8008d1e:	4625      	mov	r5, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d24:	f000 f830 	bl	8008d88 <_malloc_usable_size_r>
 8008d28:	42a0      	cmp	r0, r4
 8008d2a:	d20f      	bcs.n	8008d4c <_realloc_r+0x48>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ff8e 	bl	8008c50 <_malloc_r>
 8008d34:	4605      	mov	r5, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d0f2      	beq.n	8008d20 <_realloc_r+0x1c>
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4622      	mov	r2, r4
 8008d3e:	f7ff ff0f 	bl	8008b60 <memcpy>
 8008d42:	4631      	mov	r1, r6
 8008d44:	4638      	mov	r0, r7
 8008d46:	f7ff ff33 	bl	8008bb0 <_free_r>
 8008d4a:	e7e9      	b.n	8008d20 <_realloc_r+0x1c>
 8008d4c:	4635      	mov	r5, r6
 8008d4e:	e7e7      	b.n	8008d20 <_realloc_r+0x1c>

08008d50 <_sbrk_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d06      	ldr	r5, [pc, #24]	; (8008d6c <_sbrk_r+0x1c>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	f7fa fcd0 	bl	8003700 <_sbrk>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_sbrk_r+0x1a>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_sbrk_r+0x1a>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	20000398 	.word	0x20000398

08008d70 <__malloc_lock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__malloc_lock+0x8>)
 8008d72:	f000 b811 	b.w	8008d98 <__retarget_lock_acquire_recursive>
 8008d76:	bf00      	nop
 8008d78:	200003a0 	.word	0x200003a0

08008d7c <__malloc_unlock>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__malloc_unlock+0x8>)
 8008d7e:	f000 b80c 	b.w	8008d9a <__retarget_lock_release_recursive>
 8008d82:	bf00      	nop
 8008d84:	200003a0 	.word	0x200003a0

08008d88 <_malloc_usable_size_r>:
 8008d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8c:	1f18      	subs	r0, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	bfbc      	itt	lt
 8008d92:	580b      	ldrlt	r3, [r1, r0]
 8008d94:	18c0      	addlt	r0, r0, r3
 8008d96:	4770      	bx	lr

08008d98 <__retarget_lock_acquire_recursive>:
 8008d98:	4770      	bx	lr

08008d9a <__retarget_lock_release_recursive>:
 8008d9a:	4770      	bx	lr

08008d9c <_init>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr

08008da8 <_fini>:
 8008da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008daa:	bf00      	nop
 8008dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dae:	bc08      	pop	{r3}
 8008db0:	469e      	mov	lr, r3
 8008db2:	4770      	bx	lr
