
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031ac  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf0c  0800bf0c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf0c  0800bf0c  0001bf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf14  0800bf14  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf14  0800bf14  0001bf14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf18  0800bf18  0001bf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800bf1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000324  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee7e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000414d  00000000  00000000  0003ef2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00043078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  00044628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d98  00000000  00000000  00045ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da40  00000000  00000000  0006a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3867  00000000  00000000  000882c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bb27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d20  00000000  00000000  0015bb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d48 	.word	0x08008d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08008d48 	.word	0x08008d48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <display_time_alarm>:
uint8_t alarm_date = 0;
uint8_t alarm_day= 0;
uint8_t counter_alarm = 0;
uint8_t alarm_flag = 0;

void display_time_alarm(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <display_time_alarm+0xe4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b29a      	uxth	r2, r3
 8000584:	2318      	movs	r3, #24
 8000586:	9302      	str	r3, [sp, #8]
 8000588:	2300      	movs	r3, #0
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2302      	movs	r3, #2
 8000594:	2164      	movs	r1, #100	; 0x64
 8000596:	2046      	movs	r0, #70	; 0x46
 8000598:	f002 f8ee 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <display_time_alarm+0xe8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2318      	movs	r3, #24
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2300      	movs	r3, #0
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2302      	movs	r3, #2
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	206e      	movs	r0, #110	; 0x6e
 80005b6:	f002 f8df 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <display_time_alarm+0xec>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2318      	movs	r3, #24
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	2300      	movs	r3, #0
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2302      	movs	r3, #2
 80005d0:	2164      	movs	r1, #100	; 0x64
 80005d2:	2096      	movs	r0, #150	; 0x96
 80005d4:	f002 f8d0 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <display_time_alarm+0xf0>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	2318      	movs	r3, #24
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	2300      	movs	r3, #0
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2302      	movs	r3, #2
 80005f2:	2182      	movs	r1, #130	; 0x82
 80005f4:	2014      	movs	r0, #20
 80005f6:	f002 f8bf 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <display_time_alarm+0xf4>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2318      	movs	r3, #24
 8000602:	9302      	str	r3, [sp, #8]
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2302      	movs	r3, #2
 8000610:	2182      	movs	r1, #130	; 0x82
 8000612:	2046      	movs	r0, #70	; 0x46
 8000614:	f002 f8b0 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <display_time_alarm+0xf8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29a      	uxth	r2, r3
 800061e:	2318      	movs	r3, #24
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2302      	movs	r3, #2
 800062e:	2182      	movs	r1, #130	; 0x82
 8000630:	206e      	movs	r0, #110	; 0x6e
 8000632:	f002 f8a1 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <display_time_alarm+0xfc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29a      	uxth	r2, r3
 800063c:	2318      	movs	r3, #24
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2300      	movs	r3, #0
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2302      	movs	r3, #2
 800064c:	2182      	movs	r1, #130	; 0x82
 800064e:	2096      	movs	r0, #150	; 0x96
 8000650:	f002 f892 	bl	8002778 <lcd_ShowIntNum>
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098
 8000660:	20000099 	.word	0x20000099
 8000664:	2000009a 	.word	0x2000009a
 8000668:	2000009e 	.word	0x2000009e
 800066c:	2000009d 	.word	0x2000009d
 8000670:	2000009c 	.word	0x2000009c
 8000674:	2000009b 	.word	0x2000009b

08000678 <take_current_time_for_alarm>:

void take_current_time_for_alarm(){
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	alarm_hours = ds3231_hours;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <take_current_time_for_alarm+0x48>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <take_current_time_for_alarm+0x4c>)
 8000682:	701a      	strb	r2, [r3, #0]
	alarm_min = ds3231_min;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <take_current_time_for_alarm+0x50>)
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <take_current_time_for_alarm+0x54>)
 800068a:	701a      	strb	r2, [r3, #0]
	alarm_sec = ds3231_sec;
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <take_current_time_for_alarm+0x58>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <take_current_time_for_alarm+0x5c>)
 8000692:	701a      	strb	r2, [r3, #0]
	alarm_year = ds3231_year;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <take_current_time_for_alarm+0x60>)
 8000696:	781a      	ldrb	r2, [r3, #0]
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <take_current_time_for_alarm+0x64>)
 800069a:	701a      	strb	r2, [r3, #0]
	alarm_month = ds3231_month;
 800069c:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <take_current_time_for_alarm+0x68>)
 800069e:	781a      	ldrb	r2, [r3, #0]
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <take_current_time_for_alarm+0x6c>)
 80006a2:	701a      	strb	r2, [r3, #0]
	alarm_date = ds3231_date;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <take_current_time_for_alarm+0x70>)
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <take_current_time_for_alarm+0x74>)
 80006aa:	701a      	strb	r2, [r3, #0]
	alarm_day= ds3231_day;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <take_current_time_for_alarm+0x78>)
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <take_current_time_for_alarm+0x7c>)
 80006b2:	701a      	strb	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200000f5 	.word	0x200000f5
 80006c4:	20000098 	.word	0x20000098
 80006c8:	200000f2 	.word	0x200000f2
 80006cc:	20000099 	.word	0x20000099
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	2000009a 	.word	0x2000009a
 80006d8:	200000f1 	.word	0x200000f1
 80006dc:	2000009b 	.word	0x2000009b
 80006e0:	200000f6 	.word	0x200000f6
 80006e4:	2000009c 	.word	0x2000009c
 80006e8:	200000f3 	.word	0x200000f3
 80006ec:	2000009d 	.word	0x2000009d
 80006f0:	200000f4 	.word	0x200000f4
 80006f4:	2000009e 	.word	0x2000009e

080006f8 <alarm_clock>:
void alarm_clock(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af04      	add	r7, sp, #16
	counter_modify_clock = (counter_modify_clock+1)%10;
 80006fe:	4ba3      	ldr	r3, [pc, #652]	; (800098c <alarm_clock+0x294>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	4ba2      	ldr	r3, [pc, #648]	; (8000990 <alarm_clock+0x298>)
 8000706:	fb83 1302 	smull	r1, r3, r3, r2
 800070a:	1099      	asrs	r1, r3, #2
 800070c:	17d3      	asrs	r3, r2, #31
 800070e:	1ac9      	subs	r1, r1, r3
 8000710:	460b      	mov	r3, r1
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	440b      	add	r3, r1
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	1ad1      	subs	r1, r2, r3
 800071a:	b28a      	uxth	r2, r1
 800071c:	4b9b      	ldr	r3, [pc, #620]	; (800098c <alarm_clock+0x294>)
 800071e:	801a      	strh	r2, [r3, #0]
	switch(state_modify_clock){
 8000720:	4b9c      	ldr	r3, [pc, #624]	; (8000994 <alarm_clock+0x29c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	2b06      	cmp	r3, #6
 8000726:	f200 844b 	bhi.w	8000fc0 <alarm_clock+0x8c8>
 800072a:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <alarm_clock+0x38>)
 800072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000730:	080009b5 	.word	0x080009b5
 8000734:	08000ab9 	.word	0x08000ab9
 8000738:	08000bc1 	.word	0x08000bc1
 800073c:	08000eed 	.word	0x08000eed
 8000740:	08000dd1 	.word	0x08000dd1
 8000744:	0800074d 	.word	0x0800074d
 8000748:	08000ce9 	.word	0x08000ce9
	case MODIFY_DATE:
		if (counter_modify_clock == 0){
 800074c:	4b8f      	ldr	r3, [pc, #572]	; (800098c <alarm_clock+0x294>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10f      	bne.n	8000774 <alarm_clock+0x7c>
			lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 8000754:	4b90      	ldr	r3, [pc, #576]	; (8000998 <alarm_clock+0x2a0>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b29a      	uxth	r2, r3
 800075a:	2318      	movs	r3, #24
 800075c:	9302      	str	r3, [sp, #8]
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	2182      	movs	r1, #130	; 0x82
 800076c:	2046      	movs	r0, #70	; 0x46
 800076e:	f002 f803 	bl	8002778 <lcd_ShowIntNum>
 8000772:	e011      	b.n	8000798 <alarm_clock+0xa0>
		}
		else if (counter_modify_clock == 5){
 8000774:	4b85      	ldr	r3, [pc, #532]	; (800098c <alarm_clock+0x294>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	2b05      	cmp	r3, #5
 800077a:	d10d      	bne.n	8000798 <alarm_clock+0xa0>
			lcd_ShowIntNum(70, 130, alarm_date, 2, BLACK, BLACK, 24);
 800077c:	4b86      	ldr	r3, [pc, #536]	; (8000998 <alarm_clock+0x2a0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	2318      	movs	r3, #24
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2300      	movs	r3, #0
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2300      	movs	r3, #0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	2182      	movs	r1, #130	; 0x82
 8000792:	2046      	movs	r0, #70	; 0x46
 8000794:	f001 fff0 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000798:	4b80      	ldr	r3, [pc, #512]	; (800099c <alarm_clock+0x2a4>)
 800079a:	88db      	ldrh	r3, [r3, #6]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d16e      	bne.n	800087e <alarm_clock+0x186>
			if (alarm_month == 1 || alarm_month == 3 || alarm_month == 5 || alarm_month == 7 || alarm_month == 8 || alarm_month == 10 || alarm_month == 12){
 80007a0:	4b7f      	ldr	r3, [pc, #508]	; (80009a0 <alarm_clock+0x2a8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d017      	beq.n	80007d8 <alarm_clock+0xe0>
 80007a8:	4b7d      	ldr	r3, [pc, #500]	; (80009a0 <alarm_clock+0x2a8>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d013      	beq.n	80007d8 <alarm_clock+0xe0>
 80007b0:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <alarm_clock+0x2a8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b05      	cmp	r3, #5
 80007b6:	d00f      	beq.n	80007d8 <alarm_clock+0xe0>
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <alarm_clock+0x2a8>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d00b      	beq.n	80007d8 <alarm_clock+0xe0>
 80007c0:	4b77      	ldr	r3, [pc, #476]	; (80009a0 <alarm_clock+0x2a8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d007      	beq.n	80007d8 <alarm_clock+0xe0>
 80007c8:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <alarm_clock+0x2a8>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b0a      	cmp	r3, #10
 80007ce:	d003      	beq.n	80007d8 <alarm_clock+0xe0>
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <alarm_clock+0x2a8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0c      	cmp	r3, #12
 80007d6:	d112      	bne.n	80007fe <alarm_clock+0x106>
				alarm_date = alarm_date%31+1;
 80007d8:	4b6f      	ldr	r3, [pc, #444]	; (8000998 <alarm_clock+0x2a0>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b71      	ldr	r3, [pc, #452]	; (80009a4 <alarm_clock+0x2ac>)
 80007de:	fba3 1302 	umull	r1, r3, r3, r2
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	0849      	lsrs	r1, r1, #1
 80007e6:	440b      	add	r3, r1
 80007e8:	0919      	lsrs	r1, r3, #4
 80007ea:	460b      	mov	r3, r1
 80007ec:	015b      	lsls	r3, r3, #5
 80007ee:	1a5b      	subs	r3, r3, r1
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b67      	ldr	r3, [pc, #412]	; (8000998 <alarm_clock+0x2a0>)
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	e030      	b.n	8000860 <alarm_clock+0x168>
			}
			else if (alarm_month == 4 || alarm_month == 6 || alarm_month == 9 || alarm_month == 11){
 80007fe:	4b68      	ldr	r3, [pc, #416]	; (80009a0 <alarm_clock+0x2a8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d00b      	beq.n	800081e <alarm_clock+0x126>
 8000806:	4b66      	ldr	r3, [pc, #408]	; (80009a0 <alarm_clock+0x2a8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b06      	cmp	r3, #6
 800080c:	d007      	beq.n	800081e <alarm_clock+0x126>
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <alarm_clock+0x2a8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b09      	cmp	r3, #9
 8000814:	d003      	beq.n	800081e <alarm_clock+0x126>
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <alarm_clock+0x2a8>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b0b      	cmp	r3, #11
 800081c:	d110      	bne.n	8000840 <alarm_clock+0x148>
				alarm_date = alarm_date%30+1;
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <alarm_clock+0x2a0>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <alarm_clock+0x2b0>)
 8000824:	fba3 1302 	umull	r1, r3, r3, r2
 8000828:	0919      	lsrs	r1, r3, #4
 800082a:	460b      	mov	r3, r1
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	1a5b      	subs	r3, r3, r1
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	3301      	adds	r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b57      	ldr	r3, [pc, #348]	; (8000998 <alarm_clock+0x2a0>)
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e00f      	b.n	8000860 <alarm_clock+0x168>
			}
			else{
				alarm_date = alarm_date%28+1;
 8000840:	4b55      	ldr	r3, [pc, #340]	; (8000998 <alarm_clock+0x2a0>)
 8000842:	781a      	ldrb	r2, [r3, #0]
 8000844:	0893      	lsrs	r3, r2, #2
 8000846:	4959      	ldr	r1, [pc, #356]	; (80009ac <alarm_clock+0x2b4>)
 8000848:	fba1 3103 	umull	r3, r1, r1, r3
 800084c:	460b      	mov	r3, r1
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	1a5b      	subs	r3, r3, r1
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	3301      	adds	r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b4e      	ldr	r3, [pc, #312]	; (8000998 <alarm_clock+0x2a0>)
 800085e:	701a      	strb	r2, [r3, #0]
			}
			lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 8000860:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <alarm_clock+0x2a0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b29a      	uxth	r2, r3
 8000866:	2318      	movs	r3, #24
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2302      	movs	r3, #2
 8000876:	2182      	movs	r1, #130	; 0x82
 8000878:	2046      	movs	r0, #70	; 0x46
 800087a:	f001 ff7d 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] >= 40){
 800087e:	4b47      	ldr	r3, [pc, #284]	; (800099c <alarm_clock+0x2a4>)
 8000880:	88db      	ldrh	r3, [r3, #6]
 8000882:	2b27      	cmp	r3, #39	; 0x27
 8000884:	f240 839e 	bls.w	8000fc4 <alarm_clock+0x8cc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000888:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <alarm_clock+0x2b8>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	425a      	negs	r2, r3
 8000890:	f003 0303 	and.w	r3, r3, #3
 8000894:	f002 0203 	and.w	r2, r2, #3
 8000898:	bf58      	it	pl
 800089a:	4253      	negpl	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <alarm_clock+0x2b8>)
 80008a0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 80008a2:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <alarm_clock+0x2b8>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f040 838c 	bne.w	8000fc4 <alarm_clock+0x8cc>
				if (alarm_month == 1 || alarm_month == 3 || alarm_month == 5 || alarm_month == 7 || alarm_month == 8 || alarm_month == 10 || alarm_month == 12){
 80008ac:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <alarm_clock+0x2a8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d017      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008b4:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <alarm_clock+0x2a8>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d013      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <alarm_clock+0x2a8>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d00f      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008c4:	4b36      	ldr	r3, [pc, #216]	; (80009a0 <alarm_clock+0x2a8>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d00b      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <alarm_clock+0x2a8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d007      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <alarm_clock+0x2a8>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0a      	cmp	r3, #10
 80008da:	d003      	beq.n	80008e4 <alarm_clock+0x1ec>
 80008dc:	4b30      	ldr	r3, [pc, #192]	; (80009a0 <alarm_clock+0x2a8>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b0c      	cmp	r3, #12
 80008e2:	d112      	bne.n	800090a <alarm_clock+0x212>
					alarm_date = alarm_date%31+1;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <alarm_clock+0x2a0>)
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <alarm_clock+0x2ac>)
 80008ea:	fba3 1302 	umull	r1, r3, r3, r2
 80008ee:	1ad1      	subs	r1, r2, r3
 80008f0:	0849      	lsrs	r1, r1, #1
 80008f2:	440b      	add	r3, r1
 80008f4:	0919      	lsrs	r1, r3, #4
 80008f6:	460b      	mov	r3, r1
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3301      	adds	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <alarm_clock+0x2a0>)
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e030      	b.n	800096c <alarm_clock+0x274>
				}
				else if (alarm_month == 4 || alarm_month == 6 || alarm_month == 9 || alarm_month == 11){
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <alarm_clock+0x2a8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b04      	cmp	r3, #4
 8000910:	d00b      	beq.n	800092a <alarm_clock+0x232>
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <alarm_clock+0x2a8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b06      	cmp	r3, #6
 8000918:	d007      	beq.n	800092a <alarm_clock+0x232>
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <alarm_clock+0x2a8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b09      	cmp	r3, #9
 8000920:	d003      	beq.n	800092a <alarm_clock+0x232>
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <alarm_clock+0x2a8>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b0b      	cmp	r3, #11
 8000928:	d110      	bne.n	800094c <alarm_clock+0x254>
					alarm_date = alarm_date%30+1;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <alarm_clock+0x2a0>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <alarm_clock+0x2b0>)
 8000930:	fba3 1302 	umull	r1, r3, r3, r2
 8000934:	0919      	lsrs	r1, r3, #4
 8000936:	460b      	mov	r3, r1
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	1a5b      	subs	r3, r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <alarm_clock+0x2a0>)
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e00f      	b.n	800096c <alarm_clock+0x274>
				}
				else{
					alarm_date = alarm_date%28+1;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <alarm_clock+0x2a0>)
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	0893      	lsrs	r3, r2, #2
 8000952:	4916      	ldr	r1, [pc, #88]	; (80009ac <alarm_clock+0x2b4>)
 8000954:	fba1 3103 	umull	r3, r1, r1, r3
 8000958:	460b      	mov	r3, r1
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b2db      	uxtb	r3, r3
 8000964:	3301      	adds	r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <alarm_clock+0x2a0>)
 800096a:	701a      	strb	r2, [r3, #0]
				}
				lcd_ShowIntNum(70, 130, alarm_date, 2, YELLOW, BLACK, 24);
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <alarm_clock+0x2a0>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b29a      	uxth	r2, r3
 8000972:	2318      	movs	r3, #24
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2300      	movs	r3, #0
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	2182      	movs	r1, #130	; 0x82
 8000984:	2046      	movs	r0, #70	; 0x46
 8000986:	f001 fef7 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 800098a:	e31b      	b.n	8000fc4 <alarm_clock+0x8cc>
 800098c:	200000a8 	.word	0x200000a8
 8000990:	66666667 	.word	0x66666667
 8000994:	20000000 	.word	0x20000000
 8000998:	2000009d 	.word	0x2000009d
 800099c:	200000d0 	.word	0x200000d0
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	08421085 	.word	0x08421085
 80009a8:	88888889 	.word	0x88888889
 80009ac:	24924925 	.word	0x24924925
 80009b0:	200000aa 	.word	0x200000aa
	case MODIFY_HOUR:
		if (counter_modify_clock == 0){
 80009b4:	4b8c      	ldr	r3, [pc, #560]	; (8000be8 <alarm_clock+0x4f0>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d10f      	bne.n	80009dc <alarm_clock+0x2e4>
			lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 80009bc:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <alarm_clock+0x4f4>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2318      	movs	r3, #24
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2300      	movs	r3, #0
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2302      	movs	r3, #2
 80009d2:	2164      	movs	r1, #100	; 0x64
 80009d4:	2046      	movs	r0, #70	; 0x46
 80009d6:	f001 fecf 	bl	8002778 <lcd_ShowIntNum>
 80009da:	e011      	b.n	8000a00 <alarm_clock+0x308>
		}
		else if (counter_modify_clock == 5){
 80009dc:	4b82      	ldr	r3, [pc, #520]	; (8000be8 <alarm_clock+0x4f0>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d10d      	bne.n	8000a00 <alarm_clock+0x308>
			lcd_ShowIntNum(70, 100, alarm_hours, 2, BLACK, BLACK, 24);
 80009e4:	4b81      	ldr	r3, [pc, #516]	; (8000bec <alarm_clock+0x4f4>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	2318      	movs	r3, #24
 80009ec:	9302      	str	r3, [sp, #8]
 80009ee:	2300      	movs	r3, #0
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	2300      	movs	r3, #0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	2302      	movs	r3, #2
 80009f8:	2164      	movs	r1, #100	; 0x64
 80009fa:	2046      	movs	r0, #70	; 0x46
 80009fc:	f001 febc 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000a00:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <alarm_clock+0x4f8>)
 8000a02:	88db      	ldrh	r3, [r3, #6]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d11f      	bne.n	8000a48 <alarm_clock+0x350>
			alarm_hours = (alarm_hours+1)%24;
 8000a08:	4b78      	ldr	r3, [pc, #480]	; (8000bec <alarm_clock+0x4f4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	4b79      	ldr	r3, [pc, #484]	; (8000bf4 <alarm_clock+0x4fc>)
 8000a10:	fb83 1302 	smull	r1, r3, r3, r2
 8000a14:	1099      	asrs	r1, r3, #2
 8000a16:	17d3      	asrs	r3, r2, #31
 8000a18:	1ac9      	subs	r1, r1, r3
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	440b      	add	r3, r1
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	1ad1      	subs	r1, r2, r3
 8000a24:	b2ca      	uxtb	r2, r1
 8000a26:	4b71      	ldr	r3, [pc, #452]	; (8000bec <alarm_clock+0x4f4>)
 8000a28:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 8000a2a:	4b70      	ldr	r3, [pc, #448]	; (8000bec <alarm_clock+0x4f4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	2318      	movs	r3, #24
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	2046      	movs	r0, #70	; 0x46
 8000a44:	f001 fe98 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000a48:	4b69      	ldr	r3, [pc, #420]	; (8000bf0 <alarm_clock+0x4f8>)
 8000a4a:	88db      	ldrh	r3, [r3, #6]
 8000a4c:	2b27      	cmp	r3, #39	; 0x27
 8000a4e:	f240 82bb 	bls.w	8000fc8 <alarm_clock+0x8d0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <alarm_clock+0x500>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	425a      	negs	r2, r3
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	bf58      	it	pl
 8000a64:	4253      	negpl	r3, r2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <alarm_clock+0x500>)
 8000a6a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000a6c:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <alarm_clock+0x500>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f040 82a9 	bne.w	8000fc8 <alarm_clock+0x8d0>
				alarm_hours = (alarm_hours+1)%24;
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <alarm_clock+0x4f4>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <alarm_clock+0x4fc>)
 8000a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a82:	1099      	asrs	r1, r3, #2
 8000a84:	17d3      	asrs	r3, r2, #31
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	440b      	add	r3, r1
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	1ad1      	subs	r1, r2, r3
 8000a92:	b2ca      	uxtb	r2, r1
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <alarm_clock+0x4f4>)
 8000a96:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(70, 100, alarm_hours, 2, GREEN, BLACK, 24);
 8000a98:	4b54      	ldr	r3, [pc, #336]	; (8000bec <alarm_clock+0x4f4>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	2318      	movs	r3, #24
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2302      	movs	r3, #2
 8000aae:	2164      	movs	r1, #100	; 0x64
 8000ab0:	2046      	movs	r0, #70	; 0x46
 8000ab2:	f001 fe61 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000ab6:	e287      	b.n	8000fc8 <alarm_clock+0x8d0>
	case MODIFY_MINUTE:
		if (counter_modify_clock == 0){
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	; (8000be8 <alarm_clock+0x4f0>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10f      	bne.n	8000ae0 <alarm_clock+0x3e8>
			lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000ac0:	4b4e      	ldr	r3, [pc, #312]	; (8000bfc <alarm_clock+0x504>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	206e      	movs	r0, #110	; 0x6e
 8000ada:	f001 fe4d 	bl	8002778 <lcd_ShowIntNum>
 8000ade:	e011      	b.n	8000b04 <alarm_clock+0x40c>
		}
		else if (counter_modify_clock == 5){
 8000ae0:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <alarm_clock+0x4f0>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d10d      	bne.n	8000b04 <alarm_clock+0x40c>
			lcd_ShowIntNum(110, 100, alarm_min, 2, BLACK, BLACK, 24);
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <alarm_clock+0x504>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	2318      	movs	r3, #24
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	2300      	movs	r3, #0
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2302      	movs	r3, #2
 8000afc:	2164      	movs	r1, #100	; 0x64
 8000afe:	206e      	movs	r0, #110	; 0x6e
 8000b00:	f001 fe3a 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <alarm_clock+0x4f8>)
 8000b06:	88db      	ldrh	r3, [r3, #6]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d120      	bne.n	8000b4e <alarm_clock+0x456>
			alarm_min = (alarm_min+1)%60;
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <alarm_clock+0x504>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <alarm_clock+0x508>)
 8000b14:	fb83 1302 	smull	r1, r3, r3, r2
 8000b18:	4413      	add	r3, r2
 8000b1a:	1159      	asrs	r1, r3, #5
 8000b1c:	17d3      	asrs	r3, r2, #31
 8000b1e:	1ac9      	subs	r1, r1, r3
 8000b20:	460b      	mov	r3, r1
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	1ad1      	subs	r1, r2, r3
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <alarm_clock+0x504>)
 8000b2e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <alarm_clock+0x504>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	2318      	movs	r3, #24
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2302      	movs	r3, #2
 8000b46:	2164      	movs	r1, #100	; 0x64
 8000b48:	206e      	movs	r0, #110	; 0x6e
 8000b4a:	f001 fe15 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000b4e:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <alarm_clock+0x4f8>)
 8000b50:	88db      	ldrh	r3, [r3, #6]
 8000b52:	2b27      	cmp	r3, #39	; 0x27
 8000b54:	f240 823a 	bls.w	8000fcc <alarm_clock+0x8d4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <alarm_clock+0x500>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	425a      	negs	r2, r3
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	bf58      	it	pl
 8000b6a:	4253      	negpl	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <alarm_clock+0x500>)
 8000b70:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <alarm_clock+0x500>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8228 	bne.w	8000fcc <alarm_clock+0x8d4>
				alarm_min = (alarm_min+1)%60;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <alarm_clock+0x504>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <alarm_clock+0x508>)
 8000b84:	fb83 1302 	smull	r1, r3, r3, r2
 8000b88:	4413      	add	r3, r2
 8000b8a:	1159      	asrs	r1, r3, #5
 8000b8c:	17d3      	asrs	r3, r2, #31
 8000b8e:	1ac9      	subs	r1, r1, r3
 8000b90:	460b      	mov	r3, r1
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	1ad1      	subs	r1, r2, r3
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <alarm_clock+0x504>)
 8000b9e:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(110, 100, alarm_min, 2, GREEN, BLACK, 24);
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <alarm_clock+0x504>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	2318      	movs	r3, #24
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	2300      	movs	r3, #0
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	2164      	movs	r1, #100	; 0x64
 8000bb8:	206e      	movs	r0, #110	; 0x6e
 8000bba:	f001 fddd 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000bbe:	e205      	b.n	8000fcc <alarm_clock+0x8d4>
	case MODIFY_SECOND:
		if (counter_modify_clock == 0){
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <alarm_clock+0x4f0>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11f      	bne.n	8000c08 <alarm_clock+0x510>
			lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <alarm_clock+0x50c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	2318      	movs	r3, #24
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2302      	movs	r3, #2
 8000bde:	2164      	movs	r1, #100	; 0x64
 8000be0:	2096      	movs	r0, #150	; 0x96
 8000be2:	f001 fdc9 	bl	8002778 <lcd_ShowIntNum>
 8000be6:	e021      	b.n	8000c2c <alarm_clock+0x534>
 8000be8:	200000a8 	.word	0x200000a8
 8000bec:	20000098 	.word	0x20000098
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	2aaaaaab 	.word	0x2aaaaaab
 8000bf8:	200000aa 	.word	0x200000aa
 8000bfc:	20000099 	.word	0x20000099
 8000c00:	88888889 	.word	0x88888889
 8000c04:	2000009a 	.word	0x2000009a
		}
		else if (counter_modify_clock == 5){
 8000c08:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <alarm_clock+0x700>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2b05      	cmp	r3, #5
 8000c0e:	d10d      	bne.n	8000c2c <alarm_clock+0x534>
			lcd_ShowIntNum(150, 100, alarm_sec, 2, BLACK, BLACK, 24);
 8000c10:	4b7a      	ldr	r3, [pc, #488]	; (8000dfc <alarm_clock+0x704>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	2318      	movs	r3, #24
 8000c18:	9302      	str	r3, [sp, #8]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2302      	movs	r3, #2
 8000c24:	2164      	movs	r1, #100	; 0x64
 8000c26:	2096      	movs	r0, #150	; 0x96
 8000c28:	f001 fda6 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000c2c:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <alarm_clock+0x708>)
 8000c2e:	88db      	ldrh	r3, [r3, #6]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d120      	bne.n	8000c76 <alarm_clock+0x57e>
			alarm_sec = (alarm_sec+1)%60;
 8000c34:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <alarm_clock+0x704>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <alarm_clock+0x70c>)
 8000c3c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c40:	4413      	add	r3, r2
 8000c42:	1159      	asrs	r1, r3, #5
 8000c44:	17d3      	asrs	r3, r2, #31
 8000c46:	1ac9      	subs	r1, r1, r3
 8000c48:	460b      	mov	r3, r1
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	1ad1      	subs	r1, r2, r3
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <alarm_clock+0x704>)
 8000c56:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <alarm_clock+0x704>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	2318      	movs	r3, #24
 8000c60:	9302      	str	r3, [sp, #8]
 8000c62:	2300      	movs	r3, #0
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	2164      	movs	r1, #100	; 0x64
 8000c70:	2096      	movs	r0, #150	; 0x96
 8000c72:	f001 fd81 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000c76:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <alarm_clock+0x708>)
 8000c78:	88db      	ldrh	r3, [r3, #6]
 8000c7a:	2b27      	cmp	r3, #39	; 0x27
 8000c7c:	f240 81a8 	bls.w	8000fd0 <alarm_clock+0x8d8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000c80:	4b61      	ldr	r3, [pc, #388]	; (8000e08 <alarm_clock+0x710>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	425a      	negs	r2, r3
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	bf58      	it	pl
 8000c92:	4253      	negpl	r3, r2
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <alarm_clock+0x710>)
 8000c98:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000c9a:	4b5b      	ldr	r3, [pc, #364]	; (8000e08 <alarm_clock+0x710>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8196 	bne.w	8000fd0 <alarm_clock+0x8d8>
				alarm_sec = (alarm_sec+1)%60;
 8000ca4:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <alarm_clock+0x704>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	4b56      	ldr	r3, [pc, #344]	; (8000e04 <alarm_clock+0x70c>)
 8000cac:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	1159      	asrs	r1, r3, #5
 8000cb4:	17d3      	asrs	r3, r2, #31
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	460b      	mov	r3, r1
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	1ad1      	subs	r1, r2, r3
 8000cc2:	b2ca      	uxtb	r2, r1
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	; (8000dfc <alarm_clock+0x704>)
 8000cc6:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(150, 100, alarm_sec, 2, GREEN, BLACK, 24);
 8000cc8:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <alarm_clock+0x704>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	2318      	movs	r3, #24
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2302      	movs	r3, #2
 8000cde:	2164      	movs	r1, #100	; 0x64
 8000ce0:	2096      	movs	r0, #150	; 0x96
 8000ce2:	f001 fd49 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000ce6:	e173      	b.n	8000fd0 <alarm_clock+0x8d8>
	case MODIFY_DAY:
		if (counter_modify_clock == 0){
 8000ce8:	4b43      	ldr	r3, [pc, #268]	; (8000df8 <alarm_clock+0x700>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d111      	bne.n	8000d14 <alarm_clock+0x61c>
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000cf0:	4b46      	ldr	r3, [pc, #280]	; (8000e0c <alarm_clock+0x714>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	2182      	movs	r1, #130	; 0x82
 8000d0c:	2014      	movs	r0, #20
 8000d0e:	f001 fd33 	bl	8002778 <lcd_ShowIntNum>
 8000d12:	e013      	b.n	8000d3c <alarm_clock+0x644>
		}
		else if (counter_modify_clock == 5){
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <alarm_clock+0x700>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	d10f      	bne.n	8000d3c <alarm_clock+0x644>
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, BLACK, BLACK, 24);
 8000d1c:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <alarm_clock+0x714>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	2318      	movs	r3, #24
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2302      	movs	r3, #2
 8000d34:	2182      	movs	r1, #130	; 0x82
 8000d36:	2014      	movs	r0, #20
 8000d38:	f001 fd1e 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000d3c:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <alarm_clock+0x708>)
 8000d3e:	88db      	ldrh	r3, [r3, #6]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d116      	bne.n	8000d72 <alarm_clock+0x67a>
			alarm_day += 1;
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <alarm_clock+0x714>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <alarm_clock+0x714>)
 8000d4e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000d50:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <alarm_clock+0x714>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	2318      	movs	r3, #24
 8000d5c:	9302      	str	r3, [sp, #8]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	2182      	movs	r1, #130	; 0x82
 8000d6c:	2014      	movs	r0, #20
 8000d6e:	f001 fd03 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000d72:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <alarm_clock+0x708>)
 8000d74:	88db      	ldrh	r3, [r3, #6]
 8000d76:	2b27      	cmp	r3, #39	; 0x27
 8000d78:	f240 812c 	bls.w	8000fd4 <alarm_clock+0x8dc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <alarm_clock+0x710>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	425a      	negs	r2, r3
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	bf58      	it	pl
 8000d8e:	4253      	negpl	r3, r2
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <alarm_clock+0x710>)
 8000d94:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <alarm_clock+0x710>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 811a 	bne.w	8000fd4 <alarm_clock+0x8dc>
				alarm_day += 1;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <alarm_clock+0x714>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <alarm_clock+0x714>)
 8000daa:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(20, 130, alarm_day+1, 2, YELLOW, BLACK, 24);
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <alarm_clock+0x714>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	2318      	movs	r3, #24
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	2182      	movs	r1, #130	; 0x82
 8000dc8:	2014      	movs	r0, #20
 8000dca:	f001 fcd5 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000dce:	e101      	b.n	8000fd4 <alarm_clock+0x8dc>
	case MODIFY_MONTH:
		if (counter_modify_clock == 0){
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <alarm_clock+0x700>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d11d      	bne.n	8000e14 <alarm_clock+0x71c>
			lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <alarm_clock+0x718>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	2318      	movs	r3, #24
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	2300      	movs	r3, #0
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2302      	movs	r3, #2
 8000dee:	2182      	movs	r1, #130	; 0x82
 8000df0:	206e      	movs	r0, #110	; 0x6e
 8000df2:	f001 fcc1 	bl	8002778 <lcd_ShowIntNum>
 8000df6:	e01f      	b.n	8000e38 <alarm_clock+0x740>
 8000df8:	200000a8 	.word	0x200000a8
 8000dfc:	2000009a 	.word	0x2000009a
 8000e00:	200000d0 	.word	0x200000d0
 8000e04:	88888889 	.word	0x88888889
 8000e08:	200000aa 	.word	0x200000aa
 8000e0c:	2000009e 	.word	0x2000009e
 8000e10:	2000009c 	.word	0x2000009c
		}
		else if (counter_modify_clock == 5){
 8000e14:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <alarm_clock+0x8ec>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d10d      	bne.n	8000e38 <alarm_clock+0x740>
			lcd_ShowIntNum(110, 130, alarm_month, 2, BLACK, BLACK, 24);
 8000e1c:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	2318      	movs	r3, #24
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	2300      	movs	r3, #0
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2302      	movs	r3, #2
 8000e30:	2182      	movs	r1, #130	; 0x82
 8000e32:	206e      	movs	r0, #110	; 0x6e
 8000e34:	f001 fca0 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000e38:	4b6c      	ldr	r3, [pc, #432]	; (8000fec <alarm_clock+0x8f4>)
 8000e3a:	88db      	ldrh	r3, [r3, #6]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d11e      	bne.n	8000e7e <alarm_clock+0x786>
			alarm_month = alarm_month%12+1;
 8000e40:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <alarm_clock+0x8f8>)
 8000e46:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4a:	08d9      	lsrs	r1, r3, #3
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	440b      	add	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e5e:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000e60:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <alarm_clock+0x8f0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	2318      	movs	r3, #24
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2302      	movs	r3, #2
 8000e76:	2182      	movs	r1, #130	; 0x82
 8000e78:	206e      	movs	r0, #110	; 0x6e
 8000e7a:	f001 fc7d 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <alarm_clock+0x8f4>)
 8000e80:	88db      	ldrh	r3, [r3, #6]
 8000e82:	2b27      	cmp	r3, #39	; 0x27
 8000e84:	f240 80a8 	bls.w	8000fd8 <alarm_clock+0x8e0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000e88:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <alarm_clock+0x8fc>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	425a      	negs	r2, r3
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	bf58      	it	pl
 8000e9a:	4253      	negpl	r3, r2
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b55      	ldr	r3, [pc, #340]	; (8000ff4 <alarm_clock+0x8fc>)
 8000ea0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000ea2:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <alarm_clock+0x8fc>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 8096 	bne.w	8000fd8 <alarm_clock+0x8e0>
				alarm_month = alarm_month%12+1;
 8000eac:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <alarm_clock+0x8f0>)
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	; (8000ff0 <alarm_clock+0x8f8>)
 8000eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000eb6:	08d9      	lsrs	r1, r3, #3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	440b      	add	r3, r1
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <alarm_clock+0x8f0>)
 8000eca:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(110, 130, alarm_month, 2, YELLOW, BLACK, 24);
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <alarm_clock+0x8f0>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	2318      	movs	r3, #24
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	2182      	movs	r1, #130	; 0x82
 8000ee4:	206e      	movs	r0, #110	; 0x6e
 8000ee6:	f001 fc47 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000eea:	e075      	b.n	8000fd8 <alarm_clock+0x8e0>
	case MODIFY_YEAR:
		if (counter_modify_clock == 0){
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <alarm_clock+0x8ec>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <alarm_clock+0x81c>
			lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000ef4:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <alarm_clock+0x900>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	2318      	movs	r3, #24
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2182      	movs	r1, #130	; 0x82
 8000f0c:	2096      	movs	r0, #150	; 0x96
 8000f0e:	f001 fc33 	bl	8002778 <lcd_ShowIntNum>
 8000f12:	e011      	b.n	8000f38 <alarm_clock+0x840>
		}
		else if (counter_modify_clock == 5){
 8000f14:	4b33      	ldr	r3, [pc, #204]	; (8000fe4 <alarm_clock+0x8ec>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10d      	bne.n	8000f38 <alarm_clock+0x840>
			lcd_ShowIntNum(150, 130, alarm_year, 2, BLACK, BLACK, 24);
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <alarm_clock+0x900>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	2318      	movs	r3, #24
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2300      	movs	r3, #0
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	2182      	movs	r1, #130	; 0x82
 8000f32:	2096      	movs	r0, #150	; 0x96
 8000f34:	f001 fc20 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <alarm_clock+0x8f4>)
 8000f3a:	88db      	ldrh	r3, [r3, #6]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d114      	bne.n	8000f6a <alarm_clock+0x872>
			alarm_year += 1;
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <alarm_clock+0x900>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <alarm_clock+0x900>)
 8000f4a:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <alarm_clock+0x900>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	2318      	movs	r3, #24
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2300      	movs	r3, #0
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2302      	movs	r3, #2
 8000f62:	2182      	movs	r1, #130	; 0x82
 8000f64:	2096      	movs	r0, #150	; 0x96
 8000f66:	f001 fc07 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <alarm_clock+0x8f4>)
 8000f6c:	88db      	ldrh	r3, [r3, #6]
 8000f6e:	2b27      	cmp	r3, #39	; 0x27
 8000f70:	d934      	bls.n	8000fdc <alarm_clock+0x8e4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	425a      	negs	r2, r3
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	f002 0203 	and.w	r2, r2, #3
 8000f82:	bf58      	it	pl
 8000f84:	4253      	negpl	r3, r2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <alarm_clock+0x8fc>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d123      	bne.n	8000fdc <alarm_clock+0x8e4>
				alarm_year += 1;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <alarm_clock+0x900>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <alarm_clock+0x900>)
 8000f9e:	701a      	strb	r2, [r3, #0]
				lcd_ShowIntNum(150, 130, alarm_year, 2, YELLOW, BLACK, 24);
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <alarm_clock+0x900>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	2182      	movs	r1, #130	; 0x82
 8000fb8:	2096      	movs	r0, #150	; 0x96
 8000fba:	f001 fbdd 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8000fbe:	e00d      	b.n	8000fdc <alarm_clock+0x8e4>
	default:
		break;
 8000fc0:	bf00      	nop
 8000fc2:	e00c      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fc4:	bf00      	nop
 8000fc6:	e00a      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fc8:	bf00      	nop
 8000fca:	e008      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fcc:	bf00      	nop
 8000fce:	e006      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd0:	bf00      	nop
 8000fd2:	e004      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd4:	bf00      	nop
 8000fd6:	e002      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fd8:	bf00      	nop
 8000fda:	e000      	b.n	8000fde <alarm_clock+0x8e6>
		break;
 8000fdc:	bf00      	nop
	}

}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a8 	.word	0x200000a8
 8000fe8:	2000009c 	.word	0x2000009c
 8000fec:	200000d0 	.word	0x200000d0
 8000ff0:	aaaaaaab 	.word	0xaaaaaaab
 8000ff4:	200000aa 	.word	0x200000aa
 8000ff8:	2000009b 	.word	0x2000009b

08000ffc <check_alarm>:

void check_alarm(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af04      	add	r7, sp, #16
	if (alarm_hours == ds3231_hours && alarm_min == ds3231_min && alarm_sec == ds3231_sec && alarm_year == ds3231_year && alarm_month == ds3231_month && alarm_date == ds3231_date && alarm_day == ds3231_day){
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <check_alarm+0xc0>)
 8001004:	781a      	ldrb	r2, [r3, #0]
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <check_alarm+0xc4>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	429a      	cmp	r2, r3
 800100c:	d126      	bne.n	800105c <check_alarm+0x60>
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <check_alarm+0xc8>)
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <check_alarm+0xcc>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d120      	bne.n	800105c <check_alarm+0x60>
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <check_alarm+0xd0>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <check_alarm+0xd4>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d11a      	bne.n	800105c <check_alarm+0x60>
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <check_alarm+0xd8>)
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <check_alarm+0xdc>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d114      	bne.n	800105c <check_alarm+0x60>
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <check_alarm+0xe0>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <check_alarm+0xe4>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	d10e      	bne.n	800105c <check_alarm+0x60>
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <check_alarm+0xe8>)
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <check_alarm+0xec>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d108      	bne.n	800105c <check_alarm+0x60>
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <check_alarm+0xf0>)
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <check_alarm+0xf4>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d102      	bne.n	800105c <check_alarm+0x60>
		alarm_flag = 1;
 8001056:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <check_alarm+0xf8>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
	}
	if (alarm_flag){
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <check_alarm+0xf8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d028      	beq.n	80010b6 <check_alarm+0xba>
		counter_alarm += 1;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <check_alarm+0xfc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <check_alarm+0xfc>)
 800106e:	701a      	strb	r2, [r3, #0]
		lcd_ShowStr(70, 200, "ALARM", WHITE, BLACK, 24, 0);
 8001070:	2300      	movs	r3, #0
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2318      	movs	r3, #24
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2300      	movs	r3, #0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <check_alarm+0x100>)
 8001082:	21c8      	movs	r1, #200	; 0xc8
 8001084:	2046      	movs	r0, #70	; 0x46
 8001086:	f001 fd79 	bl	8002b7c <lcd_ShowStr>
		if (counter_alarm == 200){
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <check_alarm+0xfc>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2bc8      	cmp	r3, #200	; 0xc8
 8001090:	d111      	bne.n	80010b6 <check_alarm+0xba>
			counter_alarm = 0;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <check_alarm+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			alarm_flag = 0;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <check_alarm+0xf8>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
			lcd_ShowStr(70, 200, "ALARM", BLACK, BLACK, 24, 0);
 800109e:	2300      	movs	r3, #0
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2318      	movs	r3, #24
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <check_alarm+0x100>)
 80010ae:	21c8      	movs	r1, #200	; 0xc8
 80010b0:	2046      	movs	r0, #70	; 0x46
 80010b2:	f001 fd63 	bl	8002b7c <lcd_ShowStr>
		}
	}
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000098 	.word	0x20000098
 80010c0:	200000f5 	.word	0x200000f5
 80010c4:	20000099 	.word	0x20000099
 80010c8:	200000f2 	.word	0x200000f2
 80010cc:	2000009a 	.word	0x2000009a
 80010d0:	200000f0 	.word	0x200000f0
 80010d4:	2000009b 	.word	0x2000009b
 80010d8:	200000f1 	.word	0x200000f1
 80010dc:	2000009c 	.word	0x2000009c
 80010e0:	200000f6 	.word	0x200000f6
 80010e4:	2000009d 	.word	0x2000009d
 80010e8:	200000f3 	.word	0x200000f3
 80010ec:	2000009e 	.word	0x2000009e
 80010f0:	200000f4 	.word	0x200000f4
 80010f4:	200000a0 	.word	0x200000a0
 80010f8:	2000009f 	.word	0x2000009f
 80010fc:	08008d60 	.word	0x08008d60

08001100 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <button_init+0x14>)
 800110a:	f003 f8a9 	bl	8004260 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40020c00 	.word	0x40020c00

08001118 <button_Scan>:

void button_Scan(){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2108      	movs	r1, #8
 8001122:	482f      	ldr	r0, [pc, #188]	; (80011e0 <button_Scan+0xc8>)
 8001124:	f003 f89c 	bl	8004260 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	2108      	movs	r1, #8
 800112c:	482c      	ldr	r0, [pc, #176]	; (80011e0 <button_Scan+0xc8>)
 800112e:	f003 f897 	bl	8004260 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001132:	230a      	movs	r3, #10
 8001134:	2202      	movs	r2, #2
 8001136:	492b      	ldr	r1, [pc, #172]	; (80011e4 <button_Scan+0xcc>)
 8001138:	482b      	ldr	r0, [pc, #172]	; (80011e8 <button_Scan+0xd0>)
 800113a:	f004 ffd2 	bl	80060e2 <HAL_SPI_Receive>
	  int button_index = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001146:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e03f      	b.n	80011ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db06      	blt.n	8001162 <button_Scan+0x4a>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b03      	cmp	r3, #3
 8001158:	dc03      	bgt.n	8001162 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e018      	b.n	8001194 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b03      	cmp	r3, #3
 8001166:	dd07      	ble.n	8001178 <button_Scan+0x60>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b07      	cmp	r3, #7
 800116c:	dc04      	bgt.n	8001178 <button_Scan+0x60>
			  button_index = 7 - i;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f1c3 0307 	rsb	r3, r3, #7
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e00d      	b.n	8001194 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b07      	cmp	r3, #7
 800117c:	dd06      	ble.n	800118c <button_Scan+0x74>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0b      	cmp	r3, #11
 8001182:	dc03      	bgt.n	800118c <button_Scan+0x74>
			  button_index = i + 4;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3304      	adds	r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e003      	b.n	8001194 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1c3 0317 	rsb	r3, r3, #23
 8001192:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <button_Scan+0xcc>)
 8001196:	881a      	ldrh	r2, [r3, #0]
 8001198:	897b      	ldrh	r3, [r7, #10]
 800119a:	4013      	ands	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <button_Scan+0x96>
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <button_Scan+0xd4>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2100      	movs	r1, #0
 80011a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011ac:	e009      	b.n	80011c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <button_Scan+0xd4>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b299      	uxth	r1, r3
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <button_Scan+0xd4>)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80011c2:	897b      	ldrh	r3, [r7, #10]
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	ddbc      	ble.n	800114e <button_Scan+0x36>
	  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	200000a2 	.word	0x200000a2
 80011e8:	200001e0 	.word	0x200001e0
 80011ec:	200000d0 	.word	0x200000d0

080011f0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80011f4:	201e      	movs	r0, #30
 80011f6:	f002 fc0f 	bl	8003a18 <DEC2BCD>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <ds3231_init+0x80>)
 8001200:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8001202:	2016      	movs	r0, #22
 8001204:	f002 fc08 	bl	8003a18 <DEC2BCD>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <ds3231_init+0x80>)
 800120e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8001210:	2015      	movs	r0, #21
 8001212:	f002 fc01 	bl	8003a18 <DEC2BCD>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <ds3231_init+0x80>)
 800121c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800121e:	2006      	movs	r0, #6
 8001220:	f002 fbfa 	bl	8003a18 <DEC2BCD>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <ds3231_init+0x80>)
 800122a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 800122c:	200f      	movs	r0, #15
 800122e:	f002 fbf3 	bl	8003a18 <DEC2BCD>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <ds3231_init+0x80>)
 8001238:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800123a:	2009      	movs	r0, #9
 800123c:	f002 fbec 	bl	8003a18 <DEC2BCD>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <ds3231_init+0x80>)
 8001246:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8001248:	2017      	movs	r0, #23
 800124a:	f002 fbe5 	bl	8003a18 <DEC2BCD>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <ds3231_init+0x80>)
 8001254:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8001256:	2332      	movs	r3, #50	; 0x32
 8001258:	2203      	movs	r2, #3
 800125a:	21d0      	movs	r1, #208	; 0xd0
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <ds3231_init+0x84>)
 800125e:	f003 fc7d 	bl	8004b5c <HAL_I2C_IsDeviceReady>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d000      	beq.n	800126a <ds3231_init+0x7a>
		while(1);
 8001268:	e7fe      	b.n	8001268 <ds3231_init+0x78>
	};
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000f8 	.word	0x200000f8
 8001274:	20000150 	.word	0x20000150

08001278 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	4603      	mov	r3, r0
 8001280:	460a      	mov	r2, r1
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fbc4 	bl	8003a18 <DEC2BCD>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	b29a      	uxth	r2, r3
 8001298:	230a      	movs	r3, #10
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f107 030f 	add.w	r3, r7, #15
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	21d0      	movs	r1, #208	; 0xd0
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <ds3231_Write+0x40>)
 80012ac:	f003 f936 	bl	800451c <HAL_I2C_Mem_Write>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000150 	.word	0x20000150

080012bc <ds3231_ReadTime>:

void ds3231_ReadTime(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80012c2:	230a      	movs	r3, #10
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2307      	movs	r3, #7
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	2200      	movs	r2, #0
 80012d2:	21d0      	movs	r1, #208	; 0xd0
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <ds3231_ReadTime+0xa8>)
 80012d6:	f003 fa1b 	bl	8004710 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fb80 	bl	80039e4 <BCD2DEC>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <ds3231_ReadTime+0xac>)
 80012ea:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <ds3231_ReadTime+0xa4>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fb77 	bl	80039e4 <BCD2DEC>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <ds3231_ReadTime+0xb0>)
 80012fc:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fb6e 	bl	80039e4 <BCD2DEC>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <ds3231_ReadTime+0xb4>)
 800130e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001312:	78db      	ldrb	r3, [r3, #3]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fb65 	bl	80039e4 <BCD2DEC>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <ds3231_ReadTime+0xb8>)
 8001320:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fb5c 	bl	80039e4 <BCD2DEC>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <ds3231_ReadTime+0xbc>)
 8001332:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001336:	795b      	ldrb	r3, [r3, #5]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fb53 	bl	80039e4 <BCD2DEC>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <ds3231_ReadTime+0xc0>)
 8001344:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ds3231_ReadTime+0xa4>)
 8001348:	799b      	ldrb	r3, [r3, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fb4a 	bl	80039e4 <BCD2DEC>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <ds3231_ReadTime+0xc4>)
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000f8 	.word	0x200000f8
 8001364:	20000150 	.word	0x20000150
 8001368:	200000f0 	.word	0x200000f0
 800136c:	200000f2 	.word	0x200000f2
 8001370:	200000f5 	.word	0x200000f5
 8001374:	200000f4 	.word	0x200000f4
 8001378:	200000f3 	.word	0x200000f3
 800137c:	200000f6 	.word	0x200000f6
 8001380:	200000f1 	.word	0x200000f1

08001384 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08e      	sub	sp, #56	; 0x38
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]
 80013ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_FSMC_Init+0xec>)
 80013b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_FSMC_Init+0xec>)
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <MX_FSMC_Init+0xf0>)
 80013bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_FSMC_Init+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_FSMC_Init+0xec>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_FSMC_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_FSMC_Init+0xec>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_FSMC_Init+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80013dc:	4b24      	ldr	r3, [pc, #144]	; (8001470 <MX_FSMC_Init+0xec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <MX_FSMC_Init+0xec>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_FSMC_Init+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <MX_FSMC_Init+0xec>)
 80013f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_FSMC_Init+0xec>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_FSMC_Init+0xec>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_FSMC_Init+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_FSMC_Init+0xec>)
 800140c:	2200      	movs	r2, #0
 800140e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_FSMC_Init+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001416:	230f      	movs	r3, #15
 8001418:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800141a:	230f      	movs	r3, #15
 800141c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800141e:	233c      	movs	r3, #60	; 0x3c
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001426:	2310      	movs	r3, #16
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800142a:	2311      	movs	r3, #17
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001432:	2308      	movs	r3, #8
 8001434:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001436:	230f      	movs	r3, #15
 8001438:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800143a:	2309      	movs	r3, #9
 800143c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001442:	2310      	movs	r3, #16
 8001444:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001446:	2311      	movs	r3, #17
 8001448:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800144e:	463a      	mov	r2, r7
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_FSMC_Init+0xec>)
 8001458:	f005 fa26 	bl	80068a8 <HAL_SRAM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001462:	f001 ffe9 	bl	8003438 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001466:	bf00      	nop
 8001468:	3738      	adds	r7, #56	; 0x38
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000100 	.word	0x20000100
 8001474:	a0000104 	.word	0xa0000104

08001478 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_FSMC_MspInit+0x88>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d131      	bne.n	80014f8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_FSMC_MspInit+0x88>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_FSMC_MspInit+0x8c>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80014b6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80014ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <HAL_FSMC_MspInit+0x90>)
 80014d2:	f002 fd29 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80014d6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80014da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014e8:	230c      	movs	r3, #12
 80014ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <HAL_FSMC_MspInit+0x94>)
 80014f2:	f002 fd19 	bl	8003f28 <HAL_GPIO_Init>
 80014f6:	e000      	b.n	80014fa <HAL_FSMC_MspInit+0x82>
    return;
 80014f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000a4 	.word	0x200000a4
 8001504:	40023800 	.word	0x40023800
 8001508:	40021000 	.word	0x40021000
 800150c:	40020c00 	.word	0x40020c00

08001510 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001518:	f7ff ffae 	bl	8001478 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b6c      	ldr	r3, [pc, #432]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b68      	ldr	r3, [pc, #416]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a67      	ldr	r2, [pc, #412]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b61      	ldr	r3, [pc, #388]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a60      	ldr	r2, [pc, #384]	; (80016fc <MX_GPIO_Init+0x1d8>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a59      	ldr	r2, [pc, #356]	; (80016fc <MX_GPIO_Init+0x1d8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_GPIO_Init+0x1d8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2170      	movs	r1, #112	; 0x70
 8001602:	483f      	ldr	r0, [pc, #252]	; (8001700 <MX_GPIO_Init+0x1dc>)
 8001604:	f002 fe2c 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	483d      	ldr	r0, [pc, #244]	; (8001704 <MX_GPIO_Init+0x1e0>)
 8001610:	f002 fe26 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2140      	movs	r1, #64	; 0x40
 8001618:	483b      	ldr	r0, [pc, #236]	; (8001708 <MX_GPIO_Init+0x1e4>)
 800161a:	f002 fe21 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <MX_GPIO_Init+0x1e8>)
 8001626:	f002 fe1b 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	2108      	movs	r1, #8
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <MX_GPIO_Init+0x1ec>)
 8001630:	f002 fe16 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001634:	2370      	movs	r3, #112	; 0x70
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	482d      	ldr	r0, [pc, #180]	; (8001700 <MX_GPIO_Init+0x1dc>)
 800164c:	f002 fc6c 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4826      	ldr	r0, [pc, #152]	; (8001704 <MX_GPIO_Init+0x1e0>)
 800166a:	f002 fc5d 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	4619      	mov	r1, r3
 8001680:	4822      	ldr	r0, [pc, #136]	; (800170c <MX_GPIO_Init+0x1e8>)
 8001682:	f002 fc51 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001686:	2330      	movs	r3, #48	; 0x30
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_GPIO_Init+0x1e0>)
 800169a:	f002 fc45 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_GPIO_Init+0x1e4>)
 80016b6:	f002 fc37 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80016ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <MX_GPIO_Init+0x1e8>)
 80016d4:	f002 fc28 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80016d8:	2308      	movs	r3, #8
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <MX_GPIO_Init+0x1ec>)
 80016f0:	f002 fc1a 	bl	8003f28 <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3730      	adds	r7, #48	; 0x30
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40021000 	.word	0x40021000
 8001704:	40020800 	.word	0x40020800
 8001708:	40021800 	.word	0x40021800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020c00 	.word	0x40020c00

08001714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_I2C1_Init+0x50>)
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <MX_I2C1_Init+0x54>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_I2C1_Init+0x50>)
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <MX_I2C1_Init+0x58>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_I2C1_Init+0x50>)
 8001732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <MX_I2C1_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_I2C1_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_I2C1_Init+0x50>)
 8001752:	f002 fd9f 	bl	8004294 <HAL_I2C_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800175c:	f001 fe6c 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000150 	.word	0x20000150
 8001768:	40005400 	.word	0x40005400
 800176c:	000186a0 	.word	0x000186a0

08001770 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_I2C_MspInit+0x84>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12b      	bne.n	80017ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ae:	23c0      	movs	r3, #192	; 0xc0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b2:	2312      	movs	r3, #18
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017be:	2304      	movs	r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <HAL_I2C_MspInit+0x8c>)
 80017ca:	f002 fbad 	bl	8003f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_I2C_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400

08001800 <update_state>:
uint16_t state_modify_clock = MODIFY_DATE;
uint16_t state_main_clock = NORMAL_MODE;



void update_state(){
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af04      	add	r7, sp, #16
	if (button_count[0] == 1){
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <update_state+0x14c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d168      	bne.n	80018e0 <update_state+0xe0>
		if (state_main_clock == ALARM_MODE){
 800180e:	4b50      	ldr	r3, [pc, #320]	; (8001950 <update_state+0x150>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	2b09      	cmp	r3, #9
 8001814:	d11d      	bne.n	8001852 <update_state+0x52>
			ds3231_ReadTime();
 8001816:	f7ff fd51 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 800181a:	f001 fd37 	bl	800328c <displayTime>
			state_main_clock = NORMAL_MODE;
 800181e:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <update_state+0x150>)
 8001820:	2207      	movs	r2, #7
 8001822:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800182c:	22f0      	movs	r2, #240	; 0xf0
 800182e:	21fa      	movs	r1, #250	; 0xfa
 8001830:	2000      	movs	r0, #0
 8001832:	f000 fe67 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "NORMAL MODE", WHITE, BLACK, 24, 0);
 8001836:	2300      	movs	r3, #0
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	2318      	movs	r3, #24
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2300      	movs	r3, #0
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001846:	4a43      	ldr	r2, [pc, #268]	; (8001954 <update_state+0x154>)
 8001848:	21fa      	movs	r1, #250	; 0xfa
 800184a:	2046      	movs	r0, #70	; 0x46
 800184c:	f001 f996 	bl	8002b7c <lcd_ShowStr>
 8001850:	e046      	b.n	80018e0 <update_state+0xe0>
		}
		else if (state_main_clock == NORMAL_MODE){
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <update_state+0x150>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d120      	bne.n	800189c <update_state+0x9c>
			ds3231_ReadTime();
 800185a:	f7ff fd2f 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 800185e:	f001 fd15 	bl	800328c <displayTime>
			state_main_clock = MODIFY_MODE;
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <update_state+0x150>)
 8001864:	2208      	movs	r2, #8
 8001866:	801a      	strh	r2, [r3, #0]
			state_modify_clock = MODIFY_HOUR;
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <update_state+0x158>)
 800186a:	2200      	movs	r2, #0
 800186c:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 800186e:	2300      	movs	r3, #0
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001876:	22f0      	movs	r2, #240	; 0xf0
 8001878:	21fa      	movs	r1, #250	; 0xfa
 800187a:	2000      	movs	r0, #0
 800187c:	f000 fe42 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "MODIFY MODE", WHITE, BLACK, 24, 0);
 8001880:	2300      	movs	r3, #0
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2318      	movs	r3, #24
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <update_state+0x15c>)
 8001892:	21fa      	movs	r1, #250	; 0xfa
 8001894:	2046      	movs	r0, #70	; 0x46
 8001896:	f001 f971 	bl	8002b7c <lcd_ShowStr>
 800189a:	e021      	b.n	80018e0 <update_state+0xe0>
		}
		else{
			ds3231_ReadTime();
 800189c:	f7ff fd0e 	bl	80012bc <ds3231_ReadTime>
			displayTime();
 80018a0:	f001 fcf4 	bl	800328c <displayTime>
			take_current_time_for_alarm();
 80018a4:	f7fe fee8 	bl	8000678 <take_current_time_for_alarm>
			state_main_clock = ALARM_MODE;
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <update_state+0x150>)
 80018aa:	2209      	movs	r2, #9
 80018ac:	801a      	strh	r2, [r3, #0]
			state_modify_clock = MODIFY_HOUR;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <update_state+0x158>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
			lcd_Fill(0, 250, 240, 320, BLACK);
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018bc:	22f0      	movs	r2, #240	; 0xf0
 80018be:	21fa      	movs	r1, #250	; 0xfa
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 fe1f 	bl	8002504 <lcd_Fill>
			lcd_ShowStr(70, 250, "ALARM_MODE", WHITE, BLACK, 24, 0);
 80018c6:	2300      	movs	r3, #0
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2318      	movs	r3, #24
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2300      	movs	r3, #0
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d6:	4a22      	ldr	r2, [pc, #136]	; (8001960 <update_state+0x160>)
 80018d8:	21fa      	movs	r1, #250	; 0xfa
 80018da:	2046      	movs	r0, #70	; 0x46
 80018dc:	f001 f94e 	bl	8002b7c <lcd_ShowStr>
		}
	}
	if (button_count[12] == 1){
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <update_state+0x14c>)
 80018e2:	8b1b      	ldrh	r3, [r3, #24]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d12e      	bne.n	8001946 <update_state+0x146>
		if (state_main_clock == MODIFY_MODE){
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <update_state+0x150>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d113      	bne.n	8001918 <update_state+0x118>
			displayTime();
 80018f0:	f001 fccc 	bl	800328c <displayTime>
			state_modify_clock = (state_modify_clock+1)%7;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <update_state+0x158>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <update_state+0x164>)
 80018fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001900:	4413      	add	r3, r2
 8001902:	1099      	asrs	r1, r3, #2
 8001904:	17d3      	asrs	r3, r2, #31
 8001906:	1ac9      	subs	r1, r1, r3
 8001908:	460b      	mov	r3, r1
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	b28a      	uxth	r2, r1
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <update_state+0x158>)
 8001914:	801a      	strh	r2, [r3, #0]
		else if (state_main_clock == ALARM_MODE){
			display_time_alarm();
			state_modify_clock = (state_modify_clock+1)%7;
		}
	}
}
 8001916:	e016      	b.n	8001946 <update_state+0x146>
		else if (state_main_clock == ALARM_MODE){
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <update_state+0x150>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	2b09      	cmp	r3, #9
 800191e:	d112      	bne.n	8001946 <update_state+0x146>
			display_time_alarm();
 8001920:	f7fe fe2a 	bl	8000578 <display_time_alarm>
			state_modify_clock = (state_modify_clock+1)%7;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <update_state+0x158>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <update_state+0x164>)
 800192c:	fb83 1302 	smull	r1, r3, r3, r2
 8001930:	4413      	add	r3, r2
 8001932:	1099      	asrs	r1, r3, #2
 8001934:	17d3      	asrs	r3, r2, #31
 8001936:	1ac9      	subs	r1, r1, r3
 8001938:	460b      	mov	r3, r1
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a5b      	subs	r3, r3, r1
 800193e:	1ad1      	subs	r1, r2, r3
 8001940:	b28a      	uxth	r2, r1
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <update_state+0x158>)
 8001944:	801a      	strh	r2, [r3, #0]
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200000d0 	.word	0x200000d0
 8001950:	20000002 	.word	0x20000002
 8001954:	08008d68 	.word	0x08008d68
 8001958:	20000000 	.word	0x20000000
 800195c:	08008d74 	.word	0x08008d74
 8001960:	08008d80 	.word	0x08008d80
 8001964:	92492493 	.word	0x92492493

08001968 <clock_run>:

void clock_run(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	switch(state_main_clock){
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <clock_run+0x3c>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d010      	beq.n	8001996 <clock_run+0x2e>
 8001974:	2b09      	cmp	r3, #9
 8001976:	dc11      	bgt.n	800199c <clock_run+0x34>
 8001978:	2b07      	cmp	r3, #7
 800197a:	d002      	beq.n	8001982 <clock_run+0x1a>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d007      	beq.n	8001990 <clock_run+0x28>
		break;
	case ALARM_MODE:
		alarm_clock();
		break;
	default:
		break;
 8001980:	e00c      	b.n	800199c <clock_run+0x34>
		ds3231_ReadTime();
 8001982:	f7ff fc9b 	bl	80012bc <ds3231_ReadTime>
		displayTime();
 8001986:	f001 fc81 	bl	800328c <displayTime>
		check_alarm();
 800198a:	f7ff fb37 	bl	8000ffc <check_alarm>
		break;
 800198e:	e006      	b.n	800199e <clock_run+0x36>
		modify_clock();
 8001990:	f000 f80a 	bl	80019a8 <modify_clock>
		break;
 8001994:	e003      	b.n	800199e <clock_run+0x36>
		alarm_clock();
 8001996:	f7fe feaf 	bl	80006f8 <alarm_clock>
		break;
 800199a:	e000      	b.n	800199e <clock_run+0x36>
		break;
 800199c:	bf00      	nop
	}
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000002 	.word	0x20000002

080019a8 <modify_clock>:

void modify_clock(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af04      	add	r7, sp, #16
	counter_modify_clock = (counter_modify_clock+1)%10;
 80019ae:	4b97      	ldr	r3, [pc, #604]	; (8001c0c <modify_clock+0x264>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <modify_clock+0x268>)
 80019b6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ba:	1099      	asrs	r1, r3, #2
 80019bc:	17d3      	asrs	r3, r2, #31
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	1ad1      	subs	r1, r2, r3
 80019ca:	b28a      	uxth	r2, r1
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <modify_clock+0x264>)
 80019ce:	801a      	strh	r2, [r3, #0]
	switch(state_modify_clock){
 80019d0:	4b90      	ldr	r3, [pc, #576]	; (8001c14 <modify_clock+0x26c>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2b06      	cmp	r3, #6
 80019d6:	f200 84bf 	bhi.w	8002358 <modify_clock+0x9b0>
 80019da:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <modify_clock+0x38>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	08001c85 	.word	0x08001c85
 80019e4:	08001da9 	.word	0x08001da9
 80019e8:	08001ed1 	.word	0x08001ed1
 80019ec:	08002265 	.word	0x08002265
 80019f0:	08002129 	.word	0x08002129
 80019f4:	080019fd 	.word	0x080019fd
 80019f8:	08002021 	.word	0x08002021
	case MODIFY_DATE:
		if (counter_modify_clock == 0){
 80019fc:	4b83      	ldr	r3, [pc, #524]	; (8001c0c <modify_clock+0x264>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <modify_clock+0x7c>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <modify_clock+0x270>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	2318      	movs	r3, #24
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	2182      	movs	r1, #130	; 0x82
 8001a1c:	2046      	movs	r0, #70	; 0x46
 8001a1e:	f000 feab 	bl	8002778 <lcd_ShowIntNum>
 8001a22:	e011      	b.n	8001a48 <modify_clock+0xa0>
		}
		else if (counter_modify_clock == 5){
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <modify_clock+0x264>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10d      	bne.n	8001a48 <modify_clock+0xa0>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, BLACK, BLACK, 24);
 8001a2c:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <modify_clock+0x270>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	2318      	movs	r3, #24
 8001a34:	9302      	str	r3, [sp, #8]
 8001a36:	2300      	movs	r3, #0
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2182      	movs	r1, #130	; 0x82
 8001a42:	2046      	movs	r0, #70	; 0x46
 8001a44:	f000 fe98 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001a48:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <modify_clock+0x274>)
 8001a4a:	88db      	ldrh	r3, [r3, #6]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d176      	bne.n	8001b3e <modify_clock+0x196>
			if (ds3231_month == 1 || ds3231_month == 3 || ds3231_month == 5 || ds3231_month == 7 || ds3231_month == 8 || ds3231_month == 10 || ds3231_month == 12){
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <modify_clock+0x278>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d017      	beq.n	8001a88 <modify_clock+0xe0>
 8001a58:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <modify_clock+0x278>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d013      	beq.n	8001a88 <modify_clock+0xe0>
 8001a60:	4b6f      	ldr	r3, [pc, #444]	; (8001c20 <modify_clock+0x278>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d00f      	beq.n	8001a88 <modify_clock+0xe0>
 8001a68:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <modify_clock+0x278>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d00b      	beq.n	8001a88 <modify_clock+0xe0>
 8001a70:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <modify_clock+0x278>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d007      	beq.n	8001a88 <modify_clock+0xe0>
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <modify_clock+0x278>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d003      	beq.n	8001a88 <modify_clock+0xe0>
 8001a80:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <modify_clock+0x278>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d112      	bne.n	8001aae <modify_clock+0x106>
				ds3231_date = ds3231_date%31+1;
 8001a88:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <modify_clock+0x270>)
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	4b65      	ldr	r3, [pc, #404]	; (8001c24 <modify_clock+0x27c>)
 8001a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a92:	1ad1      	subs	r1, r2, r3
 8001a94:	0849      	lsrs	r1, r1, #1
 8001a96:	440b      	add	r3, r1
 8001a98:	0919      	lsrs	r1, r3, #4
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	1a5b      	subs	r3, r3, r1
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <modify_clock+0x270>)
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e030      	b.n	8001b10 <modify_clock+0x168>
			}
			else if (ds3231_month == 4 || ds3231_month == 6 || ds3231_month == 9 || ds3231_month == 11){
 8001aae:	4b5c      	ldr	r3, [pc, #368]	; (8001c20 <modify_clock+0x278>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d00b      	beq.n	8001ace <modify_clock+0x126>
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <modify_clock+0x278>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d007      	beq.n	8001ace <modify_clock+0x126>
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <modify_clock+0x278>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	d003      	beq.n	8001ace <modify_clock+0x126>
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <modify_clock+0x278>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b0b      	cmp	r3, #11
 8001acc:	d110      	bne.n	8001af0 <modify_clock+0x148>
				ds3231_date = ds3231_date%30+1;
 8001ace:	4b52      	ldr	r3, [pc, #328]	; (8001c18 <modify_clock+0x270>)
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <modify_clock+0x280>)
 8001ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad8:	0919      	lsrs	r1, r3, #4
 8001ada:	460b      	mov	r3, r1
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a5b      	subs	r3, r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <modify_clock+0x270>)
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e00f      	b.n	8001b10 <modify_clock+0x168>
			}
			else{
				ds3231_date = ds3231_date%28+1;
 8001af0:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <modify_clock+0x270>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	0893      	lsrs	r3, r2, #2
 8001af6:	494d      	ldr	r1, [pc, #308]	; (8001c2c <modify_clock+0x284>)
 8001af8:	fba1 3103 	umull	r3, r1, r1, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	1a5b      	subs	r3, r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <modify_clock+0x270>)
 8001b0e:	701a      	strb	r2, [r3, #0]
			}
			ds3231_Write(ADDRESS_DATE, ds3231_date);
 8001b10:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <modify_clock+0x270>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff fbae 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001b1c:	f7ff fbce 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <modify_clock+0x270>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	2318      	movs	r3, #24
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2302      	movs	r3, #2
 8001b36:	2182      	movs	r1, #130	; 0x82
 8001b38:	2046      	movs	r0, #70	; 0x46
 8001b3a:	f000 fe1d 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] >= 40){
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <modify_clock+0x274>)
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	2b27      	cmp	r3, #39	; 0x27
 8001b44:	f240 840a 	bls.w	800235c <modify_clock+0x9b4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <modify_clock+0x288>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	425a      	negs	r2, r3
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	bf58      	it	pl
 8001b5a:	4253      	negpl	r3, r2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <modify_clock+0x288>)
 8001b60:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <modify_clock+0x288>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 83f8 	bne.w	800235c <modify_clock+0x9b4>
				if (ds3231_month == 1 || ds3231_month == 3 || ds3231_month == 5 || ds3231_month == 7 || ds3231_month == 8 || ds3231_month == 10 || ds3231_month == 12){
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <modify_clock+0x278>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d017      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <modify_clock+0x278>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d013      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <modify_clock+0x278>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d00f      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <modify_clock+0x278>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d00b      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <modify_clock+0x278>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d007      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <modify_clock+0x278>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b0a      	cmp	r3, #10
 8001b9a:	d003      	beq.n	8001ba4 <modify_clock+0x1fc>
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <modify_clock+0x278>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d112      	bne.n	8001bca <modify_clock+0x222>
					ds3231_date = ds3231_date%31+1;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <modify_clock+0x270>)
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <modify_clock+0x27c>)
 8001baa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bae:	1ad1      	subs	r1, r2, r3
 8001bb0:	0849      	lsrs	r1, r1, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	0919      	lsrs	r1, r3, #4
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	1a5b      	subs	r3, r3, r1
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <modify_clock+0x270>)
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e044      	b.n	8001c54 <modify_clock+0x2ac>
				}
				else if (ds3231_month == 4 || ds3231_month == 6 || ds3231_month == 9 || ds3231_month == 11){
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <modify_clock+0x278>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d00b      	beq.n	8001bea <modify_clock+0x242>
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <modify_clock+0x278>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d007      	beq.n	8001bea <modify_clock+0x242>
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <modify_clock+0x278>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d003      	beq.n	8001bea <modify_clock+0x242>
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <modify_clock+0x278>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b0b      	cmp	r3, #11
 8001be8:	d124      	bne.n	8001c34 <modify_clock+0x28c>
					ds3231_date = ds3231_date%30+1;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <modify_clock+0x270>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <modify_clock+0x280>)
 8001bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf4:	0919      	lsrs	r1, r3, #4
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a5b      	subs	r3, r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <modify_clock+0x270>)
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e023      	b.n	8001c54 <modify_clock+0x2ac>
 8001c0c:	200000a8 	.word	0x200000a8
 8001c10:	66666667 	.word	0x66666667
 8001c14:	20000000 	.word	0x20000000
 8001c18:	200000f3 	.word	0x200000f3
 8001c1c:	200000d0 	.word	0x200000d0
 8001c20:	200000f6 	.word	0x200000f6
 8001c24:	08421085 	.word	0x08421085
 8001c28:	88888889 	.word	0x88888889
 8001c2c:	24924925 	.word	0x24924925
 8001c30:	200000aa 	.word	0x200000aa
				}
				else{
					ds3231_date = ds3231_date%28+1;
 8001c34:	4bb0      	ldr	r3, [pc, #704]	; (8001ef8 <modify_clock+0x550>)
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	0893      	lsrs	r3, r2, #2
 8001c3a:	49b0      	ldr	r1, [pc, #704]	; (8001efc <modify_clock+0x554>)
 8001c3c:	fba1 3103 	umull	r3, r1, r1, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	1a5b      	subs	r3, r3, r1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4ba9      	ldr	r3, [pc, #676]	; (8001ef8 <modify_clock+0x550>)
 8001c52:	701a      	strb	r2, [r3, #0]
				}
				ds3231_Write(ADDRESS_DATE, ds3231_date);
 8001c54:	4ba8      	ldr	r3, [pc, #672]	; (8001ef8 <modify_clock+0x550>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2004      	movs	r0, #4
 8001c5c:	f7ff fb0c 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001c60:	f7ff fb2c 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001c64:	4ba4      	ldr	r3, [pc, #656]	; (8001ef8 <modify_clock+0x550>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	2318      	movs	r3, #24
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	2182      	movs	r1, #130	; 0x82
 8001c7c:	2046      	movs	r0, #70	; 0x46
 8001c7e:	f000 fd7b 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001c82:	e36b      	b.n	800235c <modify_clock+0x9b4>
	case MODIFY_HOUR:
		if (counter_modify_clock == 0){
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <modify_clock+0x558>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10f      	bne.n	8001cac <modify_clock+0x304>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <modify_clock+0x55c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	2318      	movs	r3, #24
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	2164      	movs	r1, #100	; 0x64
 8001ca4:	2046      	movs	r0, #70	; 0x46
 8001ca6:	f000 fd67 	bl	8002778 <lcd_ShowIntNum>
 8001caa:	e011      	b.n	8001cd0 <modify_clock+0x328>
		}
		else if (counter_modify_clock == 5){
 8001cac:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <modify_clock+0x558>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10d      	bne.n	8001cd0 <modify_clock+0x328>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, BLACK, BLACK, 24);
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <modify_clock+0x55c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	2164      	movs	r1, #100	; 0x64
 8001cca:	2046      	movs	r0, #70	; 0x46
 8001ccc:	f000 fd54 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001cd0:	4b8d      	ldr	r3, [pc, #564]	; (8001f08 <modify_clock+0x560>)
 8001cd2:	88db      	ldrh	r3, [r3, #6]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d127      	bne.n	8001d28 <modify_clock+0x380>
			ds3231_hours = (ds3231_hours+1)%24;
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <modify_clock+0x55c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	4b8b      	ldr	r3, [pc, #556]	; (8001f0c <modify_clock+0x564>)
 8001ce0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce4:	1099      	asrs	r1, r3, #2
 8001ce6:	17d3      	asrs	r3, r2, #31
 8001ce8:	1ac9      	subs	r1, r1, r3
 8001cea:	460b      	mov	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1ad1      	subs	r1, r2, r3
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <modify_clock+0x55c>)
 8001cf8:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <modify_clock+0x55c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	2002      	movs	r0, #2
 8001d02:	f7ff fab9 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001d06:	f7ff fad9 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <modify_clock+0x55c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2318      	movs	r3, #24
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	2164      	movs	r1, #100	; 0x64
 8001d22:	2046      	movs	r0, #70	; 0x46
 8001d24:	f000 fd28 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001d28:	4b77      	ldr	r3, [pc, #476]	; (8001f08 <modify_clock+0x560>)
 8001d2a:	88db      	ldrh	r3, [r3, #6]
 8001d2c:	2b27      	cmp	r3, #39	; 0x27
 8001d2e:	f240 8317 	bls.w	8002360 <modify_clock+0x9b8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001d32:	4b77      	ldr	r3, [pc, #476]	; (8001f10 <modify_clock+0x568>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	425a      	negs	r2, r3
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	f002 0203 	and.w	r2, r2, #3
 8001d42:	bf58      	it	pl
 8001d44:	4253      	negpl	r3, r2
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <modify_clock+0x568>)
 8001d4a:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001d4c:	4b70      	ldr	r3, [pc, #448]	; (8001f10 <modify_clock+0x568>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 8305 	bne.w	8002360 <modify_clock+0x9b8>
				ds3231_hours = (ds3231_hours+1)%24;
 8001d56:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <modify_clock+0x55c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <modify_clock+0x564>)
 8001d5e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d62:	1099      	asrs	r1, r3, #2
 8001d64:	17d3      	asrs	r3, r2, #31
 8001d66:	1ac9      	subs	r1, r1, r3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	440b      	add	r3, r1
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1ad1      	subs	r1, r2, r3
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <modify_clock+0x55c>)
 8001d76:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_HOUR, ds3231_hours);
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <modify_clock+0x55c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7ff fa7a 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001d84:	f7ff fa9a 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d88:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <modify_clock+0x55c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	2318      	movs	r3, #24
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2164      	movs	r1, #100	; 0x64
 8001da0:	2046      	movs	r0, #70	; 0x46
 8001da2:	f000 fce9 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001da6:	e2db      	b.n	8002360 <modify_clock+0x9b8>
	case MODIFY_MINUTE:
		if (counter_modify_clock == 0){
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <modify_clock+0x558>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10f      	bne.n	8001dd0 <modify_clock+0x428>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001db0:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <modify_clock+0x56c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2318      	movs	r3, #24
 8001db8:	9302      	str	r3, [sp, #8]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	2164      	movs	r1, #100	; 0x64
 8001dc8:	206e      	movs	r0, #110	; 0x6e
 8001dca:	f000 fcd5 	bl	8002778 <lcd_ShowIntNum>
 8001dce:	e011      	b.n	8001df4 <modify_clock+0x44c>
		}
		else if (counter_modify_clock == 5){
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <modify_clock+0x558>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d10d      	bne.n	8001df4 <modify_clock+0x44c>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, BLACK, BLACK, 24);
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <modify_clock+0x56c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	2318      	movs	r3, #24
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2300      	movs	r3, #0
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2302      	movs	r3, #2
 8001dec:	2164      	movs	r1, #100	; 0x64
 8001dee:	206e      	movs	r0, #110	; 0x6e
 8001df0:	f000 fcc2 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <modify_clock+0x560>)
 8001df6:	88db      	ldrh	r3, [r3, #6]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d128      	bne.n	8001e4e <modify_clock+0x4a6>
			ds3231_min = (ds3231_min+1)%60;
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <modify_clock+0x56c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <modify_clock+0x570>)
 8001e04:	fb83 1302 	smull	r1, r3, r3, r2
 8001e08:	4413      	add	r3, r2
 8001e0a:	1159      	asrs	r1, r3, #5
 8001e0c:	17d3      	asrs	r3, r2, #31
 8001e0e:	1ac9      	subs	r1, r1, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a5b      	subs	r3, r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	1ad1      	subs	r1, r2, r3
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <modify_clock+0x56c>)
 8001e1e:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <modify_clock+0x56c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2001      	movs	r0, #1
 8001e28:	f7ff fa26 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001e2c:	f7ff fa46 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <modify_clock+0x56c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	2318      	movs	r3, #24
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2302      	movs	r3, #2
 8001e46:	2164      	movs	r1, #100	; 0x64
 8001e48:	206e      	movs	r0, #110	; 0x6e
 8001e4a:	f000 fc95 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <modify_clock+0x560>)
 8001e50:	88db      	ldrh	r3, [r3, #6]
 8001e52:	2b27      	cmp	r3, #39	; 0x27
 8001e54:	f240 8286 	bls.w	8002364 <modify_clock+0x9bc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <modify_clock+0x568>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	425a      	negs	r2, r3
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <modify_clock+0x568>)
 8001e70:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001e72:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <modify_clock+0x568>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 8274 	bne.w	8002364 <modify_clock+0x9bc>
				ds3231_min = (ds3231_min+1)%60;
 8001e7c:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <modify_clock+0x56c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <modify_clock+0x570>)
 8001e84:	fb83 1302 	smull	r1, r3, r3, r2
 8001e88:	4413      	add	r3, r2
 8001e8a:	1159      	asrs	r1, r3, #5
 8001e8c:	17d3      	asrs	r3, r2, #31
 8001e8e:	1ac9      	subs	r1, r1, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	1a5b      	subs	r3, r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	1ad1      	subs	r1, r2, r3
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <modify_clock+0x56c>)
 8001e9e:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MIN, ds3231_min);
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <modify_clock+0x56c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff f9e6 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001eac:	f7ff fa06 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <modify_clock+0x56c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	2318      	movs	r3, #24
 8001eb8:	9302      	str	r3, [sp, #8]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	2164      	movs	r1, #100	; 0x64
 8001ec8:	206e      	movs	r0, #110	; 0x6e
 8001eca:	f000 fc55 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8001ece:	e249      	b.n	8002364 <modify_clock+0x9bc>
	case MODIFY_SECOND:
		if (counter_modify_clock == 0){
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <modify_clock+0x558>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d123      	bne.n	8001f20 <modify_clock+0x578>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <modify_clock+0x574>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	2318      	movs	r3, #24
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2302      	movs	r3, #2
 8001eee:	2164      	movs	r1, #100	; 0x64
 8001ef0:	2096      	movs	r0, #150	; 0x96
 8001ef2:	f000 fc41 	bl	8002778 <lcd_ShowIntNum>
 8001ef6:	e025      	b.n	8001f44 <modify_clock+0x59c>
 8001ef8:	200000f3 	.word	0x200000f3
 8001efc:	24924925 	.word	0x24924925
 8001f00:	200000a8 	.word	0x200000a8
 8001f04:	200000f5 	.word	0x200000f5
 8001f08:	200000d0 	.word	0x200000d0
 8001f0c:	2aaaaaab 	.word	0x2aaaaaab
 8001f10:	200000aa 	.word	0x200000aa
 8001f14:	200000f2 	.word	0x200000f2
 8001f18:	88888889 	.word	0x88888889
 8001f1c:	200000f0 	.word	0x200000f0
		}
		else if (counter_modify_clock == 5){
 8001f20:	4b8b      	ldr	r3, [pc, #556]	; (8002150 <modify_clock+0x7a8>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d10d      	bne.n	8001f44 <modify_clock+0x59c>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, BLACK, BLACK, 24);
 8001f28:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <modify_clock+0x7ac>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	2318      	movs	r3, #24
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2300      	movs	r3, #0
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	2164      	movs	r1, #100	; 0x64
 8001f3e:	2096      	movs	r0, #150	; 0x96
 8001f40:	f000 fc1a 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <modify_clock+0x7b0>)
 8001f46:	88db      	ldrh	r3, [r3, #6]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d128      	bne.n	8001f9e <modify_clock+0x5f6>
			ds3231_sec = (ds3231_sec+1)%60;
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <modify_clock+0x7ac>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <modify_clock+0x7b4>)
 8001f54:	fb83 1302 	smull	r1, r3, r3, r2
 8001f58:	4413      	add	r3, r2
 8001f5a:	1159      	asrs	r1, r3, #5
 8001f5c:	17d3      	asrs	r3, r2, #31
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	460b      	mov	r3, r1
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a5b      	subs	r3, r3, r1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	1ad1      	subs	r1, r2, r3
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <modify_clock+0x7ac>)
 8001f6e:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001f70:	4b78      	ldr	r3, [pc, #480]	; (8002154 <modify_clock+0x7ac>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff f97e 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8001f7c:	f7ff f99e 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001f80:	4b74      	ldr	r3, [pc, #464]	; (8002154 <modify_clock+0x7ac>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	2318      	movs	r3, #24
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2302      	movs	r3, #2
 8001f96:	2164      	movs	r1, #100	; 0x64
 8001f98:	2096      	movs	r0, #150	; 0x96
 8001f9a:	f000 fbed 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 8001f9e:	4b6e      	ldr	r3, [pc, #440]	; (8002158 <modify_clock+0x7b0>)
 8001fa0:	88db      	ldrh	r3, [r3, #6]
 8001fa2:	2b27      	cmp	r3, #39	; 0x27
 8001fa4:	f240 81e0 	bls.w	8002368 <modify_clock+0x9c0>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <modify_clock+0x7b8>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	425a      	negs	r2, r3
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	bf58      	it	pl
 8001fba:	4253      	negpl	r3, r2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b68      	ldr	r3, [pc, #416]	; (8002160 <modify_clock+0x7b8>)
 8001fc0:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <modify_clock+0x7b8>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 81ce 	bne.w	8002368 <modify_clock+0x9c0>
				ds3231_sec = (ds3231_sec+1)%60;
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <modify_clock+0x7ac>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	4b62      	ldr	r3, [pc, #392]	; (800215c <modify_clock+0x7b4>)
 8001fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd8:	4413      	add	r3, r2
 8001fda:	1159      	asrs	r1, r3, #5
 8001fdc:	17d3      	asrs	r3, r2, #31
 8001fde:	1ac9      	subs	r1, r1, r3
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	1ad1      	subs	r1, r2, r3
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <modify_clock+0x7ac>)
 8001fee:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001ff0:	4b58      	ldr	r3, [pc, #352]	; (8002154 <modify_clock+0x7ac>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff f93e 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8001ffc:	f7ff f95e 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002000:	4b54      	ldr	r3, [pc, #336]	; (8002154 <modify_clock+0x7ac>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b29a      	uxth	r2, r3
 8002006:	2318      	movs	r3, #24
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2300      	movs	r3, #0
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2302      	movs	r3, #2
 8002016:	2164      	movs	r1, #100	; 0x64
 8002018:	2096      	movs	r0, #150	; 0x96
 800201a:	f000 fbad 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 800201e:	e1a3      	b.n	8002368 <modify_clock+0x9c0>
	case MODIFY_DAY:
		if (counter_modify_clock == 0){
 8002020:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <modify_clock+0x7a8>)
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d111      	bne.n	800204c <modify_clock+0x6a4>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002028:	4b4e      	ldr	r3, [pc, #312]	; (8002164 <modify_clock+0x7bc>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	2318      	movs	r3, #24
 8002034:	9302      	str	r3, [sp, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2302      	movs	r3, #2
 8002042:	2182      	movs	r1, #130	; 0x82
 8002044:	2014      	movs	r0, #20
 8002046:	f000 fb97 	bl	8002778 <lcd_ShowIntNum>
 800204a:	e013      	b.n	8002074 <modify_clock+0x6cc>
		}
		else if (counter_modify_clock == 5){
 800204c:	4b40      	ldr	r3, [pc, #256]	; (8002150 <modify_clock+0x7a8>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10f      	bne.n	8002074 <modify_clock+0x6cc>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, BLACK, BLACK, 24);
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <modify_clock+0x7bc>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	3301      	adds	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	2318      	movs	r3, #24
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2300      	movs	r3, #0
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2300      	movs	r3, #0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2302      	movs	r3, #2
 800206c:	2182      	movs	r1, #130	; 0x82
 800206e:	2014      	movs	r0, #20
 8002070:	f000 fb82 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <modify_clock+0x7b0>)
 8002076:	88db      	ldrh	r3, [r3, #6]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d11e      	bne.n	80020ba <modify_clock+0x712>
			ds3231_day += 1;
 800207c:	4b39      	ldr	r3, [pc, #228]	; (8002164 <modify_clock+0x7bc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <modify_clock+0x7bc>)
 8002086:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_DAY, ds3231_day);
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <modify_clock+0x7bc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	2003      	movs	r0, #3
 8002090:	f7ff f8f2 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 8002094:	f7ff f912 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <modify_clock+0x7bc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	2318      	movs	r3, #24
 80020a4:	9302      	str	r3, [sp, #8]
 80020a6:	2300      	movs	r3, #0
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2302      	movs	r3, #2
 80020b2:	2182      	movs	r1, #130	; 0x82
 80020b4:	2014      	movs	r0, #20
 80020b6:	f000 fb5f 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <modify_clock+0x7b0>)
 80020bc:	88db      	ldrh	r3, [r3, #6]
 80020be:	2b27      	cmp	r3, #39	; 0x27
 80020c0:	f240 8154 	bls.w	800236c <modify_clock+0x9c4>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <modify_clock+0x7b8>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	425a      	negs	r2, r3
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	f002 0203 	and.w	r2, r2, #3
 80020d4:	bf58      	it	pl
 80020d6:	4253      	negpl	r3, r2
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <modify_clock+0x7b8>)
 80020dc:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <modify_clock+0x7b8>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 8142 	bne.w	800236c <modify_clock+0x9c4>
				ds3231_day += 1;
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <modify_clock+0x7bc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <modify_clock+0x7bc>)
 80020f2:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_DAY, ds3231_day);
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <modify_clock+0x7bc>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	2003      	movs	r0, #3
 80020fc:	f7ff f8bc 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002100:	f7ff f8dc 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <modify_clock+0x7bc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	3301      	adds	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	2318      	movs	r3, #24
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2182      	movs	r1, #130	; 0x82
 8002120:	2014      	movs	r0, #20
 8002122:	f000 fb29 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002126:	e121      	b.n	800236c <modify_clock+0x9c4>
	case MODIFY_MONTH:
		if (counter_modify_clock == 0){
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <modify_clock+0x7a8>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11d      	bne.n	800216c <modify_clock+0x7c4>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <modify_clock+0x7c0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	2318      	movs	r3, #24
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2300      	movs	r3, #0
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2302      	movs	r3, #2
 8002146:	2182      	movs	r1, #130	; 0x82
 8002148:	206e      	movs	r0, #110	; 0x6e
 800214a:	f000 fb15 	bl	8002778 <lcd_ShowIntNum>
 800214e:	e01f      	b.n	8002190 <modify_clock+0x7e8>
 8002150:	200000a8 	.word	0x200000a8
 8002154:	200000f0 	.word	0x200000f0
 8002158:	200000d0 	.word	0x200000d0
 800215c:	88888889 	.word	0x88888889
 8002160:	200000aa 	.word	0x200000aa
 8002164:	200000f4 	.word	0x200000f4
 8002168:	200000f6 	.word	0x200000f6
		}
		else if (counter_modify_clock == 5){
 800216c:	4b83      	ldr	r3, [pc, #524]	; (800237c <modify_clock+0x9d4>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10d      	bne.n	8002190 <modify_clock+0x7e8>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, BLACK, BLACK, 24);
 8002174:	4b82      	ldr	r3, [pc, #520]	; (8002380 <modify_clock+0x9d8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	2318      	movs	r3, #24
 800217c:	9302      	str	r3, [sp, #8]
 800217e:	2300      	movs	r3, #0
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2302      	movs	r3, #2
 8002188:	2182      	movs	r1, #130	; 0x82
 800218a:	206e      	movs	r0, #110	; 0x6e
 800218c:	f000 faf4 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 8002190:	4b7c      	ldr	r3, [pc, #496]	; (8002384 <modify_clock+0x9dc>)
 8002192:	88db      	ldrh	r3, [r3, #6]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d126      	bne.n	80021e6 <modify_clock+0x83e>
			ds3231_month = ds3231_month%12+1;
 8002198:	4b79      	ldr	r3, [pc, #484]	; (8002380 <modify_clock+0x9d8>)
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b7a      	ldr	r3, [pc, #488]	; (8002388 <modify_clock+0x9e0>)
 800219e:	fba3 1302 	umull	r1, r3, r3, r2
 80021a2:	08d9      	lsrs	r1, r3, #3
 80021a4:	460b      	mov	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b72      	ldr	r3, [pc, #456]	; (8002380 <modify_clock+0x9d8>)
 80021b6:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_MONTH, ds3231_month);
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <modify_clock+0x9d8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	2005      	movs	r0, #5
 80021c0:	f7ff f85a 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 80021c4:	f7ff f87a 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <modify_clock+0x9d8>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	2318      	movs	r3, #24
 80021d0:	9302      	str	r3, [sp, #8]
 80021d2:	2300      	movs	r3, #0
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2302      	movs	r3, #2
 80021de:	2182      	movs	r1, #130	; 0x82
 80021e0:	206e      	movs	r0, #110	; 0x6e
 80021e2:	f000 fac9 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <modify_clock+0x9dc>)
 80021e8:	88db      	ldrh	r3, [r3, #6]
 80021ea:	2b27      	cmp	r3, #39	; 0x27
 80021ec:	f240 80c0 	bls.w	8002370 <modify_clock+0x9c8>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80021f0:	4b66      	ldr	r3, [pc, #408]	; (800238c <modify_clock+0x9e4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	3301      	adds	r3, #1
 80021f6:	425a      	negs	r2, r3
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	f002 0203 	and.w	r2, r2, #3
 8002200:	bf58      	it	pl
 8002202:	4253      	negpl	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b61      	ldr	r3, [pc, #388]	; (800238c <modify_clock+0x9e4>)
 8002208:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 800220a:	4b60      	ldr	r3, [pc, #384]	; (800238c <modify_clock+0x9e4>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f040 80ae 	bne.w	8002370 <modify_clock+0x9c8>
				ds3231_month = ds3231_month%12+1;
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <modify_clock+0x9d8>)
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <modify_clock+0x9e0>)
 800221a:	fba3 1302 	umull	r1, r3, r3, r2
 800221e:	08d9      	lsrs	r1, r3, #3
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <modify_clock+0x9d8>)
 8002232:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_MONTH, ds3231_month);
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <modify_clock+0x9d8>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	2005      	movs	r0, #5
 800223c:	f7ff f81c 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002240:	f7ff f83c 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <modify_clock+0x9d8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b29a      	uxth	r2, r3
 800224a:	2318      	movs	r3, #24
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2302      	movs	r3, #2
 800225a:	2182      	movs	r1, #130	; 0x82
 800225c:	206e      	movs	r0, #110	; 0x6e
 800225e:	f000 fa8b 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002262:	e085      	b.n	8002370 <modify_clock+0x9c8>
	case MODIFY_YEAR:
		if (counter_modify_clock == 0){
 8002264:	4b45      	ldr	r3, [pc, #276]	; (800237c <modify_clock+0x9d4>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10f      	bne.n	800228c <modify_clock+0x8e4>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800226c:	4b48      	ldr	r3, [pc, #288]	; (8002390 <modify_clock+0x9e8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b29a      	uxth	r2, r3
 8002272:	2318      	movs	r3, #24
 8002274:	9302      	str	r3, [sp, #8]
 8002276:	2300      	movs	r3, #0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2302      	movs	r3, #2
 8002282:	2182      	movs	r1, #130	; 0x82
 8002284:	2096      	movs	r0, #150	; 0x96
 8002286:	f000 fa77 	bl	8002778 <lcd_ShowIntNum>
 800228a:	e011      	b.n	80022b0 <modify_clock+0x908>
		}
		else if (counter_modify_clock == 5){
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <modify_clock+0x9d4>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10d      	bne.n	80022b0 <modify_clock+0x908>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, BLACK, BLACK, 24);
 8002294:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <modify_clock+0x9e8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b29a      	uxth	r2, r3
 800229a:	2318      	movs	r3, #24
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2300      	movs	r3, #0
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	2182      	movs	r1, #130	; 0x82
 80022aa:	2096      	movs	r0, #150	; 0x96
 80022ac:	f000 fa64 	bl	8002778 <lcd_ShowIntNum>
		}

		if (button_count[3] == 1){
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <modify_clock+0x9dc>)
 80022b2:	88db      	ldrh	r3, [r3, #6]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11c      	bne.n	80022f2 <modify_clock+0x94a>
			ds3231_year += 1;
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <modify_clock+0x9e8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b33      	ldr	r3, [pc, #204]	; (8002390 <modify_clock+0x9e8>)
 80022c2:	701a      	strb	r2, [r3, #0]
			ds3231_Write(ADDRESS_YEAR, ds3231_year);
 80022c4:	4b32      	ldr	r3, [pc, #200]	; (8002390 <modify_clock+0x9e8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	2006      	movs	r0, #6
 80022cc:	f7fe ffd4 	bl	8001278 <ds3231_Write>
			ds3231_ReadTime();
 80022d0:	f7fe fff4 	bl	80012bc <ds3231_ReadTime>
			lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80022d4:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <modify_clock+0x9e8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	2318      	movs	r3, #24
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2302      	movs	r3, #2
 80022ea:	2182      	movs	r1, #130	; 0x82
 80022ec:	2096      	movs	r0, #150	; 0x96
 80022ee:	f000 fa43 	bl	8002778 <lcd_ShowIntNum>
		}
		if (button_count[3] >= 40){
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <modify_clock+0x9dc>)
 80022f4:	88db      	ldrh	r3, [r3, #6]
 80022f6:	2b27      	cmp	r3, #39	; 0x27
 80022f8:	d93c      	bls.n	8002374 <modify_clock+0x9cc>
			counter_200ms_clock = (counter_200ms_clock+1)%4;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <modify_clock+0x9e4>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	3301      	adds	r3, #1
 8002300:	425a      	negs	r2, r3
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	bf58      	it	pl
 800230c:	4253      	negpl	r3, r2
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <modify_clock+0x9e4>)
 8002312:	801a      	strh	r2, [r3, #0]
			if (counter_200ms_clock == 0){
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <modify_clock+0x9e4>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d12b      	bne.n	8002374 <modify_clock+0x9cc>
				ds3231_year += 1;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <modify_clock+0x9e8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <modify_clock+0x9e8>)
 8002326:	701a      	strb	r2, [r3, #0]
				ds3231_Write(ADDRESS_YEAR, ds3231_year);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <modify_clock+0x9e8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	2006      	movs	r0, #6
 8002330:	f7fe ffa2 	bl	8001278 <ds3231_Write>
				ds3231_ReadTime();
 8002334:	f7fe ffc2 	bl	80012bc <ds3231_ReadTime>
				lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <modify_clock+0x9e8>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b29a      	uxth	r2, r3
 800233e:	2318      	movs	r3, #24
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	2300      	movs	r3, #0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2302      	movs	r3, #2
 800234e:	2182      	movs	r1, #130	; 0x82
 8002350:	2096      	movs	r0, #150	; 0x96
 8002352:	f000 fa11 	bl	8002778 <lcd_ShowIntNum>
			}
		}
		break;
 8002356:	e00d      	b.n	8002374 <modify_clock+0x9cc>
	default:
		break;
 8002358:	bf00      	nop
 800235a:	e00c      	b.n	8002376 <modify_clock+0x9ce>
		break;
 800235c:	bf00      	nop
 800235e:	e00a      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002360:	bf00      	nop
 8002362:	e008      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002364:	bf00      	nop
 8002366:	e006      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002368:	bf00      	nop
 800236a:	e004      	b.n	8002376 <modify_clock+0x9ce>
		break;
 800236c:	bf00      	nop
 800236e:	e002      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <modify_clock+0x9ce>
		break;
 8002374:	bf00      	nop
	}

}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200000a8 	.word	0x200000a8
 8002380:	200000f6 	.word	0x200000f6
 8002384:	200000d0 	.word	0x200000d0
 8002388:	aaaaaaab 	.word	0xaaaaaaab
 800238c:	200000aa 	.word	0x200000aa
 8002390:	200000f1 	.word	0x200000f1

08002394 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <LCD_WR_REG+0x1c>)
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	8013      	strh	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	600ffffe 	.word	0x600ffffe

080023b4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <LCD_WR_DATA+0x1c>)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	8053      	strh	r3, [r2, #2]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	600ffffe 	.word	0x600ffffe

080023d4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <LCD_RD_DATA+0x20>)
 80023dc:	885b      	ldrh	r3, [r3, #2]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	b29b      	uxth	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	600ffffe 	.word	0x600ffffe

080023f8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4623      	mov	r3, r4
 8002408:	80fb      	strh	r3, [r7, #6]
 800240a:	4603      	mov	r3, r0
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
 8002412:	4613      	mov	r3, r2
 8002414:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002416:	202a      	movs	r0, #42	; 0x2a
 8002418:	f7ff ffbc 	bl	8002394 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffc6 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ffc0 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002434:	887b      	ldrh	r3, [r7, #2]
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ffba 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffb4 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800244c:	202b      	movs	r0, #43	; 0x2b
 800244e:	f7ff ffa1 	bl	8002394 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002452:	88bb      	ldrh	r3, [r7, #4]
 8002454:	0a1b      	lsrs	r3, r3, #8
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ffab 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ffa5 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800246a:	883b      	ldrh	r3, [r7, #0]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b29b      	uxth	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff9f 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002476:	883b      	ldrh	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	b29b      	uxth	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff99 	bl	80023b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002482:	202c      	movs	r0, #44	; 0x2c
 8002484:	f7ff ff86 	bl	8002394 <LCD_WR_REG>
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <lcd_Clear+0x70>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <lcd_Clear+0x70>)
 80024b4:	885b      	ldrh	r3, [r3, #2]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff ff9b 	bl	80023f8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	81fb      	strh	r3, [r7, #14]
 80024c6:	e011      	b.n	80024ec <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	81bb      	strh	r3, [r7, #12]
 80024cc:	e006      	b.n	80024dc <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff6f 	bl	80023b4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	81bb      	strh	r3, [r7, #12]
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <lcd_Clear+0x70>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	89ba      	ldrh	r2, [r7, #12]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3f3      	bcc.n	80024ce <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	3301      	adds	r3, #1
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <lcd_Clear+0x70>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	89fa      	ldrh	r2, [r7, #14]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3e8      	bcc.n	80024c8 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200001a4 	.word	0x200001a4

08002504 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	4604      	mov	r4, r0
 800250c:	4608      	mov	r0, r1
 800250e:	4611      	mov	r1, r2
 8002510:	461a      	mov	r2, r3
 8002512:	4623      	mov	r3, r4
 8002514:	80fb      	strh	r3, [r7, #6]
 8002516:	4603      	mov	r3, r0
 8002518:	80bb      	strh	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	883b      	ldrh	r3, [r7, #0]
 800252a:	3b01      	subs	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	88b9      	ldrh	r1, [r7, #4]
 8002530:	88f8      	ldrh	r0, [r7, #6]
 8002532:	f7ff ff61 	bl	80023f8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002536:	88bb      	ldrh	r3, [r7, #4]
 8002538:	81fb      	strh	r3, [r7, #14]
 800253a:	e010      	b.n	800255e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	81bb      	strh	r3, [r7, #12]
 8002540:	e006      	b.n	8002550 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002542:	8c3b      	ldrh	r3, [r7, #32]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800254a:	89bb      	ldrh	r3, [r7, #12]
 800254c:	3301      	adds	r3, #1
 800254e:	81bb      	strh	r3, [r7, #12]
 8002550:	89ba      	ldrh	r2, [r7, #12]
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	429a      	cmp	r2, r3
 8002556:	d3f4      	bcc.n	8002542 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002558:	89fb      	ldrh	r3, [r7, #14]
 800255a:	3301      	adds	r3, #1
 800255c:	81fb      	strh	r3, [r7, #14]
 800255e:	89fa      	ldrh	r2, [r7, #14]
 8002560:	883b      	ldrh	r3, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d3ea      	bcc.n	800253c <lcd_Fill+0x38>
		}
	}
}
 8002566:	bf00      	nop
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}

08002570 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	460b      	mov	r3, r1
 800257c:	80bb      	strh	r3, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002582:	88bb      	ldrh	r3, [r7, #4]
 8002584:	88fa      	ldrh	r2, [r7, #6]
 8002586:	88b9      	ldrh	r1, [r7, #4]
 8002588:	88f8      	ldrh	r0, [r7, #6]
 800258a:	f7ff ff35 	bl	80023f8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff0f 	bl	80023b4 <LCD_WR_DATA>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b087      	sub	sp, #28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	80fb      	strh	r3, [r7, #6]
 80025b2:	4603      	mov	r3, r0
 80025b4:	80bb      	strh	r3, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70fb      	strb	r3, [r7, #3]
 80025ba:	4613      	mov	r3, r2
 80025bc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80025be:	2300      	movs	r3, #0
 80025c0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80025c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	fb12 f303 	smulbb	r3, r2, r3
 80025f6:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	3b20      	subs	r3, #32
 80025fc:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	b29a      	uxth	r2, r3
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4413      	add	r3, r2
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29c      	uxth	r4, r3
 800260c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002610:	b29a      	uxth	r2, r3
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	88b9      	ldrh	r1, [r7, #4]
 800261e:	88f8      	ldrh	r0, [r7, #6]
 8002620:	4622      	mov	r2, r4
 8002622:	f7ff fee9 	bl	80023f8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002626:	2300      	movs	r3, #0
 8002628:	827b      	strh	r3, [r7, #18]
 800262a:	e07a      	b.n	8002722 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800262c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d028      	beq.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8002634:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002638:	2b10      	cmp	r3, #16
 800263a:	d108      	bne.n	800264e <lcd_ShowChar+0xae>
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	8a7b      	ldrh	r3, [r7, #18]
 8002640:	493c      	ldr	r1, [pc, #240]	; (8002734 <lcd_ShowChar+0x194>)
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	440a      	add	r2, r1
 8002646:	4413      	add	r3, r2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	75fb      	strb	r3, [r7, #23]
 800264c:	e01b      	b.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 800264e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002652:	2b18      	cmp	r3, #24
 8002654:	d10b      	bne.n	800266e <lcd_ShowChar+0xce>
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	8a79      	ldrh	r1, [r7, #18]
 800265a:	4837      	ldr	r0, [pc, #220]	; (8002738 <lcd_ShowChar+0x198>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4403      	add	r3, r0
 8002666:	440b      	add	r3, r1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	75fb      	strb	r3, [r7, #23]
 800266c:	e00b      	b.n	8002686 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800266e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002672:	2b20      	cmp	r3, #32
 8002674:	d15a      	bne.n	800272c <lcd_ShowChar+0x18c>
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	8a7b      	ldrh	r3, [r7, #18]
 800267a:	4930      	ldr	r1, [pc, #192]	; (800273c <lcd_ShowChar+0x19c>)
 800267c:	0192      	lsls	r2, r2, #6
 800267e:	440a      	add	r2, r1
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002686:	2300      	movs	r3, #0
 8002688:	75bb      	strb	r3, [r7, #22]
 800268a:	e044      	b.n	8002716 <lcd_ShowChar+0x176>
		{
			if(!mode)
 800268c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d120      	bne.n	80026d6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002694:	7dfa      	ldrb	r2, [r7, #23]
 8002696:	7dbb      	ldrb	r3, [r7, #22]
 8002698:	fa42 f303 	asr.w	r3, r2, r3
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <lcd_ShowChar+0x10e>
 80026a4:	883b      	ldrh	r3, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe84 	bl	80023b4 <LCD_WR_DATA>
 80026ac:	e003      	b.n	80026b6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80026ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fe7f 	bl	80023b4 <LCD_WR_DATA>
				m++;
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	3301      	adds	r3, #1
 80026ba:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80026bc:	7d7b      	ldrb	r3, [r7, #21]
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80026c4:	fb02 f201 	mul.w	r2, r2, r1
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11f      	bne.n	8002710 <lcd_ShowChar+0x170>
				{
					m=0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	757b      	strb	r3, [r7, #21]
					break;
 80026d4:	e022      	b.n	800271c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80026d6:	7dfa      	ldrb	r2, [r7, #23]
 80026d8:	7dbb      	ldrb	r3, [r7, #22]
 80026da:	fa42 f303 	asr.w	r3, r2, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <lcd_ShowChar+0x152>
 80026e6:	883a      	ldrh	r2, [r7, #0]
 80026e8:	88b9      	ldrh	r1, [r7, #4]
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff3f 	bl	8002570 <lcd_DrawPoint>
				x++;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	3301      	adds	r3, #1
 80026f6:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	8a3b      	ldrh	r3, [r7, #16]
 80026fc:	1ad2      	subs	r2, r2, r3
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	429a      	cmp	r2, r3
 8002702:	d105      	bne.n	8002710 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002704:	8a3b      	ldrh	r3, [r7, #16]
 8002706:	80fb      	strh	r3, [r7, #6]
					y++;
 8002708:	88bb      	ldrh	r3, [r7, #4]
 800270a:	3301      	adds	r3, #1
 800270c:	80bb      	strh	r3, [r7, #4]
					break;
 800270e:	e005      	b.n	800271c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002710:	7dbb      	ldrb	r3, [r7, #22]
 8002712:	3301      	adds	r3, #1
 8002714:	75bb      	strb	r3, [r7, #22]
 8002716:	7dbb      	ldrb	r3, [r7, #22]
 8002718:	2b07      	cmp	r3, #7
 800271a:	d9b7      	bls.n	800268c <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800271c:	8a7b      	ldrh	r3, [r7, #18]
 800271e:	3301      	adds	r3, #1
 8002720:	827b      	strh	r3, [r7, #18]
 8002722:	8a7a      	ldrh	r2, [r7, #18]
 8002724:	89bb      	ldrh	r3, [r7, #12]
 8002726:	429a      	cmp	r2, r3
 8002728:	d380      	bcc.n	800262c <lcd_ShowChar+0x8c>
 800272a:	e000      	b.n	800272e <lcd_ShowChar+0x18e>
		else return;
 800272c:	bf00      	nop
				}
			}
		}
	}
}
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd90      	pop	{r4, r7, pc}
 8002734:	08008e40 	.word	0x08008e40
 8002738:	08009430 	.word	0x08009430
 800273c:	0800a600 	.word	0x0800a600

08002740 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	460a      	mov	r2, r1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	4613      	mov	r3, r2
 800274e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002750:	2301      	movs	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002754:	e004      	b.n	8002760 <mypow+0x20>
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	79bb      	ldrb	r3, [r7, #6]
 8002762:	1e5a      	subs	r2, r3, #1
 8002764:	71ba      	strb	r2, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f5      	bne.n	8002756 <mypow+0x16>
	return result;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af04      	add	r7, sp, #16
 800277e:	4604      	mov	r4, r0
 8002780:	4608      	mov	r0, r1
 8002782:	4611      	mov	r1, r2
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	4603      	mov	r3, r0
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]
 8002792:	4613      	mov	r3, r2
 8002794:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002796:	2300      	movs	r3, #0
 8002798:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800279a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
 80027a6:	e059      	b.n	800285c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80027a8:	887c      	ldrh	r4, [r7, #2]
 80027aa:	787a      	ldrb	r2, [r7, #1]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	4619      	mov	r1, r3
 80027b8:	200a      	movs	r0, #10
 80027ba:	f7ff ffc1 	bl	8002740 <mypow>
 80027be:	4603      	mov	r3, r0
 80027c0:	fbb4 f1f3 	udiv	r1, r4, r3
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <lcd_ShowIntNum+0xf8>)
 80027c6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ca:	08da      	lsrs	r2, r3, #3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	1aca      	subs	r2, r1, r3
 80027d6:	4613      	mov	r3, r2
 80027d8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <lcd_ShowIntNum+0xac>
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	429a      	cmp	r2, r3
 80027e8:	da1c      	bge.n	8002824 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d117      	bne.n	8002820 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	fb12 f303 	smulbb	r3, r2, r3
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	4413      	add	r3, r2
 8002802:	b298      	uxth	r0, r3
 8002804:	8c3a      	ldrh	r2, [r7, #32]
 8002806:	88b9      	ldrh	r1, [r7, #4]
 8002808:	2300      	movs	r3, #0
 800280a:	9302      	str	r3, [sp, #8]
 800280c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	2220      	movs	r2, #32
 800281a:	f7ff fec1 	bl	80025a0 <lcd_ShowChar>
				continue;
 800281e:	e01a      	b.n	8002856 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002820:	2301      	movs	r3, #1
 8002822:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	b29a      	uxth	r2, r3
 8002828:	7b7b      	ldrb	r3, [r7, #13]
 800282a:	b29b      	uxth	r3, r3
 800282c:	fb12 f303 	smulbb	r3, r2, r3
 8002830:	b29a      	uxth	r2, r3
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4413      	add	r3, r2
 8002836:	b298      	uxth	r0, r3
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	3330      	adds	r3, #48	; 0x30
 800283c:	b2da      	uxtb	r2, r3
 800283e:	8c3c      	ldrh	r4, [r7, #32]
 8002840:	88b9      	ldrh	r1, [r7, #4]
 8002842:	2300      	movs	r3, #0
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4623      	mov	r3, r4
 8002852:	f7ff fea5 	bl	80025a0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	787b      	ldrb	r3, [r7, #1]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3a1      	bcc.n	80027a8 <lcd_ShowIntNum+0x30>
	}
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop
 8002870:	cccccccd 	.word	0xcccccccd

08002874 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <lcd_SetDir+0x44>)
 8002890:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002894:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <lcd_SetDir+0x44>)
 8002898:	22f0      	movs	r2, #240	; 0xf0
 800289a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800289c:	e006      	b.n	80028ac <lcd_SetDir+0x38>
		lcddev.width=240;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <lcd_SetDir+0x44>)
 80028a0:	22f0      	movs	r2, #240	; 0xf0
 80028a2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <lcd_SetDir+0x44>)
 80028a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80028aa:	805a      	strh	r2, [r3, #2]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	200001a4 	.word	0x200001a4

080028bc <lcd_init>:


void lcd_init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028c6:	48aa      	ldr	r0, [pc, #680]	; (8002b70 <lcd_init+0x2b4>)
 80028c8:	f001 fcca 	bl	8004260 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80028cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d0:	f001 f962 	bl	8003b98 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028da:	48a5      	ldr	r0, [pc, #660]	; (8002b70 <lcd_init+0x2b4>)
 80028dc:	f001 fcc0 	bl	8004260 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80028e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028e4:	f001 f958 	bl	8003b98 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff ffc3 	bl	8002874 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80028ee:	20d3      	movs	r0, #211	; 0xd3
 80028f0:	f7ff fd50 	bl	8002394 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80028f4:	f7ff fd6e 	bl	80023d4 <LCD_RD_DATA>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b9d      	ldr	r3, [pc, #628]	; (8002b74 <lcd_init+0x2b8>)
 80028fe:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002900:	f7ff fd68 	bl	80023d4 <LCD_RD_DATA>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b9a      	ldr	r3, [pc, #616]	; (8002b74 <lcd_init+0x2b8>)
 800290a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800290c:	f7ff fd62 	bl	80023d4 <LCD_RD_DATA>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	4b97      	ldr	r3, [pc, #604]	; (8002b74 <lcd_init+0x2b8>)
 8002916:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002918:	4b96      	ldr	r3, [pc, #600]	; (8002b74 <lcd_init+0x2b8>)
 800291a:	889b      	ldrh	r3, [r3, #4]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	b29a      	uxth	r2, r3
 8002920:	4b94      	ldr	r3, [pc, #592]	; (8002b74 <lcd_init+0x2b8>)
 8002922:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002924:	f7ff fd56 	bl	80023d4 <LCD_RD_DATA>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <lcd_init+0x2b8>)
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	4313      	orrs	r3, r2
 8002932:	b29a      	uxth	r2, r3
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <lcd_init+0x2b8>)
 8002936:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002938:	20cf      	movs	r0, #207	; 0xcf
 800293a:	f7ff fd2b 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff fd38 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002944:	20c1      	movs	r0, #193	; 0xc1
 8002946:	f7ff fd35 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800294a:	2030      	movs	r0, #48	; 0x30
 800294c:	f7ff fd32 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002950:	20ed      	movs	r0, #237	; 0xed
 8002952:	f7ff fd1f 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002956:	2064      	movs	r0, #100	; 0x64
 8002958:	f7ff fd2c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800295c:	2003      	movs	r0, #3
 800295e:	f7ff fd29 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002962:	2012      	movs	r0, #18
 8002964:	f7ff fd26 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002968:	2081      	movs	r0, #129	; 0x81
 800296a:	f7ff fd23 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800296e:	20e8      	movs	r0, #232	; 0xe8
 8002970:	f7ff fd10 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002974:	2085      	movs	r0, #133	; 0x85
 8002976:	f7ff fd1d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800297a:	2010      	movs	r0, #16
 800297c:	f7ff fd1a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002980:	207a      	movs	r0, #122	; 0x7a
 8002982:	f7ff fd17 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002986:	20cb      	movs	r0, #203	; 0xcb
 8002988:	f7ff fd04 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800298c:	2039      	movs	r0, #57	; 0x39
 800298e:	f7ff fd11 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002992:	202c      	movs	r0, #44	; 0x2c
 8002994:	f7ff fd0e 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7ff fd0b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800299e:	2034      	movs	r0, #52	; 0x34
 80029a0:	f7ff fd08 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7ff fd05 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80029aa:	20f7      	movs	r0, #247	; 0xf7
 80029ac:	f7ff fcf2 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80029b0:	2020      	movs	r0, #32
 80029b2:	f7ff fcff 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80029b6:	20ea      	movs	r0, #234	; 0xea
 80029b8:	f7ff fcec 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fcf9 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7ff fcf6 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80029c8:	20c0      	movs	r0, #192	; 0xc0
 80029ca:	f7ff fce3 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80029ce:	201b      	movs	r0, #27
 80029d0:	f7ff fcf0 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80029d4:	20c1      	movs	r0, #193	; 0xc1
 80029d6:	f7ff fcdd 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fcea 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80029e0:	20c5      	movs	r0, #197	; 0xc5
 80029e2:	f7ff fcd7 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80029e6:	2030      	movs	r0, #48	; 0x30
 80029e8:	f7ff fce4 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80029ec:	2030      	movs	r0, #48	; 0x30
 80029ee:	f7ff fce1 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80029f2:	20c7      	movs	r0, #199	; 0xc7
 80029f4:	f7ff fcce 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80029f8:	20b7      	movs	r0, #183	; 0xb7
 80029fa:	f7ff fcdb 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80029fe:	2036      	movs	r0, #54	; 0x36
 8002a00:	f7ff fcc8 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8002a04:	2008      	movs	r0, #8
 8002a06:	f7ff fcd5 	bl	80023b4 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8002a0a:	203a      	movs	r0, #58	; 0x3a
 8002a0c:	f7ff fcc2 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002a10:	2055      	movs	r0, #85	; 0x55
 8002a12:	f7ff fccf 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002a16:	20b1      	movs	r0, #177	; 0xb1
 8002a18:	f7ff fcbc 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff fcc9 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002a22:	201a      	movs	r0, #26
 8002a24:	f7ff fcc6 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002a28:	20b6      	movs	r0, #182	; 0xb6
 8002a2a:	f7ff fcb3 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002a2e:	200a      	movs	r0, #10
 8002a30:	f7ff fcc0 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002a34:	20a2      	movs	r0, #162	; 0xa2
 8002a36:	f7ff fcbd 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002a3a:	20f2      	movs	r0, #242	; 0xf2
 8002a3c:	f7ff fcaa 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fcb7 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002a46:	2026      	movs	r0, #38	; 0x26
 8002a48:	f7ff fca4 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fcb1 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002a52:	20e0      	movs	r0, #224	; 0xe0
 8002a54:	f7ff fc9e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002a58:	200f      	movs	r0, #15
 8002a5a:	f7ff fcab 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002a5e:	202a      	movs	r0, #42	; 0x2a
 8002a60:	f7ff fca8 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002a64:	2028      	movs	r0, #40	; 0x28
 8002a66:	f7ff fca5 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002a6a:	2008      	movs	r0, #8
 8002a6c:	f7ff fca2 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002a70:	200e      	movs	r0, #14
 8002a72:	f7ff fc9f 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002a76:	2008      	movs	r0, #8
 8002a78:	f7ff fc9c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002a7c:	2054      	movs	r0, #84	; 0x54
 8002a7e:	f7ff fc99 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002a82:	20a9      	movs	r0, #169	; 0xa9
 8002a84:	f7ff fc96 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002a88:	2043      	movs	r0, #67	; 0x43
 8002a8a:	f7ff fc93 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002a8e:	200a      	movs	r0, #10
 8002a90:	f7ff fc90 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002a94:	200f      	movs	r0, #15
 8002a96:	f7ff fc8d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff fc8a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7ff fc87 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fc84 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff fc81 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002ab2:	20e1      	movs	r0, #225	; 0xe1
 8002ab4:	f7ff fc6e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7ff fc7b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002abe:	2015      	movs	r0, #21
 8002ac0:	f7ff fc78 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002ac4:	2017      	movs	r0, #23
 8002ac6:	f7ff fc75 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002aca:	2007      	movs	r0, #7
 8002acc:	f7ff fc72 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002ad0:	2011      	movs	r0, #17
 8002ad2:	f7ff fc6f 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002ad6:	2006      	movs	r0, #6
 8002ad8:	f7ff fc6c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002adc:	202b      	movs	r0, #43	; 0x2b
 8002ade:	f7ff fc69 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002ae2:	2056      	movs	r0, #86	; 0x56
 8002ae4:	f7ff fc66 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002ae8:	203c      	movs	r0, #60	; 0x3c
 8002aea:	f7ff fc63 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002aee:	2005      	movs	r0, #5
 8002af0:	f7ff fc60 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002af4:	2010      	movs	r0, #16
 8002af6:	f7ff fc5d 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff fc5a 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002b00:	203f      	movs	r0, #63	; 0x3f
 8002b02:	f7ff fc57 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002b06:	203f      	movs	r0, #63	; 0x3f
 8002b08:	f7ff fc54 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002b0c:	200f      	movs	r0, #15
 8002b0e:	f7ff fc51 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002b12:	202b      	movs	r0, #43	; 0x2b
 8002b14:	f7ff fc3e 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff fc4b 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff fc48 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f7ff fc45 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002b2a:	203f      	movs	r0, #63	; 0x3f
 8002b2c:	f7ff fc42 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002b30:	202a      	movs	r0, #42	; 0x2a
 8002b32:	f7ff fc2f 	bl	8002394 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fc3c 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7ff fc39 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff fc36 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002b48:	20ef      	movs	r0, #239	; 0xef
 8002b4a:	f7ff fc33 	bl	80023b4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002b4e:	2011      	movs	r0, #17
 8002b50:	f7ff fc20 	bl	8002394 <LCD_WR_REG>
	HAL_Delay(120);
 8002b54:	2078      	movs	r0, #120	; 0x78
 8002b56:	f001 f81f 	bl	8003b98 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002b5a:	2029      	movs	r0, #41	; 0x29
 8002b5c:	f7ff fc1a 	bl	8002394 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002b60:	2201      	movs	r2, #1
 8002b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b66:	4804      	ldr	r0, [pc, #16]	; (8002b78 <lcd_init+0x2bc>)
 8002b68:	f001 fb7a 	bl	8004260 <HAL_GPIO_WritePin>
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40020800 	.word	0x40020800
 8002b74:	200001a4 	.word	0x200001a4
 8002b78:	40020000 	.word	0x40020000

08002b7c <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	60ba      	str	r2, [r7, #8]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	81fb      	strh	r3, [r7, #14]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	81bb      	strh	r3, [r7, #12]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002b9a:	e048      	b.n	8002c2e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d145      	bne.n	8002c2e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002ba2:	89fa      	ldrh	r2, [r7, #14]
 8002ba4:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <lcd_ShowStr+0xc4>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc3f      	bgt.n	8002c38 <lcd_ShowStr+0xbc>
 8002bb8:	89ba      	ldrh	r2, [r7, #12]
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <lcd_ShowStr+0xc4>)
 8002bbc:	885b      	ldrh	r3, [r3, #2]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bc4:	1acb      	subs	r3, r1, r3
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dc36      	bgt.n	8002c38 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d902      	bls.n	8002bd8 <lcd_ShowStr+0x5c>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
 8002bd6:	e02a      	b.n	8002c2e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b0d      	cmp	r3, #13
 8002bde:	d10b      	bne.n	8002bf8 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	89bb      	ldrh	r3, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002bec:	8abb      	ldrh	r3, [r7, #20]
 8002bee:	81fb      	strh	r3, [r7, #14]
					str++;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	e017      	b.n	8002c28 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	781a      	ldrb	r2, [r3, #0]
 8002bfc:	88fc      	ldrh	r4, [r7, #6]
 8002bfe:	89b9      	ldrh	r1, [r7, #12]
 8002c00:	89f8      	ldrh	r0, [r7, #14]
 8002c02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7ff fcc4 	bl	80025a0 <lcd_ShowChar>
					x+=sizey/2;
 8002c18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	4413      	add	r3, r2
 8002c26:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1b2      	bne.n	8002b9c <lcd_ShowStr+0x20>
 8002c36:	e000      	b.n	8002c3a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002c38:	bf00      	nop
			}
		}
	}
}
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd90      	pop	{r4, r7, pc}
 8002c40:	200001a4 	.word	0x200001a4

08002c44 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af04      	add	r7, sp, #16
 8002c4a:	60ba      	str	r2, [r7, #8]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	81fb      	strh	r3, [r7, #14]
 8002c52:	460b      	mov	r3, r1
 8002c54:	81bb      	strh	r3, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f7fd fab8 	bl	80001d0 <strlen>
 8002c60:	4603      	mov	r3, r0
 8002c62:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <lcd_StrCenter+0x60>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	8afb      	ldrh	r3, [r7, #22]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	0fda      	lsrs	r2, r3, #31
 8002c72:	4413      	add	r3, r2
 8002c74:	105b      	asrs	r3, r3, #1
 8002c76:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002c78:	89fa      	ldrh	r2, [r7, #14]
 8002c7a:	8abb      	ldrh	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	89b9      	ldrh	r1, [r7, #12]
 8002c84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002c88:	9302      	str	r3, [sp, #8]
 8002c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	8c3b      	ldrh	r3, [r7, #32]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f7ff ff70 	bl	8002b7c <lcd_ShowStr>
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200001a4 	.word	0x200001a4

08002ca8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <led7_init+0x14>)
 8002cb2:	f001 fad5 	bl	8004260 <HAL_GPIO_WritePin>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021800 	.word	0x40021800

08002cc0 <led7_Scan>:

void led7_Scan(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <led7_Scan+0x104>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <led7_Scan+0x104>)
 8002cce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <led7_Scan+0x108>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <led7_Scan+0x10c>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <led7_Scan+0x104>)
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <led7_Scan+0x104>)
 8002cea:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <led7_Scan+0x108>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d847      	bhi.n	8002d84 <led7_Scan+0xc4>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <led7_Scan+0x3c>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d2b 	.word	0x08002d2b
 8002d04:	08002d49 	.word	0x08002d49
 8002d08:	08002d67 	.word	0x08002d67
	case 0:
		spi_buffer |= 0x00b0;
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <led7_Scan+0x104>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <led7_Scan+0x104>)
 8002d18:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <led7_Scan+0x104>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <led7_Scan+0x104>)
 8002d26:	801a      	strh	r2, [r3, #0]
		break;
 8002d28:	e02d      	b.n	8002d86 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <led7_Scan+0x104>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <led7_Scan+0x104>)
 8002d36:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <led7_Scan+0x104>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f023 0320 	bic.w	r3, r3, #32
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <led7_Scan+0x104>)
 8002d44:	801a      	strh	r2, [r3, #0]
		break;
 8002d46:	e01e      	b.n	8002d86 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <led7_Scan+0x104>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <led7_Scan+0x104>)
 8002d54:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <led7_Scan+0x104>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <led7_Scan+0x104>)
 8002d62:	801a      	strh	r2, [r3, #0]
		break;
 8002d64:	e00f      	b.n	8002d86 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <led7_Scan+0x104>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <led7_Scan+0x104>)
 8002d72:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <led7_Scan+0x104>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <led7_Scan+0x104>)
 8002d80:	801a      	strh	r2, [r3, #0]
		break;
 8002d82:	e000      	b.n	8002d86 <led7_Scan+0xc6>
	default:
		break;
 8002d84:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <led7_Scan+0x108>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	425a      	negs	r2, r3
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	bf58      	it	pl
 8002d98:	4253      	negpl	r3, r2
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <led7_Scan+0x108>)
 8002d9c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2140      	movs	r1, #64	; 0x40
 8002da2:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <led7_Scan+0x110>)
 8002da4:	f001 fa5c 	bl	8004260 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002da8:	2301      	movs	r3, #1
 8002daa:	2202      	movs	r2, #2
 8002dac:	4905      	ldr	r1, [pc, #20]	; (8002dc4 <led7_Scan+0x104>)
 8002dae:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <led7_Scan+0x114>)
 8002db0:	f003 f85b 	bl	8005e6a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002db4:	2201      	movs	r2, #1
 8002db6:	2140      	movs	r1, #64	; 0x40
 8002db8:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <led7_Scan+0x110>)
 8002dba:	f001 fa51 	bl	8004260 <HAL_GPIO_WritePin>
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000008 	.word	0x20000008
 8002dc8:	200000ac 	.word	0x200000ac
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	200001e0 	.word	0x200001e0

08002dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dde:	f000 fe69 	bl	8003ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002de2:	f000 f9a5 	bl	8003130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002de6:	f7fe fb9d 	bl	8001524 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002dea:	f000 fca7 	bl	800373c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002dee:	f000 fb79 	bl	80034e4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002df2:	f7fe fac7 	bl	8001384 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002df6:	f7fe fc8d 	bl	8001714 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002dfa:	f000 fd79 	bl	80038f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002dfe:	f000 fa01 	bl	8003204 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7ff fb44 	bl	8002490 <lcd_Clear>
  updateTime();
 8002e08:	f000 fa20 	bl	800324c <updateTime>
  lcd_Fill(0, 250, 240, 320, BLACK);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e14:	22f0      	movs	r2, #240	; 0xf0
 8002e16:	21fa      	movs	r1, #250	; 0xfa
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7ff fb73 	bl	8002504 <lcd_Fill>
  lcd_ShowStr(70, 250, "NORMAL MODE", WHITE, BLACK, 24, 0);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	2318      	movs	r3, #24
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2e:	4aae      	ldr	r2, [pc, #696]	; (80030e8 <main+0x310>)
 8002e30:	21fa      	movs	r1, #250	; 0xfa
 8002e32:	2046      	movs	r0, #70	; 0x46
 8002e34:	f7ff fea2 	bl	8002b7c <lcd_ShowStr>
  int status = UPDATE_HOURS;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  // Periodic timer interrupt flag
	  if (flag_timer2) {
 8002e3c:	4bab      	ldr	r3, [pc, #684]	; (80030ec <main+0x314>)
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d057      	beq.n	8002ef4 <main+0x11c>
		  flag_timer2 = 0;
 8002e44:	4ba9      	ldr	r3, [pc, #676]	; (80030ec <main+0x314>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	801a      	strh	r2, [r3, #0]

		  // Other periodic tasks
		  button_Scan();
 8002e4a:	f7fe f965 	bl	8001118 <button_Scan>
		  update_state();
 8002e4e:	f7fe fcd7 	bl	8001800 <update_state>
		  clock_run();
 8002e52:	f7fe fd89 	bl	8001968 <clock_run>

		  // Check for button press to enter UART update mode
		  update_time_uart();
 8002e56:	f000 fa99 	bl	800338c <update_time_uart>

		  // Monitor timeout if waiting for a response
		  if (update_time_uart_flag) {
 8002e5a:	4ba5      	ldr	r3, [pc, #660]	; (80030f0 <main+0x318>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d048      	beq.n	8002ef4 <main+0x11c>
			  if (timeout_flag) {
 8002e62:	4ba4      	ldr	r3, [pc, #656]	; (80030f4 <main+0x31c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d044      	beq.n	8002ef4 <main+0x11c>
				  timeout_timer += 50; // Assuming the timer interval is 50ms
 8002e6a:	4ba3      	ldr	r3, [pc, #652]	; (80030f8 <main+0x320>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	4aa1      	ldr	r2, [pc, #644]	; (80030f8 <main+0x320>)
 8002e72:	6013      	str	r3, [r2, #0]

				  if (timeout_timer >= TIMEOUT_PERIOD) {
 8002e74:	4ba0      	ldr	r3, [pc, #640]	; (80030f8 <main+0x320>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d939      	bls.n	8002ef4 <main+0x11c>
					  timeout_timer = 0; // Reset the timer for the next attempt
 8002e80:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <main+0x320>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
					  retry_count++;
 8002e86:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <main+0x324>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b9b      	ldr	r3, [pc, #620]	; (80030fc <main+0x324>)
 8002e90:	701a      	strb	r2, [r3, #0]

					  if (retry_count < MAX_RETRY) {
 8002e92:	4b9a      	ldr	r3, [pc, #616]	; (80030fc <main+0x324>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d818      	bhi.n	8002ecc <main+0xf4>
						  // Retry sending the request
						  switch (status) {
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d011      	beq.n	8002ec4 <main+0xec>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	dc26      	bgt.n	8002ef4 <main+0x11c>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <main+0xdc>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d004      	beq.n	8002ebc <main+0xe4>
 8002eb2:	e01f      	b.n	8002ef4 <main+0x11c>
							  case UPDATE_HOURS:
								  uart_Rs232SendString("Hours\n");
 8002eb4:	4892      	ldr	r0, [pc, #584]	; (8003100 <main+0x328>)
 8002eb6:	f000 fcc1 	bl	800383c <uart_Rs232SendString>
								  break;
 8002eba:	e01b      	b.n	8002ef4 <main+0x11c>
							  case UPDATE_MINS:
								  uart_Rs232SendString("Minutes\n");
 8002ebc:	4891      	ldr	r0, [pc, #580]	; (8003104 <main+0x32c>)
 8002ebe:	f000 fcbd 	bl	800383c <uart_Rs232SendString>
								  break;
 8002ec2:	e017      	b.n	8002ef4 <main+0x11c>
							  case UPDATE_SECS:
								  uart_Rs232SendString("Seconds\n");
 8002ec4:	4890      	ldr	r0, [pc, #576]	; (8003108 <main+0x330>)
 8002ec6:	f000 fcb9 	bl	800383c <uart_Rs232SendString>
								  break;
 8002eca:	e013      	b.n	8002ef4 <main+0x11c>
						  }
					  } else {
						  // Exceeded retry limit, display error and reset
						  lcd_StrCenter(0, 20, "Error: No response!", RED, BLACK, 16, 0);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9302      	str	r3, [sp, #8]
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002edc:	4a8b      	ldr	r2, [pc, #556]	; (800310c <main+0x334>)
 8002ede:	2114      	movs	r1, #20
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7ff feaf 	bl	8002c44 <lcd_StrCenter>
						  reset_timeout(); // Reset timeout and retry counters
 8002ee6:	f000 fa91 	bl	800340c <reset_timeout>
						  status = UPDATE_HOURS; // Reset state machine to initial state
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
						  update_time_uart_flag = 0;
 8002eee:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <main+0x318>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }

	  // Process received data if available
	  if (buffer_flag && update_time_uart_flag) {
 8002ef4:	4b86      	ldr	r3, [pc, #536]	; (8003110 <main+0x338>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80bf 	beq.w	800307c <main+0x2a4>
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <main+0x318>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80ba 	beq.w	800307c <main+0x2a4>
		  buffer_flag = 0; // Clear the buffer flag
 8002f08:	4b81      	ldr	r3, [pc, #516]	; (8003110 <main+0x338>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	f200 80b5 	bhi.w	8003080 <main+0x2a8>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <main+0x144>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f8f 	.word	0x08002f8f
 8002f24:	08002ff1 	.word	0x08002ff1
 8002f28:	08003053 	.word	0x08003053

		  // Process data based on the current state
		  switch (status) {
			  case UPDATE_HOURS:
				  if (isInteger(rcv)) {
 8002f2c:	4879      	ldr	r0, [pc, #484]	; (8003114 <main+0x33c>)
 8002f2e:	f000 fa4d 	bl	80033cc <isInteger>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d026      	beq.n	8002f86 <main+0x1ae>
					  int hour = atoi(rcv);
 8002f38:	4876      	ldr	r0, [pc, #472]	; (8003114 <main+0x33c>)
 8002f3a:	f005 fa13 	bl	8008364 <atoi>
 8002f3e:	6038      	str	r0, [r7, #0]
					  if (hour >= 0 && hour < 24) {
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db1b      	blt.n	8002f7e <main+0x1a6>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b17      	cmp	r3, #23
 8002f4a:	dc18      	bgt.n	8002f7e <main+0x1a6>
						  ds3231_Write(ADDRESS_HOUR, hour);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4619      	mov	r1, r3
 8002f52:	2002      	movs	r0, #2
 8002f54:	f7fe f990 	bl	8001278 <ds3231_Write>
						  lcd_ShowStr(20, 160, "Hours updated", GREEN, BLACK, 16, 0);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f68:	4a6b      	ldr	r2, [pc, #428]	; (8003118 <main+0x340>)
 8002f6a:	21a0      	movs	r1, #160	; 0xa0
 8002f6c:	2014      	movs	r0, #20
 8002f6e:	f7ff fe05 	bl	8002b7c <lcd_ShowStr>
						  status = UPDATE_MINS; // Proceed to updating minutes
 8002f72:	2301      	movs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
						  reset_timeout();     // Clear timeout after valid response
 8002f76:	f000 fa49 	bl	800340c <reset_timeout>
					  if (hour >= 0 && hour < 24) {
 8002f7a:	bf00      	nop
						  uart_Rs232SendString("Hours\n"); // Resend request for hours
					  }
				  } else {
					  uart_Rs232SendString("Hours\n"); // Resend request for hours
				  }
				  break;
 8002f7c:	e081      	b.n	8003082 <main+0x2aa>
						  uart_Rs232SendString("Hours\n"); // Resend request for hours
 8002f7e:	4860      	ldr	r0, [pc, #384]	; (8003100 <main+0x328>)
 8002f80:	f000 fc5c 	bl	800383c <uart_Rs232SendString>
				  break;
 8002f84:	e07d      	b.n	8003082 <main+0x2aa>
					  uart_Rs232SendString("Hours\n"); // Resend request for hours
 8002f86:	485e      	ldr	r0, [pc, #376]	; (8003100 <main+0x328>)
 8002f88:	f000 fc58 	bl	800383c <uart_Rs232SendString>
				  break;
 8002f8c:	e079      	b.n	8003082 <main+0x2aa>

			  case UPDATE_MINS:
				  if (isInteger(rcv)) {
 8002f8e:	4861      	ldr	r0, [pc, #388]	; (8003114 <main+0x33c>)
 8002f90:	f000 fa1c 	bl	80033cc <isInteger>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d026      	beq.n	8002fe8 <main+0x210>
					  int mins = atoi(rcv);
 8002f9a:	485e      	ldr	r0, [pc, #376]	; (8003114 <main+0x33c>)
 8002f9c:	f005 f9e2 	bl	8008364 <atoi>
 8002fa0:	6078      	str	r0, [r7, #4]
					  if (mins >= 0 && mins < 60) {
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db1b      	blt.n	8002fe0 <main+0x208>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b3b      	cmp	r3, #59	; 0x3b
 8002fac:	dc18      	bgt.n	8002fe0 <main+0x208>
						  ds3231_Write(ADDRESS_MIN, mins);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7fe f95f 	bl	8001278 <ds3231_Write>
						  lcd_ShowStr(20, 190, "Minutes updated", GREEN, BLACK, 16, 0);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002fca:	4a54      	ldr	r2, [pc, #336]	; (800311c <main+0x344>)
 8002fcc:	21be      	movs	r1, #190	; 0xbe
 8002fce:	2014      	movs	r0, #20
 8002fd0:	f7ff fdd4 	bl	8002b7c <lcd_ShowStr>
						  status = UPDATE_SECS; // Proceed to updating seconds
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
						  reset_timeout();     // Clear timeout after valid response
 8002fd8:	f000 fa18 	bl	800340c <reset_timeout>
					  if (mins >= 0 && mins < 60) {
 8002fdc:	bf00      	nop
						  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
					  }
				  } else {
					  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
				  }
				  break;
 8002fde:	e050      	b.n	8003082 <main+0x2aa>
						  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
 8002fe0:	4848      	ldr	r0, [pc, #288]	; (8003104 <main+0x32c>)
 8002fe2:	f000 fc2b 	bl	800383c <uart_Rs232SendString>
				  break;
 8002fe6:	e04c      	b.n	8003082 <main+0x2aa>
					  uart_Rs232SendString("Minutes\n"); // Resend request for minutes
 8002fe8:	4846      	ldr	r0, [pc, #280]	; (8003104 <main+0x32c>)
 8002fea:	f000 fc27 	bl	800383c <uart_Rs232SendString>
				  break;
 8002fee:	e048      	b.n	8003082 <main+0x2aa>

			  case UPDATE_SECS:
				  if (isInteger(rcv)) {
 8002ff0:	4848      	ldr	r0, [pc, #288]	; (8003114 <main+0x33c>)
 8002ff2:	f000 f9eb 	bl	80033cc <isInteger>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d026      	beq.n	800304a <main+0x272>
					  int secs = atoi(rcv);
 8002ffc:	4845      	ldr	r0, [pc, #276]	; (8003114 <main+0x33c>)
 8002ffe:	f005 f9b1 	bl	8008364 <atoi>
 8003002:	60b8      	str	r0, [r7, #8]
					  if (secs >= 0 && secs < 60) {
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db1b      	blt.n	8003042 <main+0x26a>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b3b      	cmp	r3, #59	; 0x3b
 800300e:	dc18      	bgt.n	8003042 <main+0x26a>
						  ds3231_Write(ADDRESS_SEC, secs);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	2000      	movs	r0, #0
 8003018:	f7fe f92e 	bl	8001278 <ds3231_Write>
						  lcd_ShowStr(20, 220, "Seconds updated", GREEN, BLACK, 16, 0);
 800301c:	2300      	movs	r3, #0
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	2310      	movs	r3, #16
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800302c:	4a3c      	ldr	r2, [pc, #240]	; (8003120 <main+0x348>)
 800302e:	21dc      	movs	r1, #220	; 0xdc
 8003030:	2014      	movs	r0, #20
 8003032:	f7ff fda3 	bl	8002b7c <lcd_ShowStr>
						  status = CONFIRM; // Proceed to confirmation
 8003036:	2303      	movs	r3, #3
 8003038:	60fb      	str	r3, [r7, #12]
						  reset_timeout(); // Clear timeout after valid response
 800303a:	f000 f9e7 	bl	800340c <reset_timeout>
					  if (secs >= 0 && secs < 60) {
 800303e:	bf00      	nop
						  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
					  }
				  } else {
					  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
				  }
				  break;
 8003040:	e01f      	b.n	8003082 <main+0x2aa>
						  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
 8003042:	4831      	ldr	r0, [pc, #196]	; (8003108 <main+0x330>)
 8003044:	f000 fbfa 	bl	800383c <uart_Rs232SendString>
				  break;
 8003048:	e01b      	b.n	8003082 <main+0x2aa>
					  uart_Rs232SendString("Seconds\n"); // Resend request for seconds
 800304a:	482f      	ldr	r0, [pc, #188]	; (8003108 <main+0x330>)
 800304c:	f000 fbf6 	bl	800383c <uart_Rs232SendString>
				  break;
 8003050:	e017      	b.n	8003082 <main+0x2aa>

			  case CONFIRM:
				  // Final confirmation and success message
				  lcd_StrCenter(0, 20, "Time updated successfully", GREEN, BLACK, 16, 0);
 8003052:	2300      	movs	r3, #0
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	2310      	movs	r3, #16
 8003058:	9301      	str	r3, [sp, #4]
 800305a:	2300      	movs	r3, #0
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003062:	4a30      	ldr	r2, [pc, #192]	; (8003124 <main+0x34c>)
 8003064:	2114      	movs	r1, #20
 8003066:	2000      	movs	r0, #0
 8003068:	f7ff fdec 	bl	8002c44 <lcd_StrCenter>
				  reset_timeout(); // Clear timeout and reset retry counters
 800306c:	f000 f9ce 	bl	800340c <reset_timeout>
				  status = UPDATE_HOURS; // Reset state machine for the next update
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
				  update_time_uart_flag = 0;
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <main+0x318>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
				  break;
 800307a:	e002      	b.n	8003082 <main+0x2aa>

			  default:
				  break;
		  }
	  }
 800307c:	bf00      	nop
 800307e:	e000      	b.n	8003082 <main+0x2aa>
				  break;
 8003080:	bf00      	nop

	  // Trigger sending a request if timeout_flag is not active
	  if (!timeout_flag && update_time_uart_flag) {
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <main+0x31c>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d14e      	bne.n	8003128 <main+0x350>
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <main+0x318>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d04a      	beq.n	8003128 <main+0x350>
		  switch (status) {
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d01d      	beq.n	80030d4 <main+0x2fc>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b02      	cmp	r3, #2
 800309c:	dc46      	bgt.n	800312c <main+0x354>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <main+0x2d4>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d00a      	beq.n	80030c0 <main+0x2e8>
				  timeout_flag = 1;  // Start the timeout timer
				  timeout_timer = 0; // Reset the timer
				  break;

			  default:
				  break;
 80030aa:	e03f      	b.n	800312c <main+0x354>
				  uart_Rs232SendString("Hours\n");
 80030ac:	4814      	ldr	r0, [pc, #80]	; (8003100 <main+0x328>)
 80030ae:	f000 fbc5 	bl	800383c <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <main+0x31c>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <main+0x320>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
				  break;
 80030be:	e036      	b.n	800312e <main+0x356>
				  uart_Rs232SendString("Minutes\n");
 80030c0:	4810      	ldr	r0, [pc, #64]	; (8003104 <main+0x32c>)
 80030c2:	f000 fbbb 	bl	800383c <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <main+0x31c>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <main+0x320>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
				  break;
 80030d2:	e02c      	b.n	800312e <main+0x356>
				  uart_Rs232SendString("Seconds\n");
 80030d4:	480c      	ldr	r0, [pc, #48]	; (8003108 <main+0x330>)
 80030d6:	f000 fbb1 	bl	800383c <uart_Rs232SendString>
				  timeout_flag = 1;  // Start the timeout timer
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <main+0x31c>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
				  timeout_timer = 0; // Reset the timer
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <main+0x320>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
				  break;
 80030e6:	e022      	b.n	800312e <main+0x356>
 80030e8:	08008d8c 	.word	0x08008d8c
 80030ec:	200000ba 	.word	0x200000ba
 80030f0:	200000b9 	.word	0x200000b9
 80030f4:	200000b8 	.word	0x200000b8
 80030f8:	200000b4 	.word	0x200000b4
 80030fc:	200000b0 	.word	0x200000b0
 8003100:	08008d98 	.word	0x08008d98
 8003104:	08008da0 	.word	0x08008da0
 8003108:	08008dac 	.word	0x08008dac
 800310c:	08008db8 	.word	0x08008db8
 8003110:	200000c6 	.word	0x200000c6
 8003114:	200002e4 	.word	0x200002e4
 8003118:	08008dcc 	.word	0x08008dcc
 800311c:	08008ddc 	.word	0x08008ddc
 8003120:	08008dec 	.word	0x08008dec
 8003124:	08008dfc 	.word	0x08008dfc
		  }
	  }
 8003128:	bf00      	nop
 800312a:	e687      	b.n	8002e3c <main+0x64>
				  break;
 800312c:	bf00      	nop
	  if (flag_timer2) {
 800312e:	e685      	b.n	8002e3c <main+0x64>

08003130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b094      	sub	sp, #80	; 0x50
 8003134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003136:	f107 0320 	add.w	r3, r7, #32
 800313a:	2230      	movs	r2, #48	; 0x30
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f005 f93e 	bl	80083c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <SystemClock_Config+0xcc>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <SystemClock_Config+0xcc>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	; 0x40
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <SystemClock_Config+0xcc>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <SystemClock_Config+0xd0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a21      	ldr	r2, [pc, #132]	; (8003200 <SystemClock_Config+0xd0>)
 800317a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <SystemClock_Config+0xd0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003190:	2301      	movs	r3, #1
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003194:	2310      	movs	r3, #16
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003198:	2302      	movs	r3, #2
 800319a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800319c:	2300      	movs	r3, #0
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031a0:	2308      	movs	r3, #8
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031a4:	23a8      	movs	r3, #168	; 0xa8
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031a8:	2302      	movs	r3, #2
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031ac:	2304      	movs	r3, #4
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b0:	f107 0320 	add.w	r3, r7, #32
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 f95b 	bl	8005470 <HAL_RCC_OscConfig>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031c0:	f000 f93a 	bl	8003438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c4:	230f      	movs	r3, #15
 80031c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c8:	2302      	movs	r3, #2
 80031ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80031d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	2105      	movs	r1, #5
 80031e2:	4618      	mov	r0, r3
 80031e4:	f002 fbbc 	bl	8005960 <HAL_RCC_ClockConfig>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031ee:	f000 f923 	bl	8003438 <Error_Handler>
  }
}
 80031f2:	bf00      	nop
 80031f4:	3750      	adds	r7, #80	; 0x50
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000

08003204 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8003208:	2200      	movs	r2, #0
 800320a:	2120      	movs	r1, #32
 800320c:	480e      	ldr	r0, [pc, #56]	; (8003248 <system_init+0x44>)
 800320e:	f001 f827 	bl	8004260 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	480c      	ldr	r0, [pc, #48]	; (8003248 <system_init+0x44>)
 8003218:	f001 f822 	bl	8004260 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2110      	movs	r1, #16
 8003220:	4809      	ldr	r0, [pc, #36]	; (8003248 <system_init+0x44>)
 8003222:	f001 f81d 	bl	8004260 <HAL_GPIO_WritePin>
	  timer_init();
 8003226:	f000 f90d 	bl	8003444 <timer_init>
	  led7_init();
 800322a:	f7ff fd3d 	bl	8002ca8 <led7_init>
	  button_init();
 800322e:	f7fd ff67 	bl	8001100 <button_init>
	  lcd_init();
 8003232:	f7ff fb43 	bl	80028bc <lcd_init>
	  uart_init_rs232();
 8003236:	f000 faf3 	bl	8003820 <uart_init_rs232>
	  ds3231_init();
 800323a:	f7fd ffd9 	bl	80011f0 <ds3231_init>
	  setTimer2(50);
 800323e:	2032      	movs	r0, #50	; 0x32
 8003240:	f000 f90a 	bl	8003458 <setTimer2>
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000

0800324c <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8003250:	2118      	movs	r1, #24
 8003252:	2006      	movs	r0, #6
 8003254:	f7fe f810 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8003258:	210b      	movs	r1, #11
 800325a:	2005      	movs	r0, #5
 800325c:	f7fe f80c 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 8003260:	210f      	movs	r1, #15
 8003262:	2004      	movs	r0, #4
 8003264:	f7fe f808 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8003268:	2106      	movs	r1, #6
 800326a:	2003      	movs	r0, #3
 800326c:	f7fe f804 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 7);
 8003270:	2107      	movs	r1, #7
 8003272:	2002      	movs	r0, #2
 8003274:	f7fe f800 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 40);
 8003278:	2128      	movs	r1, #40	; 0x28
 800327a:	2001      	movs	r0, #1
 800327c:	f7fd fffc 	bl	8001278 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 23);
 8003280:	2117      	movs	r1, #23
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fff8 	bl	8001278 <ds3231_Write>
}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}

0800328c <displayTime>:
        return 1;
    else
        return 0;
}

void displayTime(){
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8003292:	4b37      	ldr	r3, [pc, #220]	; (8003370 <displayTime+0xe4>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b29a      	uxth	r2, r3
 8003298:	2318      	movs	r3, #24
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	2300      	movs	r3, #0
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2302      	movs	r3, #2
 80032a8:	2164      	movs	r1, #100	; 0x64
 80032aa:	2046      	movs	r0, #70	; 0x46
 80032ac:	f7ff fa64 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <displayTime+0xe8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	2318      	movs	r3, #24
 80032b8:	9302      	str	r3, [sp, #8]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2302      	movs	r3, #2
 80032c6:	2164      	movs	r1, #100	; 0x64
 80032c8:	206e      	movs	r0, #110	; 0x6e
 80032ca:	f7ff fa55 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <displayTime+0xec>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	2318      	movs	r3, #24
 80032d6:	9302      	str	r3, [sp, #8]
 80032d8:	2300      	movs	r3, #0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2302      	movs	r3, #2
 80032e4:	2164      	movs	r1, #100	; 0x64
 80032e6:	2096      	movs	r0, #150	; 0x96
 80032e8:	f7ff fa46 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day+1, 2, YELLOW, BLACK, 24);
 80032ec:	4b23      	ldr	r3, [pc, #140]	; (800337c <displayTime+0xf0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	2318      	movs	r3, #24
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2302      	movs	r3, #2
 8003306:	2182      	movs	r1, #130	; 0x82
 8003308:	2014      	movs	r0, #20
 800330a:	f7ff fa35 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 800330e:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <displayTime+0xf4>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b29a      	uxth	r2, r3
 8003314:	2318      	movs	r3, #24
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	2300      	movs	r3, #0
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2302      	movs	r3, #2
 8003324:	2182      	movs	r1, #130	; 0x82
 8003326:	2046      	movs	r0, #70	; 0x46
 8003328:	f7ff fa26 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800332c:	4b15      	ldr	r3, [pc, #84]	; (8003384 <displayTime+0xf8>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b29a      	uxth	r2, r3
 8003332:	2318      	movs	r3, #24
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	2300      	movs	r3, #0
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2302      	movs	r3, #2
 8003342:	2182      	movs	r1, #130	; 0x82
 8003344:	206e      	movs	r0, #110	; 0x6e
 8003346:	f7ff fa17 	bl	8002778 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <displayTime+0xfc>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b29a      	uxth	r2, r3
 8003350:	2318      	movs	r3, #24
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	2300      	movs	r3, #0
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2302      	movs	r3, #2
 8003360:	2182      	movs	r1, #130	; 0x82
 8003362:	2096      	movs	r0, #150	; 0x96
 8003364:	f7ff fa08 	bl	8002778 <lcd_ShowIntNum>
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200000f5 	.word	0x200000f5
 8003374:	200000f2 	.word	0x200000f2
 8003378:	200000f0 	.word	0x200000f0
 800337c:	200000f4 	.word	0x200000f4
 8003380:	200000f3 	.word	0x200000f3
 8003384:	200000f6 	.word	0x200000f6
 8003388:	200000f1 	.word	0x200000f1

0800338c <update_time_uart>:

// Exercise 5 =================================================================

void update_time_uart(){
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <update_time_uart+0x34>)
 8003394:	8b1b      	ldrh	r3, [r3, #24]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10f      	bne.n	80033ba <update_time_uart+0x2e>
		lcd_StrCenter(0, 20, "Updating hours...", WHITE, BLACK, 16, 0);
 800339a:	2300      	movs	r3, #0
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	2310      	movs	r3, #16
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033aa:	4a06      	ldr	r2, [pc, #24]	; (80033c4 <update_time_uart+0x38>)
 80033ac:	2114      	movs	r1, #20
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7ff fc48 	bl	8002c44 <lcd_StrCenter>
		update_time_uart_flag = 1;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <update_time_uart+0x3c>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
	}
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200000d0 	.word	0x200000d0
 80033c4:	08008e18 	.word	0x08008e18
 80033c8:	200000b9 	.word	0x200000b9

080033cc <isInteger>:
    }
    return 1; // All characters are digits
}
*/

int isInteger(const char *str) {
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    if (*str == '\0') return 0;  // Empty string
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <isInteger+0x28>
 80033dc:	2300      	movs	r3, #0
 80033de:	e00e      	b.n	80033fe <isInteger+0x32>
    while (*str) {
        if (!isdigit(*str)) return 0;  // Check if each character is a digit
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3b30      	subs	r3, #48	; 0x30
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d901      	bls.n	80033ee <isInteger+0x22>
 80033ea:	2300      	movs	r3, #0
 80033ec:	e007      	b.n	80033fe <isInteger+0x32>
        str++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3301      	adds	r3, #1
 80033f2:	607b      	str	r3, [r7, #4]
    while (*str) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f1      	bne.n	80033e0 <isInteger+0x14>
    }
    return 1;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <reset_timeout>:

void reset_timeout() {
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
    timeout_flag = 0;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <reset_timeout+0x20>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
    timeout_timer = 0;
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <reset_timeout+0x24>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
    retry_count = 0;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <reset_timeout+0x28>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	200000b8 	.word	0x200000b8
 8003430:	200000b4 	.word	0x200000b4
 8003434:	200000b0 	.word	0x200000b0

08003438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800343c:	b672      	cpsid	i
}
 800343e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003440:	e7fe      	b.n	8003440 <Error_Handler+0x8>
	...

08003444 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <timer_init+0x10>)
 800344a:	f003 fac1 	bl	80069d0 <HAL_TIM_Base_Start_IT>
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000238 	.word	0x20000238

08003458 <setTimer2>:

void setTimer2(uint16_t duration){
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <setTimer2+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <setTimer2+0x2c>)
 800346a:	881a      	ldrh	r2, [r3, #0]
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <setTimer2+0x30>)
 800346e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <setTimer2+0x34>)
 8003472:	2200      	movs	r2, #0
 8003474:	801a      	strh	r2, [r3, #0]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	200000be 	.word	0x200000be
 8003488:	200000bc 	.word	0x200000bc
 800348c:	200000ba 	.word	0x200000ba

08003490 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d116      	bne.n	80034d0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034b4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034ca:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80034cc:	f7ff fbf8 	bl	8002cc0 <led7_Scan>
	}
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200000bc 	.word	0x200000bc
 80034dc:	200000ba 	.word	0x200000ba
 80034e0:	200000be 	.word	0x200000be

080034e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <MX_SPI1_Init+0x64>)
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <MX_SPI1_Init+0x68>)
 80034ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_SPI1_Init+0x64>)
 80034f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_SPI1_Init+0x64>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <MX_SPI1_Init+0x64>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_SPI1_Init+0x64>)
 8003504:	2200      	movs	r2, #0
 8003506:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <MX_SPI1_Init+0x64>)
 800350a:	2200      	movs	r2, #0
 800350c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <MX_SPI1_Init+0x64>)
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <MX_SPI1_Init+0x64>)
 8003518:	2200      	movs	r2, #0
 800351a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <MX_SPI1_Init+0x64>)
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <MX_SPI1_Init+0x64>)
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <MX_SPI1_Init+0x64>)
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <MX_SPI1_Init+0x64>)
 8003530:	220a      	movs	r2, #10
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <MX_SPI1_Init+0x64>)
 8003536:	f002 fc0f 	bl	8005d58 <HAL_SPI_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003540:	f7ff ff7a 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200001e0 	.word	0x200001e0
 800354c:	40013000 	.word	0x40013000

08003550 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <HAL_SPI_MspInit+0x84>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12b      	bne.n	80035ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 800357c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a10      	ldr	r2, [pc, #64]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <HAL_SPI_MspInit+0x88>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80035aa:	2338      	movs	r3, #56	; 0x38
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ba:	2305      	movs	r3, #5
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <HAL_SPI_MspInit+0x8c>)
 80035c6:	f000 fcaf 	bl	8003f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	; 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40013000 	.word	0x40013000
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020400 	.word	0x40020400

080035e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_MspInit+0x4c>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a0f      	ldr	r2, [pc, #60]	; (800362c <HAL_MspInit+0x4c>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_MspInit+0x4c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_MspInit+0x4c>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <HAL_MspInit+0x4c>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_MspInit+0x4c>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <NMI_Handler+0x4>

08003636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <HardFault_Handler+0x4>

0800363c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <MemManage_Handler+0x4>

08003642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <BusFault_Handler+0x4>

08003648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800364c:	e7fe      	b.n	800364c <UsageFault_Handler+0x4>

0800364e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800367c:	f000 fa6c 	bl	8003b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}

08003684 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <TIM2_IRQHandler+0x10>)
 800368a:	f003 fa11 	bl	8006ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000238 	.word	0x20000238

08003698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <USART1_IRQHandler+0x10>)
 800369e:	f003 fed9 	bl	8007454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000348 	.word	0x20000348

080036ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <_sbrk+0x5c>)
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <_sbrk+0x60>)
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c0:	4b13      	ldr	r3, [pc, #76]	; (8003710 <_sbrk+0x64>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <_sbrk+0x64>)
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <_sbrk+0x68>)
 80036cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <_sbrk+0x64>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d207      	bcs.n	80036ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036dc:	f004 fe46 	bl	800836c <__errno>
 80036e0:	4603      	mov	r3, r0
 80036e2:	220c      	movs	r2, #12
 80036e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036e6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ea:	e009      	b.n	8003700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <_sbrk+0x64>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <_sbrk+0x64>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	4a05      	ldr	r2, [pc, #20]	; (8003710 <_sbrk+0x64>)
 80036fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20020000 	.word	0x20020000
 800370c:	00000400 	.word	0x00000400
 8003710:	200000c0 	.word	0x200000c0
 8003714:	200003a0 	.word	0x200003a0

08003718 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <SystemInit+0x20>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <SystemInit+0x20>)
 8003724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003742:	f107 0308 	add.w	r3, r7, #8
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003750:	463b      	mov	r3, r7
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <MX_TIM2_Init+0x94>)
 800375a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800375e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <MX_TIM2_Init+0x94>)
 8003762:	f240 3247 	movw	r2, #839	; 0x347
 8003766:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003768:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <MX_TIM2_Init+0x94>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <MX_TIM2_Init+0x94>)
 8003770:	2263      	movs	r2, #99	; 0x63
 8003772:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <MX_TIM2_Init+0x94>)
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <MX_TIM2_Init+0x94>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003780:	4813      	ldr	r0, [pc, #76]	; (80037d0 <MX_TIM2_Init+0x94>)
 8003782:	f003 f8d5 	bl	8006930 <HAL_TIM_Base_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800378c:	f7ff fe54 	bl	8003438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003796:	f107 0308 	add.w	r3, r7, #8
 800379a:	4619      	mov	r1, r3
 800379c:	480c      	ldr	r0, [pc, #48]	; (80037d0 <MX_TIM2_Init+0x94>)
 800379e:	f003 fa8f 	bl	8006cc0 <HAL_TIM_ConfigClockSource>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037a8:	f7ff fe46 	bl	8003438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037b4:	463b      	mov	r3, r7
 80037b6:	4619      	mov	r1, r3
 80037b8:	4805      	ldr	r0, [pc, #20]	; (80037d0 <MX_TIM2_Init+0x94>)
 80037ba:	f003 fcab 	bl	8007114 <HAL_TIMEx_MasterConfigSynchronization>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037c4:	f7ff fe38 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037c8:	bf00      	nop
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000238 	.word	0x20000238

080037d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d115      	bne.n	8003812 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_TIM_Base_MspInit+0x48>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <HAL_TIM_Base_MspInit+0x48>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_TIM_Base_MspInit+0x48>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	201c      	movs	r0, #28
 8003808:	f000 fac5 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800380c:	201c      	movs	r0, #28
 800380e:	f000 fade 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800

08003820 <uart_init_rs232>:
uint8_t index_buffer = 0;
char rcv[100];
uint8_t msg[100];
uint8_t buffer_flag = 0;

void uart_init_rs232(){
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003824:	2201      	movs	r2, #1
 8003826:	4903      	ldr	r1, [pc, #12]	; (8003834 <uart_init_rs232+0x14>)
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <uart_init_rs232+0x18>)
 800382a:	f003 fde2 	bl	80073f2 <HAL_UART_Receive_IT>
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200000c4 	.word	0x200000c4
 8003838:	20000348 	.word	0x20000348

0800383c <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4907      	ldr	r1, [pc, #28]	; (8003864 <uart_Rs232SendString+0x28>)
 8003848:	4807      	ldr	r0, [pc, #28]	; (8003868 <uart_Rs232SendString+0x2c>)
 800384a:	f004 fdc1 	bl	80083d0 <siprintf>
 800384e:	4603      	mov	r3, r0
 8003850:	b29a      	uxth	r2, r3
 8003852:	230a      	movs	r3, #10
 8003854:	4904      	ldr	r1, [pc, #16]	; (8003868 <uart_Rs232SendString+0x2c>)
 8003856:	4805      	ldr	r0, [pc, #20]	; (800386c <uart_Rs232SendString+0x30>)
 8003858:	f003 fd39 	bl	80072ce <HAL_UART_Transmit>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	08008e2c 	.word	0x08008e2c
 8003868:	20000280 	.word	0x20000280
 800386c:	20000348 	.word	0x20000348

08003870 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
		buffer_flag = 1;
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
	}
	*/

	if (huart->Instance == USART1) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <HAL_UART_RxCpltCallback+0x68>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d125      	bne.n	80038ce <HAL_UART_RxCpltCallback+0x5e>
		// Store the received character into the ring buffer
		rcv[index_buffer] = receive_buffer1;
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_UART_RxCpltCallback+0x70>)
 800388a:	7819      	ldrb	r1, [r3, #0]
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_UART_RxCpltCallback+0x74>)
 800388e:	5499      	strb	r1, [r3, r2]

		// Check for end-of-message (newline character '\n')
		if (receive_buffer1 == '\n') {
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_UART_RxCpltCallback+0x70>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b0a      	cmp	r3, #10
 8003896:	d108      	bne.n	80038aa <HAL_UART_RxCpltCallback+0x3a>
			rcv[index_buffer] = '\0'; // Null-terminate the message
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_UART_RxCpltCallback+0x74>)
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]
			buffer_flag = 1;          // Set buffer flag to indicate a complete message
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_UART_RxCpltCallback+0x78>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
		}

		// Increment the index for the next character
		index_buffer++;
 80038aa:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 80038b4:	701a      	strb	r2, [r3, #0]

		// Wrap around if the end of the buffer is reached
		if (index_buffer >= 100) {
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b63      	cmp	r3, #99	; 0x63
 80038bc:	d902      	bls.n	80038c4 <HAL_UART_RxCpltCallback+0x54>
			index_buffer = 0;
 80038be:	4b07      	ldr	r3, [pc, #28]	; (80038dc <HAL_UART_RxCpltCallback+0x6c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
		}

		// Reactivate UART interrupt for the next byte
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80038c4:	2201      	movs	r2, #1
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <HAL_UART_RxCpltCallback+0x70>)
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <HAL_UART_RxCpltCallback+0x7c>)
 80038ca:	f003 fd92 	bl	80073f2 <HAL_UART_Receive_IT>
	}
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40011000 	.word	0x40011000
 80038dc:	200000c5 	.word	0x200000c5
 80038e0:	200000c4 	.word	0x200000c4
 80038e4:	200002e4 	.word	0x200002e4
 80038e8:	200000c6 	.word	0x200000c6
 80038ec:	20000348 	.word	0x20000348

080038f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038f4:	4b11      	ldr	r3, [pc, #68]	; (800393c <MX_USART1_UART_Init+0x4c>)
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <MX_USART1_UART_Init+0x50>)
 80038f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <MX_USART1_UART_Init+0x4c>)
 80038fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003900:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <MX_USART1_UART_Init+0x4c>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_USART1_UART_Init+0x4c>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <MX_USART1_UART_Init+0x4c>)
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <MX_USART1_UART_Init+0x4c>)
 8003916:	220c      	movs	r2, #12
 8003918:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <MX_USART1_UART_Init+0x4c>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <MX_USART1_UART_Init+0x4c>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003926:	4805      	ldr	r0, [pc, #20]	; (800393c <MX_USART1_UART_Init+0x4c>)
 8003928:	f003 fc84 	bl	8007234 <HAL_UART_Init>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003932:	f7ff fd81 	bl	8003438 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000348 	.word	0x20000348
 8003940:	40011000 	.word	0x40011000

08003944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_UART_MspInit+0x94>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d134      	bne.n	80039d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_UART_MspInit+0x98>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_UART_MspInit+0x98>)
 8003970:	f043 0310 	orr.w	r3, r3, #16
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_UART_MspInit+0x98>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_UART_MspInit+0x98>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a14      	ldr	r2, [pc, #80]	; (80039dc <HAL_UART_MspInit+0x98>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_UART_MspInit+0x98>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800399e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a4:	2302      	movs	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ac:	2303      	movs	r3, #3
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039b0:	2307      	movs	r3, #7
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	4809      	ldr	r0, [pc, #36]	; (80039e0 <HAL_UART_MspInit+0x9c>)
 80039bc:	f000 fab4 	bl	8003f28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2100      	movs	r1, #0
 80039c4:	2025      	movs	r0, #37	; 0x25
 80039c6:	f000 f9e6 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039ca:	2025      	movs	r0, #37	; 0x25
 80039cc:	f000 f9ff 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80039d0:	bf00      	nop
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40020000 	.word	0x40020000

080039e4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	0092      	lsls	r2, r2, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	b2db      	uxtb	r3, r3
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <DEC2BCD+0x44>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	08db      	lsrs	r3, r3, #3
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	b258      	sxtb	r0, r3
 8003a32:	79fa      	ldrb	r2, [r7, #7]
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <DEC2BCD+0x44>)
 8003a36:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3a:	08d9      	lsrs	r1, r3, #3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	4303      	orrs	r3, r0
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	cccccccd 	.word	0xcccccccd

08003a60 <Reset_Handler>:
 8003a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a98 <LoopFillZerobss+0x12>
 8003a64:	480d      	ldr	r0, [pc, #52]	; (8003a9c <LoopFillZerobss+0x16>)
 8003a66:	490e      	ldr	r1, [pc, #56]	; (8003aa0 <LoopFillZerobss+0x1a>)
 8003a68:	4a0e      	ldr	r2, [pc, #56]	; (8003aa4 <LoopFillZerobss+0x1e>)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:
 8003a6e:	58d4      	ldr	r4, [r2, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:
 8003a74:	18c4      	adds	r4, r0, r3
 8003a76:	428c      	cmp	r4, r1
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <LoopFillZerobss+0x22>)
 8003a7c:	4c0b      	ldr	r4, [pc, #44]	; (8003aac <LoopFillZerobss+0x26>)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:
 8003a86:	42a2      	cmp	r2, r4
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>
 8003a8a:	f7ff fe45 	bl	8003718 <SystemInit>
 8003a8e:	f004 fc73 	bl	8008378 <__libc_init_array>
 8003a92:	f7ff f9a1 	bl	8002dd8 <main>
 8003a96:	4770      	bx	lr
 8003a98:	20020000 	.word	0x20020000
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	2000007c 	.word	0x2000007c
 8003aa4:	0800bf1c 	.word	0x0800bf1c
 8003aa8:	2000007c 	.word	0x2000007c
 8003aac:	200003a0 	.word	0x200003a0

08003ab0 <ADC_IRQHandler>:
 8003ab0:	e7fe      	b.n	8003ab0 <ADC_IRQHandler>
	...

08003ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_Init+0x40>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <HAL_Init+0x40>)
 8003abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_Init+0x40>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_Init+0x40>)
 8003aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_Init+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_Init+0x40>)
 8003ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003adc:	2003      	movs	r0, #3
 8003ade:	f000 f94f 	bl	8003d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae2:	200f      	movs	r0, #15
 8003ae4:	f000 f808 	bl	8003af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae8:	f7ff fd7a 	bl	80035e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023c00 	.word	0x40023c00

08003af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_InitTick+0x54>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_InitTick+0x58>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f967 	bl	8003dea <HAL_SYSTICK_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00e      	b.n	8003b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d80a      	bhi.n	8003b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295
 8003b34:	f000 f92f 	bl	8003d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b38:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <HAL_InitTick+0x5c>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	2000000c 	.word	0x2000000c
 8003b50:	20000014 	.word	0x20000014
 8003b54:	20000010 	.word	0x20000010

08003b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x20>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_IncTick+0x24>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_IncTick+0x24>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000014 	.word	0x20000014
 8003b7c:	2000038c 	.word	0x2000038c

08003b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return uwTick;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_GetTick+0x14>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	2000038c 	.word	0x2000038c

08003b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff ffee 	bl	8003b80 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d005      	beq.n	8003bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_Delay+0x44>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bbe:	bf00      	nop
 8003bc0:	f7ff ffde 	bl	8003b80 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d8f7      	bhi.n	8003bc0 <HAL_Delay+0x28>
  {
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000014 	.word	0x20000014

08003be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4907      	ldr	r1, [pc, #28]	; (8003c7c <__NVIC_EnableIRQ+0x38>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000e100 	.word	0xe000e100

08003c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db0a      	blt.n	8003caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	490c      	ldr	r1, [pc, #48]	; (8003ccc <__NVIC_SetPriority+0x4c>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca8:	e00a      	b.n	8003cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <__NVIC_SetPriority+0x50>)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	761a      	strb	r2, [r3, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	bf28      	it	cs
 8003cf2:	2304      	movcs	r3, #4
 8003cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d902      	bls.n	8003d04 <NVIC_EncodePriority+0x30>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3b03      	subs	r3, #3
 8003d02:	e000      	b.n	8003d06 <NVIC_EncodePriority+0x32>
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	401a      	ands	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43d9      	mvns	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	4313      	orrs	r3, r2
         );
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4c:	d301      	bcc.n	8003d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00f      	b.n	8003d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <SysTick_Config+0x40>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d60:	f7ff ff8e 	bl	8003c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <SysTick_Config+0x40>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <SysTick_Config+0x40>)
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff29 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da8:	f7ff ff3e 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f7ff ff8e 	bl	8003cd4 <NVIC_EncodePriority>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff5d 	bl	8003c80 <__NVIC_SetPriority>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff31 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffa2 	bl	8003d3c <SysTick_Config>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff feb6 	bl	8003b80 <HAL_GetTick>
 8003e14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d008      	beq.n	8003e34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e052      	b.n	8003eda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0216 	bic.w	r2, r2, #22
 8003e42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <HAL_DMA_Abort+0x62>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0208 	bic.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e84:	e013      	b.n	8003eae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e86:	f7ff fe7b 	bl	8003b80 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d90c      	bls.n	8003eae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e015      	b.n	8003eda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e4      	bne.n	8003e86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	223f      	movs	r2, #63	; 0x3f
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d004      	beq.n	8003f00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2280      	movs	r2, #128	; 0x80
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e00c      	b.n	8003f1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2205      	movs	r2, #5
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
 8003f42:	e16b      	b.n	800421c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f44:	2201      	movs	r2, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	f040 815a 	bne.w	8004216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d005      	beq.n	8003f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d130      	bne.n	8003fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2203      	movs	r2, #3
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 0201 	and.w	r2, r3, #1
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d017      	beq.n	8004018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d123      	bne.n	800406c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	220f      	movs	r2, #15
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	08da      	lsrs	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3208      	adds	r2, #8
 8004066:	69b9      	ldr	r1, [r7, #24]
 8004068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	2203      	movs	r2, #3
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0203 	and.w	r2, r3, #3
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80b4 	beq.w	8004216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	4b60      	ldr	r3, [pc, #384]	; (8004234 <HAL_GPIO_Init+0x30c>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	4a5f      	ldr	r2, [pc, #380]	; (8004234 <HAL_GPIO_Init+0x30c>)
 80040b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040bc:	6453      	str	r3, [r2, #68]	; 0x44
 80040be:	4b5d      	ldr	r3, [pc, #372]	; (8004234 <HAL_GPIO_Init+0x30c>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ca:	4a5b      	ldr	r2, [pc, #364]	; (8004238 <HAL_GPIO_Init+0x310>)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	3302      	adds	r3, #2
 80040d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	220f      	movs	r2, #15
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_GPIO_Init+0x314>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02b      	beq.n	800414e <HAL_GPIO_Init+0x226>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a51      	ldr	r2, [pc, #324]	; (8004240 <HAL_GPIO_Init+0x318>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d025      	beq.n	800414a <HAL_GPIO_Init+0x222>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a50      	ldr	r2, [pc, #320]	; (8004244 <HAL_GPIO_Init+0x31c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01f      	beq.n	8004146 <HAL_GPIO_Init+0x21e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	; (8004248 <HAL_GPIO_Init+0x320>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d019      	beq.n	8004142 <HAL_GPIO_Init+0x21a>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4e      	ldr	r2, [pc, #312]	; (800424c <HAL_GPIO_Init+0x324>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_GPIO_Init+0x216>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4d      	ldr	r2, [pc, #308]	; (8004250 <HAL_GPIO_Init+0x328>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00d      	beq.n	800413a <HAL_GPIO_Init+0x212>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4c      	ldr	r2, [pc, #304]	; (8004254 <HAL_GPIO_Init+0x32c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <HAL_GPIO_Init+0x20e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <HAL_GPIO_Init+0x330>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_GPIO_Init+0x20a>
 800412e:	2307      	movs	r3, #7
 8004130:	e00e      	b.n	8004150 <HAL_GPIO_Init+0x228>
 8004132:	2308      	movs	r3, #8
 8004134:	e00c      	b.n	8004150 <HAL_GPIO_Init+0x228>
 8004136:	2306      	movs	r3, #6
 8004138:	e00a      	b.n	8004150 <HAL_GPIO_Init+0x228>
 800413a:	2305      	movs	r3, #5
 800413c:	e008      	b.n	8004150 <HAL_GPIO_Init+0x228>
 800413e:	2304      	movs	r3, #4
 8004140:	e006      	b.n	8004150 <HAL_GPIO_Init+0x228>
 8004142:	2303      	movs	r3, #3
 8004144:	e004      	b.n	8004150 <HAL_GPIO_Init+0x228>
 8004146:	2302      	movs	r3, #2
 8004148:	e002      	b.n	8004150 <HAL_GPIO_Init+0x228>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_GPIO_Init+0x228>
 800414e:	2300      	movs	r3, #0
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	f002 0203 	and.w	r2, r2, #3
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	4093      	lsls	r3, r2
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004160:	4935      	ldr	r1, [pc, #212]	; (8004238 <HAL_GPIO_Init+0x310>)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	3302      	adds	r3, #2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_GPIO_Init+0x334>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	43db      	mvns	r3, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	4013      	ands	r3, r2
 800417c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004192:	4a32      	ldr	r2, [pc, #200]	; (800425c <HAL_GPIO_Init+0x334>)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004198:	4b30      	ldr	r3, [pc, #192]	; (800425c <HAL_GPIO_Init+0x334>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <HAL_GPIO_Init+0x334>)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <HAL_GPIO_Init+0x334>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041e6:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_GPIO_Init+0x334>)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_GPIO_Init+0x334>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004210:	4a12      	ldr	r2, [pc, #72]	; (800425c <HAL_GPIO_Init+0x334>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	2b0f      	cmp	r3, #15
 8004220:	f67f ae90 	bls.w	8003f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3724      	adds	r7, #36	; 0x24
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40013800 	.word	0x40013800
 800423c:	40020000 	.word	0x40020000
 8004240:	40020400 	.word	0x40020400
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40021c00 	.word	0x40021c00
 800425c:	40013c00 	.word	0x40013c00

08004260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
 800426c:	4613      	mov	r3, r2
 800426e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004270:	787b      	ldrb	r3, [r7, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800427c:	e003      	b.n	8004286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	041a      	lsls	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	619a      	str	r2, [r3, #24]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e12b      	b.n	80044fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fa58 	bl	8001770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042f8:	f001 fd06 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 80042fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4a81      	ldr	r2, [pc, #516]	; (8004508 <HAL_I2C_Init+0x274>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d807      	bhi.n	8004318 <HAL_I2C_Init+0x84>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a80      	ldr	r2, [pc, #512]	; (800450c <HAL_I2C_Init+0x278>)
 800430c:	4293      	cmp	r3, r2
 800430e:	bf94      	ite	ls
 8004310:	2301      	movls	r3, #1
 8004312:	2300      	movhi	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e006      	b.n	8004326 <HAL_I2C_Init+0x92>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a7d      	ldr	r2, [pc, #500]	; (8004510 <HAL_I2C_Init+0x27c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0e7      	b.n	80044fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a78      	ldr	r2, [pc, #480]	; (8004514 <HAL_I2C_Init+0x280>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a6a      	ldr	r2, [pc, #424]	; (8004508 <HAL_I2C_Init+0x274>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d802      	bhi.n	8004368 <HAL_I2C_Init+0xd4>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3301      	adds	r3, #1
 8004366:	e009      	b.n	800437c <HAL_I2C_Init+0xe8>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800436e:	fb02 f303 	mul.w	r3, r2, r3
 8004372:	4a69      	ldr	r2, [pc, #420]	; (8004518 <HAL_I2C_Init+0x284>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	099b      	lsrs	r3, r3, #6
 800437a:	3301      	adds	r3, #1
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	430b      	orrs	r3, r1
 8004382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800438e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	495c      	ldr	r1, [pc, #368]	; (8004508 <HAL_I2C_Init+0x274>)
 8004398:	428b      	cmp	r3, r1
 800439a:	d819      	bhi.n	80043d0 <HAL_I2C_Init+0x13c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e59      	subs	r1, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043b0:	400b      	ands	r3, r1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_I2C_Init+0x138>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e59      	subs	r1, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ca:	e051      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 80043cc:	2304      	movs	r3, #4
 80043ce:	e04f      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d111      	bne.n	80043fc <HAL_I2C_Init+0x168>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	e012      	b.n	8004422 <HAL_I2C_Init+0x18e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	0099      	lsls	r1, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Init+0x196>
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <HAL_I2C_Init+0x1bc>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e58      	subs	r0, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	440b      	add	r3, r1
 8004440:	fbb0 f3f3 	udiv	r3, r0, r3
 8004444:	3301      	adds	r3, #1
 8004446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	e00f      	b.n	8004470 <HAL_I2C_Init+0x1dc>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e58      	subs	r0, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	0099      	lsls	r1, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	6809      	ldr	r1, [r1, #0]
 8004474:	4313      	orrs	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800449e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6911      	ldr	r1, [r2, #16]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	4311      	orrs	r1, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	000186a0 	.word	0x000186a0
 800450c:	001e847f 	.word	0x001e847f
 8004510:	003d08ff 	.word	0x003d08ff
 8004514:	431bde83 	.word	0x431bde83
 8004518:	10624dd3 	.word	0x10624dd3

0800451c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	460b      	mov	r3, r1
 8004530:	813b      	strh	r3, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004536:	f7ff fb23 	bl	8003b80 <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b20      	cmp	r3, #32
 8004546:	f040 80d9 	bne.w	80046fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	2319      	movs	r3, #25
 8004550:	2201      	movs	r2, #1
 8004552:	496d      	ldr	r1, [pc, #436]	; (8004708 <HAL_I2C_Mem_Write+0x1ec>)
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fdad 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	e0cc      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_I2C_Mem_Write+0x56>
 800456e:	2302      	movs	r3, #2
 8004570:	e0c5      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d007      	beq.n	8004598 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2221      	movs	r2, #33	; 0x21
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a4d      	ldr	r2, [pc, #308]	; (800470c <HAL_I2C_Mem_Write+0x1f0>)
 80045d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045da:	88f8      	ldrh	r0, [r7, #6]
 80045dc:	893a      	ldrh	r2, [r7, #8]
 80045de:	8979      	ldrh	r1, [r7, #10]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4603      	mov	r3, r0
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fbe4 	bl	8004db8 <I2C_RequestMemoryWrite>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d052      	beq.n	800469c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e081      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fe2e 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b04      	cmp	r3, #4
 8004610:	d107      	bne.n	8004622 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e06b      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d11b      	bne.n	800469c <HAL_I2C_Mem_Write+0x180>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d017      	beq.n	800469c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1aa      	bne.n	80045fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fe1a 	bl	80052e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00d      	beq.n	80046d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d107      	bne.n	80046cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e016      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	e000      	b.n	80046fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000

08004710 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	; 0x30
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	4608      	mov	r0, r1
 800471a:	4611      	mov	r1, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4603      	mov	r3, r0
 8004720:	817b      	strh	r3, [r7, #10]
 8004722:	460b      	mov	r3, r1
 8004724:	813b      	strh	r3, [r7, #8]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800472a:	f7ff fa29 	bl	8003b80 <HAL_GetTick>
 800472e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	f040 8208 	bne.w	8004b4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2319      	movs	r3, #25
 8004744:	2201      	movs	r2, #1
 8004746:	497b      	ldr	r1, [pc, #492]	; (8004934 <HAL_I2C_Mem_Read+0x224>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fcb3 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
 8004756:	e1fb      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Mem_Read+0x56>
 8004762:	2302      	movs	r3, #2
 8004764:	e1f4      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d007      	beq.n	800478c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800479a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2222      	movs	r2, #34	; 0x22
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_I2C_Mem_Read+0x228>)
 80047cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ce:	88f8      	ldrh	r0, [r7, #6]
 80047d0:	893a      	ldrh	r2, [r7, #8]
 80047d2:	8979      	ldrh	r1, [r7, #10]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	4603      	mov	r3, r0
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fb80 	bl	8004ee4 <I2C_RequestMemoryRead>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1b0      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d113      	bne.n	800481e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	623b      	str	r3, [r7, #32]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e184      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b01      	cmp	r3, #1
 8004824:	d11b      	bne.n	800485e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e164      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	2b02      	cmp	r3, #2
 8004864:	d11b      	bne.n	800489e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004874:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004884:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	e144      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b4:	e138      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	f200 80f1 	bhi.w	8004aa2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d123      	bne.n	8004910 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fd49 	bl	8005364 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e139      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800490e:	e10b      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	2b02      	cmp	r3, #2
 8004916:	d14e      	bne.n	80049b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2200      	movs	r2, #0
 8004920:	4906      	ldr	r1, [pc, #24]	; (800493c <HAL_I2C_Mem_Read+0x22c>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fbc6 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e10e      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
 8004932:	bf00      	nop
 8004934:	00100002 	.word	0x00100002
 8004938:	ffff0000 	.word	0xffff0000
 800493c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b4:	e0b8      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	2200      	movs	r2, #0
 80049be:	4966      	ldr	r1, [pc, #408]	; (8004b58 <HAL_I2C_Mem_Read+0x448>)
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fb77 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0bf      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	2200      	movs	r2, #0
 8004a1a:	494f      	ldr	r1, [pc, #316]	; (8004b58 <HAL_I2C_Mem_Read+0x448>)
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fb49 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e091      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa0:	e042      	b.n	8004b28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fc5c 	bl	8005364 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e04c      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d118      	bne.n	8004b28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f47f aec2 	bne.w	80048b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3728      	adds	r7, #40	; 0x28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	00010004 	.word	0x00010004

08004b5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff f808 	bl	8003b80 <HAL_GetTick>
 8004b70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	f040 8111 	bne.w	8004da6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2319      	movs	r3, #25
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4988      	ldr	r1, [pc, #544]	; (8004db0 <HAL_I2C_IsDeviceReady+0x254>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa90 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e104      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_I2C_IsDeviceReady+0x50>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0fd      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d007      	beq.n	8004bd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 0201 	orr.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2224      	movs	r2, #36	; 0x24
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a70      	ldr	r2, [pc, #448]	; (8004db4 <HAL_I2C_IsDeviceReady+0x258>)
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fa4e 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2c:	d103      	bne.n	8004c36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e0b6      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c3a:	897b      	ldrh	r3, [r7, #10]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004c4a:	f7fe ff99 	bl	8003b80 <HAL_GetTick>
 8004c4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c7e:	e025      	b.n	8004ccc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c80:	f7fe ff7e 	bl	8003b80 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <HAL_I2C_IsDeviceReady+0x13a>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	22a0      	movs	r2, #160	; 0xa0
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2ba0      	cmp	r3, #160	; 0xa0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_I2C_IsDeviceReady+0x188>
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <HAL_I2C_IsDeviceReady+0x188>
 8004cde:	7dbb      	ldrb	r3, [r7, #22]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0cd      	beq.n	8004c80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d129      	bne.n	8004d4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2319      	movs	r3, #25
 8004d26:	2201      	movs	r2, #1
 8004d28:	4921      	ldr	r1, [pc, #132]	; (8004db0 <HAL_I2C_IsDeviceReady+0x254>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f9c2 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e036      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e02c      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	2201      	movs	r2, #1
 8004d70:	490f      	ldr	r1, [pc, #60]	; (8004db0 <HAL_I2C_IsDeviceReady+0x254>)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f99e 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e012      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	f4ff af32 	bcc.w	8004bf6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004da6:	2302      	movs	r3, #2
  }
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	00100002 	.word	0x00100002
 8004db4:	ffff0000 	.word	0xffff0000

08004db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	817b      	strh	r3, [r7, #10]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	813b      	strh	r3, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f960 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00d      	beq.n	8004e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e08:	d103      	bne.n	8004e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e05f      	b.n	8004ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	492d      	ldr	r1, [pc, #180]	; (8004ee0 <I2C_RequestMemoryWrite+0x128>)
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f998 	bl	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e04c      	b.n	8004ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	6a39      	ldr	r1, [r7, #32]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fa02 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d107      	bne.n	8004e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e02b      	b.n	8004ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d105      	bne.n	8004e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e84:	893b      	ldrh	r3, [r7, #8]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	611a      	str	r2, [r3, #16]
 8004e8e:	e021      	b.n	8004ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea0:	6a39      	ldr	r1, [r7, #32]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f9dc 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d107      	bne.n	8004ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e005      	b.n	8004ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eca:	893b      	ldrh	r3, [r7, #8]
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	00010002 	.word	0x00010002

08004ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	817b      	strh	r3, [r7, #10]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	813b      	strh	r3, [r7, #8]
 8004efa:	4613      	mov	r3, r2
 8004efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f8c2 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d103      	bne.n	8004f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e0aa      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	4952      	ldr	r1, [pc, #328]	; (80050b0 <I2C_RequestMemoryRead+0x1cc>)
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f8fa 	bl	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e097      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f964 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d107      	bne.n	8004fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e076      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc0:	893b      	ldrh	r3, [r7, #8]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	e021      	b.n	8005010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fcc:	893b      	ldrh	r3, [r7, #8]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	6a39      	ldr	r1, [r7, #32]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f93e 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00d      	beq.n	8005006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d107      	bne.n	8005002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e050      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005006:	893b      	ldrh	r3, [r7, #8]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005012:	6a39      	ldr	r1, [r7, #32]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f923 	bl	8005260 <I2C_WaitOnTXEFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	2b04      	cmp	r3, #4
 8005026:	d107      	bne.n	8005038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e035      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	2200      	movs	r2, #0
 8005054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f82b 	bl	80050b4 <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d103      	bne.n	800507c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e013      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005080:	897b      	ldrh	r3, [r7, #10]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	4906      	ldr	r1, [pc, #24]	; (80050b0 <I2C_RequestMemoryRead+0x1cc>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f863 	bl	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00010002 	.word	0x00010002

080050b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c4:	e025      	b.n	8005112 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d021      	beq.n	8005112 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ce:	f7fe fd57 	bl	8003b80 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d116      	bne.n	8005112 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e023      	b.n	800515a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10d      	bne.n	8005138 <I2C_WaitOnFlagUntilTimeout+0x84>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	43da      	mvns	r2, r3
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	e00c      	b.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf0c      	ite	eq
 800514a:	2301      	moveq	r3, #1
 800514c:	2300      	movne	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	429a      	cmp	r2, r3
 8005156:	d0b6      	beq.n	80050c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005170:	e051      	b.n	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	d123      	bne.n	80051ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800519a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f043 0204 	orr.w	r2, r3, #4
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e046      	b.n	8005258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d021      	beq.n	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fe fcd5 	bl	8003b80 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d116      	bne.n	8005216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e020      	b.n	8005258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d10c      	bne.n	800523a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	43da      	mvns	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4013      	ands	r3, r2
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e00b      	b.n	8005252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	43da      	mvns	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d18d      	bne.n	8005172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800526c:	e02d      	b.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f8ce 	bl	8005410 <I2C_IsAcknowledgeFailed>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e02d      	b.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d021      	beq.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fe fc7b 	bl	8003b80 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d116      	bne.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e007      	b.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d1ca      	bne.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ee:	e02d      	b.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f88d 	bl	8005410 <I2C_IsAcknowledgeFailed>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e02d      	b.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d021      	beq.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005308:	f7fe fc3a 	bl	8003b80 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d116      	bne.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e007      	b.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d1ca      	bne.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005370:	e042      	b.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b10      	cmp	r3, #16
 800537e:	d119      	bne.n	80053b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0210 	mvn.w	r2, #16
 8005388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e029      	b.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b4:	f7fe fbe4 	bl	8003b80 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d302      	bcc.n	80053ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d116      	bne.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e007      	b.n	8005408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d1b5      	bne.n	8005372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005426:	d11b      	bne.n	8005460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e264      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d075      	beq.n	800557a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548e:	4ba3      	ldr	r3, [pc, #652]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00c      	beq.n	80054b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549a:	4ba0      	ldr	r3, [pc, #640]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d112      	bne.n	80054cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054a6:	4b9d      	ldr	r3, [pc, #628]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b2:	d10b      	bne.n	80054cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b4:	4b99      	ldr	r3, [pc, #612]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05b      	beq.n	8005578 <HAL_RCC_OscConfig+0x108>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d157      	bne.n	8005578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e23f      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d4:	d106      	bne.n	80054e4 <HAL_RCC_OscConfig+0x74>
 80054d6:	4b91      	ldr	r3, [pc, #580]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a90      	ldr	r2, [pc, #576]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e01d      	b.n	8005520 <HAL_RCC_OscConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x98>
 80054ee:	4b8b      	ldr	r3, [pc, #556]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a8a      	ldr	r2, [pc, #552]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	4b88      	ldr	r3, [pc, #544]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a87      	ldr	r2, [pc, #540]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e00b      	b.n	8005520 <HAL_RCC_OscConfig+0xb0>
 8005508:	4b84      	ldr	r3, [pc, #528]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a83      	ldr	r2, [pc, #524]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800550e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	4b81      	ldr	r3, [pc, #516]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a80      	ldr	r2, [pc, #512]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800551a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d013      	beq.n	8005550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005528:	f7fe fb2a 	bl	8003b80 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005530:	f7fe fb26 	bl	8003b80 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e204      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	4b76      	ldr	r3, [pc, #472]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0f0      	beq.n	8005530 <HAL_RCC_OscConfig+0xc0>
 800554e:	e014      	b.n	800557a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fe fb16 	bl	8003b80 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005558:	f7fe fb12 	bl	8003b80 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b64      	cmp	r3, #100	; 0x64
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1f0      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556a:	4b6c      	ldr	r3, [pc, #432]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0xe8>
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d063      	beq.n	800564e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005586:	4b65      	ldr	r3, [pc, #404]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005592:	4b62      	ldr	r3, [pc, #392]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800559a:	2b08      	cmp	r3, #8
 800559c:	d11c      	bne.n	80055d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800559e:	4b5f      	ldr	r3, [pc, #380]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d116      	bne.n	80055d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055aa:	4b5c      	ldr	r3, [pc, #368]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_RCC_OscConfig+0x152>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e1c4      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c2:	4b56      	ldr	r3, [pc, #344]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4952      	ldr	r1, [pc, #328]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d6:	e03a      	b.n	800564e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d020      	beq.n	8005622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e0:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <HAL_RCC_OscConfig+0x2b0>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e6:	f7fe facb 	bl	8003b80 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ee:	f7fe fac7 	bl	8003b80 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e1a5      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005600:	4b46      	ldr	r3, [pc, #280]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800560c:	4b43      	ldr	r3, [pc, #268]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4940      	ldr	r1, [pc, #256]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 800561c:	4313      	orrs	r3, r2
 800561e:	600b      	str	r3, [r1, #0]
 8005620:	e015      	b.n	800564e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005622:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <HAL_RCC_OscConfig+0x2b0>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fe faaa 	bl	8003b80 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005630:	f7fe faa6 	bl	8003b80 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e184      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	4b36      	ldr	r3, [pc, #216]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d030      	beq.n	80056bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005662:	4b30      	ldr	r3, [pc, #192]	; (8005724 <HAL_RCC_OscConfig+0x2b4>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fe fa8a 	bl	8003b80 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005670:	f7fe fa86 	bl	8003b80 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e164      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 8005684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0f0      	beq.n	8005670 <HAL_RCC_OscConfig+0x200>
 800568e:	e015      	b.n	80056bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005690:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCC_OscConfig+0x2b4>)
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005696:	f7fe fa73 	bl	8003b80 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800569e:	f7fe fa6f 	bl	8003b80 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e14d      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80a0 	beq.w	800580a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	4b0f      	ldr	r3, [pc, #60]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x2b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d121      	bne.n	800574a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <HAL_RCC_OscConfig+0x2b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <HAL_RCC_OscConfig+0x2b8>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005712:	f7fe fa35 	bl	8003b80 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005718:	e011      	b.n	800573e <HAL_RCC_OscConfig+0x2ce>
 800571a:	bf00      	nop
 800571c:	40023800 	.word	0x40023800
 8005720:	42470000 	.word	0x42470000
 8005724:	42470e80 	.word	0x42470e80
 8005728:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800572c:	f7fe fa28 	bl	8003b80 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e106      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573e:	4b85      	ldr	r3, [pc, #532]	; (8005954 <HAL_RCC_OscConfig+0x4e4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x2f0>
 8005752:	4b81      	ldr	r3, [pc, #516]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a80      	ldr	r2, [pc, #512]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	6713      	str	r3, [r2, #112]	; 0x70
 800575e:	e01c      	b.n	800579a <HAL_RCC_OscConfig+0x32a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b05      	cmp	r3, #5
 8005766:	d10c      	bne.n	8005782 <HAL_RCC_OscConfig+0x312>
 8005768:	4b7b      	ldr	r3, [pc, #492]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a7a      	ldr	r2, [pc, #488]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 800576e:	f043 0304 	orr.w	r3, r3, #4
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	4b78      	ldr	r3, [pc, #480]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005778:	4a77      	ldr	r2, [pc, #476]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	6713      	str	r3, [r2, #112]	; 0x70
 8005780:	e00b      	b.n	800579a <HAL_RCC_OscConfig+0x32a>
 8005782:	4b75      	ldr	r3, [pc, #468]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4a74      	ldr	r2, [pc, #464]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	6713      	str	r3, [r2, #112]	; 0x70
 800578e:	4b72      	ldr	r3, [pc, #456]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a71      	ldr	r2, [pc, #452]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005794:	f023 0304 	bic.w	r3, r3, #4
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d015      	beq.n	80057ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fe f9ed 	bl	8003b80 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fe f9e9 	bl	8003b80 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e0c5      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	4b65      	ldr	r3, [pc, #404]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ee      	beq.n	80057aa <HAL_RCC_OscConfig+0x33a>
 80057cc:	e014      	b.n	80057f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ce:	f7fe f9d7 	bl	8003b80 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d4:	e00a      	b.n	80057ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d6:	f7fe f9d3 	bl	8003b80 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0af      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ec:	4b5a      	ldr	r3, [pc, #360]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ee      	bne.n	80057d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d105      	bne.n	800580a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fe:	4b56      	ldr	r3, [pc, #344]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	4a55      	ldr	r2, [pc, #340]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 809b 	beq.w	800594a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005814:	4b50      	ldr	r3, [pc, #320]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b08      	cmp	r3, #8
 800581e:	d05c      	beq.n	80058da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d141      	bne.n	80058ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005828:	4b4c      	ldr	r3, [pc, #304]	; (800595c <HAL_RCC_OscConfig+0x4ec>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fe f9a7 	bl	8003b80 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005836:	f7fe f9a3 	bl	8003b80 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e081      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005848:	4b43      	ldr	r3, [pc, #268]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f0      	bne.n	8005836 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	019b      	lsls	r3, r3, #6
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	3b01      	subs	r3, #1
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	4937      	ldr	r1, [pc, #220]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800587e:	4b37      	ldr	r3, [pc, #220]	; (800595c <HAL_RCC_OscConfig+0x4ec>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fe f97c 	bl	8003b80 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588c:	f7fe f978 	bl	8003b80 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e056      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589e:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x41c>
 80058aa:	e04e      	b.n	800594a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ac:	4b2b      	ldr	r3, [pc, #172]	; (800595c <HAL_RCC_OscConfig+0x4ec>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fe f965 	bl	8003b80 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ba:	f7fe f961 	bl	8003b80 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e03f      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f0      	bne.n	80058ba <HAL_RCC_OscConfig+0x44a>
 80058d8:	e037      	b.n	800594a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e032      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e6:	4b1c      	ldr	r3, [pc, #112]	; (8005958 <HAL_RCC_OscConfig+0x4e8>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d028      	beq.n	8005946 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d121      	bne.n	8005946 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d11a      	bne.n	8005946 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800591c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800591e:	4293      	cmp	r3, r2
 8005920:	d111      	bne.n	8005946 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	085b      	lsrs	r3, r3, #1
 800592e:	3b01      	subs	r3, #1
 8005930:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	429a      	cmp	r2, r3
 8005934:	d107      	bne.n	8005946 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005942:	429a      	cmp	r2, r3
 8005944:	d001      	beq.n	800594a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40007000 	.word	0x40007000
 8005958:	40023800 	.word	0x40023800
 800595c:	42470060 	.word	0x42470060

08005960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0cc      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005974:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d90c      	bls.n	800599c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b65      	ldr	r3, [pc, #404]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b63      	ldr	r3, [pc, #396]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0b8      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b4:	4b59      	ldr	r3, [pc, #356]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a58      	ldr	r2, [pc, #352]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059cc:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a52      	ldr	r2, [pc, #328]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d8:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	494d      	ldr	r1, [pc, #308]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d044      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	4b47      	ldr	r3, [pc, #284]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d119      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e07f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d003      	beq.n	8005a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1e:	4b3f      	ldr	r3, [pc, #252]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e06f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e067      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3e:	4b37      	ldr	r3, [pc, #220]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 0203 	bic.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4934      	ldr	r1, [pc, #208]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a50:	f7fe f896 	bl	8003b80 <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a58:	f7fe f892 	bl	8003b80 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e04f      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 020c 	and.w	r2, r3, #12
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1eb      	bne.n	8005a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a80:	4b25      	ldr	r3, [pc, #148]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d20c      	bcs.n	8005aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8e:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a96:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d001      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e032      	b.n	8005b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab4:	4b19      	ldr	r3, [pc, #100]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4916      	ldr	r1, [pc, #88]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad2:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	490e      	ldr	r1, [pc, #56]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ae6:	f000 f821 	bl	8005b2c <HAL_RCC_GetSysClockFreq>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	490a      	ldr	r1, [pc, #40]	; (8005b20 <HAL_RCC_ClockConfig+0x1c0>)
 8005af8:	5ccb      	ldrb	r3, [r1, r3]
 8005afa:	fa22 f303 	lsr.w	r3, r2, r3
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_ClockConfig+0x1c8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fd fff6 	bl	8003af8 <HAL_InitTick>

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023c00 	.word	0x40023c00
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	0800bdc0 	.word	0x0800bdc0
 8005b24:	2000000c 	.word	0x2000000c
 8005b28:	20000010 	.word	0x20000010

08005b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	607b      	str	r3, [r7, #4]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b44:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 030c 	and.w	r3, r3, #12
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d00d      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x40>
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	f200 80bd 	bhi.w	8005cd0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b5e:	e0b7      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b60:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b62:	60bb      	str	r3, [r7, #8]
       break;
 8005b64:	e0b7      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b66:	4b61      	ldr	r3, [pc, #388]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b68:	60bb      	str	r3, [r7, #8]
      break;
 8005b6a:	e0b4      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b6c:	4b5d      	ldr	r3, [pc, #372]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d04d      	beq.n	8005c1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b82:	4b58      	ldr	r3, [pc, #352]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b92:	f04f 0100 	mov.w	r1, #0
 8005b96:	ea02 0800 	and.w	r8, r2, r0
 8005b9a:	ea03 0901 	and.w	r9, r3, r1
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	014b      	lsls	r3, r1, #5
 8005bac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bb0:	0142      	lsls	r2, r0, #5
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	ebb0 0008 	subs.w	r0, r0, r8
 8005bba:	eb61 0109 	sbc.w	r1, r1, r9
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	018b      	lsls	r3, r1, #6
 8005bc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bcc:	0182      	lsls	r2, r0, #6
 8005bce:	1a12      	subs	r2, r2, r0
 8005bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	00d9      	lsls	r1, r3, #3
 8005bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be2:	00d0      	lsls	r0, r2, #3
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	eb12 0208 	adds.w	r2, r2, r8
 8005bec:	eb43 0309 	adc.w	r3, r3, r9
 8005bf0:	f04f 0000 	mov.w	r0, #0
 8005bf4:	f04f 0100 	mov.w	r1, #0
 8005bf8:	0259      	lsls	r1, r3, #9
 8005bfa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005bfe:	0250      	lsls	r0, r2, #9
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	f7fa fb36 	bl	8000280 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e04a      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	099b      	lsrs	r3, r3, #6
 8005c24:	461a      	mov	r2, r3
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	ea02 0400 	and.w	r4, r2, r0
 8005c36:	ea03 0501 	and.w	r5, r3, r1
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	014b      	lsls	r3, r1, #5
 8005c48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c4c:	0142      	lsls	r2, r0, #5
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	1b00      	subs	r0, r0, r4
 8005c54:	eb61 0105 	sbc.w	r1, r1, r5
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	018b      	lsls	r3, r1, #6
 8005c62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c66:	0182      	lsls	r2, r0, #6
 8005c68:	1a12      	subs	r2, r2, r0
 8005c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005c6e:	f04f 0000 	mov.w	r0, #0
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	00d9      	lsls	r1, r3, #3
 8005c78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c7c:	00d0      	lsls	r0, r2, #3
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	1912      	adds	r2, r2, r4
 8005c84:	eb45 0303 	adc.w	r3, r5, r3
 8005c88:	f04f 0000 	mov.w	r0, #0
 8005c8c:	f04f 0100 	mov.w	r1, #0
 8005c90:	0299      	lsls	r1, r3, #10
 8005c92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c96:	0290      	lsls	r0, r2, #10
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	f7fa faea 	bl	8000280 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ccc:	60bb      	str	r3, [r7, #8]
      break;
 8005cce:	e002      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cd2:	60bb      	str	r3, [r7, #8]
      break;
 8005cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	007a1200 	.word	0x007a1200

08005cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf4:	4b03      	ldr	r3, [pc, #12]	; (8005d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c

08005d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d0c:	f7ff fff0 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d10:	4602      	mov	r2, r0
 8005d12:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	0a9b      	lsrs	r3, r3, #10
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	4903      	ldr	r1, [pc, #12]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d1e:	5ccb      	ldrb	r3, [r1, r3]
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	0800bdd0 	.word	0x0800bdd0

08005d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d34:	f7ff ffdc 	bl	8005cf0 <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	0b5b      	lsrs	r3, r3, #13
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4903      	ldr	r1, [pc, #12]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40023800 	.word	0x40023800
 8005d54:	0800bdd0 	.word	0x0800bdd0

08005d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e07b      	b.n	8005e62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7a:	d009      	beq.n	8005d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
 8005d82:	e005      	b.n	8005d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fd fbd0 	bl	8003550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	ea42 0103 	orr.w	r1, r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	f003 0104 	and.w	r1, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f003 0210 	and.w	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b088      	sub	sp, #32
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_SPI_Transmit+0x22>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e126      	b.n	80060da <HAL_SPI_Transmit+0x270>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e94:	f7fd fe74 	bl	8003b80 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005eae:	e10b      	b.n	80060c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x52>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec0:	e102      	b.n	80060c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f08:	d10f      	bne.n	8005f2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d007      	beq.n	8005f48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f50:	d14b      	bne.n	8005fea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0xf6>
 8005f5a:	8afb      	ldrh	r3, [r7, #22]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d13e      	bne.n	8005fde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f84:	e02b      	b.n	8005fde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d112      	bne.n	8005fba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fb8:	e011      	b.n	8005fde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fba:	f7fd fde1 	bl	8003b80 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Transmit+0x168>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x16e>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fdc:	e074      	b.n	80060c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ce      	bne.n	8005f86 <HAL_SPI_Transmit+0x11c>
 8005fe8:	e04c      	b.n	8006084 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_SPI_Transmit+0x18e>
 8005ff2:	8afb      	ldrh	r3, [r7, #22]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d140      	bne.n	800607a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	7812      	ldrb	r2, [r2, #0]
 8006004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800601e:	e02c      	b.n	800607a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d113      	bne.n	8006056 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	86da      	strh	r2, [r3, #54]	; 0x36
 8006054:	e011      	b.n	800607a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006056:	f7fd fd93 	bl	8003b80 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d803      	bhi.n	800606e <HAL_SPI_Transmit+0x204>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d102      	bne.n	8006074 <HAL_SPI_Transmit+0x20a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006078:	e026      	b.n	80060c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1cd      	bne.n	8006020 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fbcb 	bl	8006824 <SPI_EndRxTxTransaction>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e000      	b.n	80060c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80060c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b088      	sub	sp, #32
 80060e6:	af02      	add	r7, sp, #8
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fe:	d112      	bne.n	8006126 <HAL_SPI_Receive+0x44>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10e      	bne.n	8006126 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2204      	movs	r2, #4
 800610c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006110:	88fa      	ldrh	r2, [r7, #6]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f8f1 	bl	8006304 <HAL_SPI_TransmitReceive>
 8006122:	4603      	mov	r3, r0
 8006124:	e0ea      	b.n	80062fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_SPI_Receive+0x52>
 8006130:	2302      	movs	r3, #2
 8006132:	e0e3      	b.n	80062fc <HAL_SPI_Receive+0x21a>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800613c:	f7fd fd20 	bl	8003b80 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d002      	beq.n	8006154 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006152:	e0ca      	b.n	80062ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Receive+0x7e>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006164:	e0c1      	b.n	80062ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2204      	movs	r2, #4
 800616a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	88fa      	ldrh	r2, [r7, #6]
 8006184:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	d10f      	bne.n	80061ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d007      	beq.n	80061ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d162      	bne.n	80062ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061f4:	e02e      	b.n	8006254 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b01      	cmp	r3, #1
 8006202:	d115      	bne.n	8006230 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f103 020c 	add.w	r2, r3, #12
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800622e:	e011      	b.n	8006254 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006230:	f7fd fca6 	bl	8003b80 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d803      	bhi.n	8006248 <HAL_SPI_Receive+0x166>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <HAL_SPI_Receive+0x16c>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006252:	e04a      	b.n	80062ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1cb      	bne.n	80061f6 <HAL_SPI_Receive+0x114>
 800625e:	e031      	b.n	80062c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b01      	cmp	r3, #1
 800626c:	d113      	bne.n	8006296 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	b292      	uxth	r2, r2
 800627a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006294:	e011      	b.n	80062ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006296:	f7fd fc73 	bl	8003b80 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d803      	bhi.n	80062ae <HAL_SPI_Receive+0x1cc>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d102      	bne.n	80062b4 <HAL_SPI_Receive+0x1d2>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062b8:	e017      	b.n	80062ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1cd      	bne.n	8006260 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fa45 	bl	8006758 <SPI_EndRxTransaction>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
 80062e6:	e000      	b.n	80062ea <HAL_SPI_Receive+0x208>
  }

error :
 80062e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08c      	sub	sp, #48	; 0x30
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006312:	2301      	movs	r3, #1
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_SPI_TransmitReceive+0x26>
 8006326:	2302      	movs	r3, #2
 8006328:	e18a      	b.n	8006640 <HAL_SPI_TransmitReceive+0x33c>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006332:	f7fd fc25 	bl	8003b80 <HAL_GetTick>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006348:	887b      	ldrh	r3, [r7, #2]
 800634a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800634c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006350:	2b01      	cmp	r3, #1
 8006352:	d00f      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x70>
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d107      	bne.n	800636c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <HAL_SPI_TransmitReceive+0x68>
 8006364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006368:	2b04      	cmp	r3, #4
 800636a:	d003      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800636c:	2302      	movs	r3, #2
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006372:	e15b      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x82>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_SPI_TransmitReceive+0x82>
 8006380:	887b      	ldrh	r3, [r7, #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800638c:	e14e      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b04      	cmp	r3, #4
 8006398:	d003      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2205      	movs	r2, #5
 800639e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	887a      	ldrh	r2, [r7, #2]
 80063c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d007      	beq.n	80063f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fe:	d178      	bne.n	80064f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_TransmitReceive+0x10a>
 8006408:	8b7b      	ldrh	r3, [r7, #26]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d166      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006432:	e053      	b.n	80064dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d11b      	bne.n	800647a <HAL_SPI_TransmitReceive+0x176>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <HAL_SPI_TransmitReceive+0x176>
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	2b01      	cmp	r3, #1
 8006450:	d113      	bne.n	800647a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	881a      	ldrh	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d119      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x1b8>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d014      	beq.n	80064bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	b292      	uxth	r2, r2
 800649e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064b8:	2301      	movs	r3, #1
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064bc:	f7fd fb60 	bl	8003b80 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d807      	bhi.n	80064dc <HAL_SPI_TransmitReceive+0x1d8>
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	d003      	beq.n	80064dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064da:	e0a7      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1a6      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x130>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1a1      	bne.n	8006434 <HAL_SPI_TransmitReceive+0x130>
 80064f0:	e07c      	b.n	80065ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x1fc>
 80064fa:	8b7b      	ldrh	r3, [r7, #26]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d16b      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	330c      	adds	r3, #12
 800650a:	7812      	ldrb	r2, [r2, #0]
 800650c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006526:	e057      	b.n	80065d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b02      	cmp	r3, #2
 8006534:	d11c      	bne.n	8006570 <HAL_SPI_TransmitReceive+0x26c>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <HAL_SPI_TransmitReceive+0x26c>
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d114      	bne.n	8006570 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	330c      	adds	r3, #12
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b01      	cmp	r3, #1
 800657c:	d119      	bne.n	80065b2 <HAL_SPI_TransmitReceive+0x2ae>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d014      	beq.n	80065b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065ae:	2301      	movs	r3, #1
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065b2:	f7fd fae5 	bl	8003b80 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065be:	429a      	cmp	r2, r3
 80065c0:	d803      	bhi.n	80065ca <HAL_SPI_TransmitReceive+0x2c6>
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d102      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x2cc>
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065d6:	e029      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1a2      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x224>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d19d      	bne.n	8006528 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f917 	bl	8006824 <SPI_EndRxTxTransaction>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d006      	beq.n	800660a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006608:	e010      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10b      	bne.n	800662a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006612:	2300      	movs	r3, #0
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	e000      	b.n	800662c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800662a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800663c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006640:	4618      	mov	r0, r3
 8006642:	3730      	adds	r7, #48	; 0x30
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006658:	f7fd fa92 	bl	8003b80 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4413      	add	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006668:	f7fd fa8a 	bl	8003b80 <HAL_GetTick>
 800666c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	015b      	lsls	r3, r3, #5
 8006674:	0d1b      	lsrs	r3, r3, #20
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	e054      	b.n	800672a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d050      	beq.n	800672a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006688:	f7fd fa7a 	bl	8003b80 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d13d      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b6:	d111      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	d004      	beq.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066ca:	d107      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e4:	d10f      	bne.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e017      	b.n	800674a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	3b01      	subs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	429a      	cmp	r2, r3
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	429a      	cmp	r2, r3
 8006746:	d19b      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	2000000c 	.word	0x2000000c

08006758 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800676c:	d111      	bne.n	8006792 <SPI_EndRxTransaction+0x3a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d004      	beq.n	8006782 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006780:	d107      	bne.n	8006792 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800679a:	d12a      	bne.n	80067f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a4:	d012      	beq.n	80067cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2180      	movs	r1, #128	; 0x80
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff ff49 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d02d      	beq.n	8006818 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e026      	b.n	800681a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2101      	movs	r1, #1
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff ff36 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01a      	beq.n	8006818 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e013      	b.n	800681a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2200      	movs	r2, #0
 80067fa:	2101      	movs	r1, #1
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff ff23 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d007      	beq.n	8006818 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680c:	f043 0220 	orr.w	r2, r3, #32
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e000      	b.n	800681a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <SPI_EndRxTxTransaction+0x7c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <SPI_EndRxTxTransaction+0x80>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	0d5b      	lsrs	r3, r3, #21
 800683c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006840:	fb02 f303 	mul.w	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684e:	d112      	bne.n	8006876 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2200      	movs	r2, #0
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fef4 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686a:	f043 0220 	orr.w	r2, r3, #32
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e00f      	b.n	8006896 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3b01      	subs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d0f2      	beq.n	8006876 <SPI_EndRxTxTransaction+0x52>
 8006890:	e000      	b.n	8006894 <SPI_EndRxTxTransaction+0x70>
        break;
 8006892:	bf00      	nop
  }

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	2000000c 	.word	0x2000000c
 80068a4:	165e9f81 	.word	0x165e9f81

080068a8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e034      	b.n	8006928 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7fa fe1c 	bl	8001510 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3308      	adds	r3, #8
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f001 fc6e 	bl	80081c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	461a      	mov	r2, r3
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	f001 fcb8 	bl	8008268 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6858      	ldr	r0, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	f001 fced 	bl	80082e4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	6892      	ldr	r2, [r2, #8]
 8006912:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	6892      	ldr	r2, [r2, #8]
 800691e:	f041 0101 	orr.w	r1, r1, #1
 8006922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e041      	b.n	80069c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fc ff3c 	bl	80037d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3304      	adds	r3, #4
 800696c:	4619      	mov	r1, r3
 800696e:	4610      	mov	r0, r2
 8006970:	f000 fa96 	bl	8006ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d001      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e04e      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d022      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d01d      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1f      	ldr	r2, [pc, #124]	; (8006a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d018      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1e      	ldr	r2, [pc, #120]	; (8006a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d013      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1c      	ldr	r2, [pc, #112]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00e      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1b      	ldr	r2, [pc, #108]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d009      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a19      	ldr	r2, [pc, #100]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_Base_Start_IT+0x80>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_TIM_Base_Start_IT+0xdc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b06      	cmp	r3, #6
 8006a60:	d010      	beq.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e007      	b.n	8006a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40000400 	.word	0x40000400
 8006a9c:	40000800 	.word	0x40000800
 8006aa0:	40000c00 	.word	0x40000c00
 8006aa4:	40010400 	.word	0x40010400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40001800 	.word	0x40001800

08006ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0202 	mvn.w	r2, #2
 8006adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9b5 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9a7 	bl	8006e4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f9b8 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0204 	mvn.w	r2, #4
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2202      	movs	r2, #2
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f98b 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f97d 	bl	8006e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f98e 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d122      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d11b      	bne.n	8006bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0208 	mvn.w	r2, #8
 8006b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f961 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006ba0:	e005      	b.n	8006bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f953 	bl	8006e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f964 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d122      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d11b      	bne.n	8006c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0210 	mvn.w	r2, #16
 8006bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f937 	bl	8006e62 <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e005      	b.n	8006c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f929 	bl	8006e4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f93a 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10e      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d107      	bne.n	8006c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0201 	mvn.w	r2, #1
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fc fc2e 	bl	8003490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d10e      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4c:	2b80      	cmp	r3, #128	; 0x80
 8006c4e:	d107      	bne.n	8006c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fae0 	bl	8007220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d10e      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d107      	bne.n	8006c8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8ff 	bl	8006e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d10e      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d107      	bne.n	8006cb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0220 	mvn.w	r2, #32
 8006cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 faaa 	bl	800720c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIM_ConfigClockSource+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e0b4      	b.n	8006e46 <HAL_TIM_ConfigClockSource+0x186>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d14:	d03e      	beq.n	8006d94 <HAL_TIM_ConfigClockSource+0xd4>
 8006d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1a:	f200 8087 	bhi.w	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	f000 8086 	beq.w	8006e32 <HAL_TIM_ConfigClockSource+0x172>
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2a:	d87f      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b70      	cmp	r3, #112	; 0x70
 8006d2e:	d01a      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0xa6>
 8006d30:	2b70      	cmp	r3, #112	; 0x70
 8006d32:	d87b      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d050      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x11a>
 8006d38:	2b60      	cmp	r3, #96	; 0x60
 8006d3a:	d877      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b50      	cmp	r3, #80	; 0x50
 8006d3e:	d03c      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0xfa>
 8006d40:	2b50      	cmp	r3, #80	; 0x50
 8006d42:	d873      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d058      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x13a>
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d86f      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d4c:	2b30      	cmp	r3, #48	; 0x30
 8006d4e:	d064      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x15a>
 8006d50:	2b30      	cmp	r3, #48	; 0x30
 8006d52:	d86b      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d060      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x15a>
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d867      	bhi.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d05c      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x15a>
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d05a      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x15a>
 8006d64:	e062      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6899      	ldr	r1, [r3, #8]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f000 f9ad 	bl	80070d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	609a      	str	r2, [r3, #8]
      break;
 8006d92:	e04f      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	6899      	ldr	r1, [r3, #8]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f000 f996 	bl	80070d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db6:	609a      	str	r2, [r3, #8]
      break;
 8006db8:	e03c      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f000 f90a 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2150      	movs	r1, #80	; 0x50
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 f963 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e02c      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6859      	ldr	r1, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f000 f929 	bl	800703e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2160      	movs	r1, #96	; 0x60
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f953 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006df8:	e01c      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f000 f8ea 	bl	8006fe0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2140      	movs	r1, #64	; 0x40
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f943 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006e18:	e00c      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	4610      	mov	r0, r2
 8006e26:	f000 f93a 	bl	800709e <TIM_ITRx_SetConfig>
      break;
 8006e2a:	e003      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e30:	e000      	b.n	8006e34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a40      	ldr	r2, [pc, #256]	; (8006fb4 <TIM_Base_SetConfig+0x114>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d013      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebe:	d00f      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3d      	ldr	r2, [pc, #244]	; (8006fb8 <TIM_Base_SetConfig+0x118>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00b      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3c      	ldr	r2, [pc, #240]	; (8006fbc <TIM_Base_SetConfig+0x11c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d007      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a3b      	ldr	r2, [pc, #236]	; (8006fc0 <TIM_Base_SetConfig+0x120>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d003      	beq.n	8006ee0 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a3a      	ldr	r2, [pc, #232]	; (8006fc4 <TIM_Base_SetConfig+0x124>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d108      	bne.n	8006ef2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2f      	ldr	r2, [pc, #188]	; (8006fb4 <TIM_Base_SetConfig+0x114>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f00:	d027      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2c      	ldr	r2, [pc, #176]	; (8006fb8 <TIM_Base_SetConfig+0x118>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d023      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2b      	ldr	r2, [pc, #172]	; (8006fbc <TIM_Base_SetConfig+0x11c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01f      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <TIM_Base_SetConfig+0x120>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d01b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <TIM_Base_SetConfig+0x124>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d017      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a28      	ldr	r2, [pc, #160]	; (8006fc8 <TIM_Base_SetConfig+0x128>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <TIM_Base_SetConfig+0x12c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00f      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <TIM_Base_SetConfig+0x130>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00b      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	; (8006fd4 <TIM_Base_SetConfig+0x134>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d007      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a24      	ldr	r2, [pc, #144]	; (8006fd8 <TIM_Base_SetConfig+0x138>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	; (8006fdc <TIM_Base_SetConfig+0x13c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d108      	bne.n	8006f64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <TIM_Base_SetConfig+0x114>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_Base_SetConfig+0xf8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a0c      	ldr	r2, [pc, #48]	; (8006fc4 <TIM_Base_SetConfig+0x124>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d103      	bne.n	8006fa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	615a      	str	r2, [r3, #20]
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800
 8006fd4:	40001800 	.word	0x40001800
 8006fd8:	40001c00 	.word	0x40001c00
 8006fdc:	40002000 	.word	0x40002000

08006fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	f023 0201 	bic.w	r2, r3, #1
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800700a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 030a 	bic.w	r3, r3, #10
 800701c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800703e:	b480      	push	{r7}
 8007040:	b087      	sub	sp, #28
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f023 0210 	bic.w	r2, r3, #16
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800707a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f043 0307 	orr.w	r3, r3, #7
 80070c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	609a      	str	r2, [r3, #8]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	609a      	str	r2, [r3, #8]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007128:	2302      	movs	r3, #2
 800712a:	e05a      	b.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d022      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007178:	d01d      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1d      	ldr	r2, [pc, #116]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d018      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d013      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1a      	ldr	r2, [pc, #104]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d00e      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a18      	ldr	r2, [pc, #96]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a15      	ldr	r2, [pc, #84]	; (8007208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d10c      	bne.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40000400 	.word	0x40000400
 80071f8:	40000800 	.word	0x40000800
 80071fc:	40000c00 	.word	0x40000c00
 8007200:	40010400 	.word	0x40010400
 8007204:	40014000 	.word	0x40014000
 8007208:	40001800 	.word	0x40001800

0800720c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e03f      	b.n	80072c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fc fb72 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2224      	movs	r2, #36	; 0x24
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fddb 	bl	8007e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800728c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800729c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b08a      	sub	sp, #40	; 0x28
 80072d2:	af02      	add	r7, sp, #8
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	4613      	mov	r3, r2
 80072dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d17c      	bne.n	80073e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_Transmit+0x2c>
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e075      	b.n	80073ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_UART_Transmit+0x3e>
 8007308:	2302      	movs	r3, #2
 800730a:	e06e      	b.n	80073ea <HAL_UART_Transmit+0x11c>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2221      	movs	r2, #33	; 0x21
 800731e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007322:	f7fc fc2d 	bl	8003b80 <HAL_GetTick>
 8007326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	88fa      	ldrh	r2, [r7, #6]
 800732c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	88fa      	ldrh	r2, [r7, #6]
 8007332:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d108      	bne.n	8007350 <HAL_UART_Transmit+0x82>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d104      	bne.n	8007350 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e003      	b.n	8007358 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007360:	e02a      	b.n	80073b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2200      	movs	r2, #0
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fb1f 	bl	80079b0 <UART_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e036      	b.n	80073ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10b      	bne.n	800739a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007390:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	3302      	adds	r3, #2
 8007396:	61bb      	str	r3, [r7, #24]
 8007398:	e007      	b.n	80073aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	781a      	ldrb	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	3301      	adds	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1cf      	bne.n	8007362 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2140      	movs	r1, #64	; 0x40
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 faef 	bl	80079b0 <UART_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e006      	b.n	80073ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e000      	b.n	80073ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073e8:	2302      	movs	r3, #2
  }
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	4613      	mov	r3, r2
 80073fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b20      	cmp	r3, #32
 800740a:	d11d      	bne.n	8007448 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_UART_Receive_IT+0x26>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e016      	b.n	800744a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_UART_Receive_IT+0x38>
 8007426:	2302      	movs	r3, #2
 8007428:	e00f      	b.n	800744a <HAL_UART_Receive_IT+0x58>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	461a      	mov	r2, r3
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fb24 	bl	8007a8c <UART_Start_Receive_IT>
 8007444:	4603      	mov	r3, r0
 8007446:	e000      	b.n	800744a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b0ba      	sub	sp, #232	; 0xe8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800747a:	2300      	movs	r3, #0
 800747c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007480:	2300      	movs	r3, #0
 8007482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10f      	bne.n	80074ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <HAL_UART_IRQHandler+0x66>
 80074a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fc03 	bl	8007cbe <UART_Receive_IT>
      return;
 80074b8:	e256      	b.n	8007968 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 80de 	beq.w	8007680 <HAL_UART_IRQHandler+0x22c>
 80074c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d106      	bne.n	80074de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80d1 	beq.w	8007680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <HAL_UART_IRQHandler+0xae>
 80074ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f043 0201 	orr.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <HAL_UART_IRQHandler+0xd2>
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0202 	orr.w	r2, r3, #2
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00b      	beq.n	800754a <HAL_UART_IRQHandler+0xf6>
 8007532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0204 	orr.w	r2, r3, #4
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d011      	beq.n	800757a <HAL_UART_IRQHandler+0x126>
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 81ed 	beq.w	800795e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <HAL_UART_IRQHandler+0x14e>
 8007590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fb8e 	bl	8007cbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <HAL_UART_IRQHandler+0x17a>
 80075c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d04f      	beq.n	800766e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa96 	bl	8007b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b40      	cmp	r3, #64	; 0x40
 80075e0:	d141      	bne.n	8007666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3314      	adds	r3, #20
 80075e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800760e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800761a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d9      	bne.n	80075e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	2b00      	cmp	r3, #0
 8007634:	d013      	beq.n	800765e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	4a7d      	ldr	r2, [pc, #500]	; (8007830 <HAL_UART_IRQHandler+0x3dc>)
 800763c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	4618      	mov	r0, r3
 8007644:	f7fc fc4d 	bl	8003ee2 <HAL_DMA_Abort_IT>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	e00e      	b.n	800767c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f990 	bl	8007984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007664:	e00a      	b.n	800767c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f98c 	bl	8007984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766c:	e006      	b.n	800767c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f988 	bl	8007984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800767a:	e170      	b.n	800795e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	bf00      	nop
    return;
 800767e:	e16e      	b.n	800795e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007684:	2b01      	cmp	r3, #1
 8007686:	f040 814a 	bne.w	800791e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8143 	beq.w	800791e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 813c 	beq.w	800791e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60bb      	str	r3, [r7, #8]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	60bb      	str	r3, [r7, #8]
 80076ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	f040 80b4 	bne.w	8007834 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8140 	beq.w	8007962 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ea:	429a      	cmp	r2, r3
 80076ec:	f080 8139 	bcs.w	8007962 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	f000 8088 	beq.w	8007816 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800771c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	330c      	adds	r3, #12
 800772e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800773e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800774a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1d9      	bne.n	8007706 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3314      	adds	r3, #20
 8007758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007776:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800777a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800777e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e1      	bne.n	8007752 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800779e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3314      	adds	r3, #20
 80077ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e3      	bne.n	800778e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e6:	f023 0310 	bic.w	r3, r3, #16
 80077ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80077fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e3      	bne.n	80077d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	4618      	mov	r0, r3
 8007812:	f7fc faf6 	bl	8003e02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800781e:	b29b      	uxth	r3, r3
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	b29b      	uxth	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f8b6 	bl	8007998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800782c:	e099      	b.n	8007962 <HAL_UART_IRQHandler+0x50e>
 800782e:	bf00      	nop
 8007830:	08007bc7 	.word	0x08007bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800783c:	b29b      	uxth	r3, r3
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 808b 	beq.w	8007966 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 8086 	beq.w	8007966 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800787e:	647a      	str	r2, [r7, #68]	; 0x44
 8007880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e3      	bne.n	800785a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3314      	adds	r3, #20
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	623b      	str	r3, [r7, #32]
   return(result);
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3314      	adds	r3, #20
 80078b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078b6:	633a      	str	r2, [r7, #48]	; 0x30
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e3      	bne.n	8007892 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078fc:	61fa      	str	r2, [r7, #28]
 80078fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	69b9      	ldr	r1, [r7, #24]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	617b      	str	r3, [r7, #20]
   return(result);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e3      	bne.n	80078d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f83e 	bl	8007998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800791c:	e023      	b.n	8007966 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800791e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <HAL_UART_IRQHandler+0x4ea>
 800792a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f959 	bl	8007bee <UART_Transmit_IT>
    return;
 800793c:	e014      	b.n	8007968 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <HAL_UART_IRQHandler+0x514>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f999 	bl	8007c8e <UART_EndTransmit_IT>
    return;
 800795c:	e004      	b.n	8007968 <HAL_UART_IRQHandler+0x514>
    return;
 800795e:	bf00      	nop
 8007960:	e002      	b.n	8007968 <HAL_UART_IRQHandler+0x514>
      return;
 8007962:	bf00      	nop
 8007964:	e000      	b.n	8007968 <HAL_UART_IRQHandler+0x514>
      return;
 8007966:	bf00      	nop
  }
}
 8007968:	37e8      	adds	r7, #232	; 0xe8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop

08007970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	460b      	mov	r3, r1
 80079a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b090      	sub	sp, #64	; 0x40
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	603b      	str	r3, [r7, #0]
 80079bc:	4613      	mov	r3, r2
 80079be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	e050      	b.n	8007a64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d04c      	beq.n	8007a64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80079d0:	f7fc f8d6 	bl	8003b80 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079dc:	429a      	cmp	r2, r3
 80079de:	d241      	bcs.n	8007a64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	330c      	adds	r3, #12
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	330c      	adds	r3, #12
 80079fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a00:	637a      	str	r2, [r7, #52]	; 0x34
 8007a02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3314      	adds	r3, #20
 8007a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	613b      	str	r3, [r7, #16]
   return(result);
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	f023 0301 	bic.w	r3, r3, #1
 8007a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3314      	adds	r3, #20
 8007a32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a34:	623a      	str	r2, [r7, #32]
 8007a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	69f9      	ldr	r1, [r7, #28]
 8007a3a:	6a3a      	ldr	r2, [r7, #32]
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e5      	bne.n	8007a14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e00f      	b.n	8007a84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d09f      	beq.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3740      	adds	r7, #64	; 0x40
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2222      	movs	r2, #34	; 0x22
 8007ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0220 	orr.w	r2, r2, #32
 8007af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b095      	sub	sp, #84	; 0x54
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b28:	643a      	str	r2, [r7, #64]	; 0x40
 8007b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e5      	bne.n	8007b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3314      	adds	r3, #20
 8007b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b64:	e841 2300 	strex	r3, r2, [r1]
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1e5      	bne.n	8007b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d119      	bne.n	8007bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f023 0310 	bic.w	r3, r3, #16
 8007b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b98:	61ba      	str	r2, [r7, #24]
 8007b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6979      	ldr	r1, [r7, #20]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bba:	bf00      	nop
 8007bbc:	3754      	adds	r7, #84	; 0x54
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff fecf 	bl	8007984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b21      	cmp	r3, #33	; 0x21
 8007c00:	d13e      	bne.n	8007c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c0a:	d114      	bne.n	8007c36 <UART_Transmit_IT+0x48>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d110      	bne.n	8007c36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	1c9a      	adds	r2, r3, #2
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	621a      	str	r2, [r3, #32]
 8007c34:	e008      	b.n	8007c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	1c59      	adds	r1, r3, #1
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6211      	str	r1, [r2, #32]
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	4619      	mov	r1, r3
 8007c56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10f      	bne.n	8007c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e000      	b.n	8007c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c80:	2302      	movs	r3, #2
  }
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff fe5e 	bl	8007970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b08c      	sub	sp, #48	; 0x30
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b22      	cmp	r3, #34	; 0x22
 8007cd0:	f040 80ab 	bne.w	8007e2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cdc:	d117      	bne.n	8007d0e <UART_Receive_IT+0x50>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d113      	bne.n	8007d0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	1c9a      	adds	r2, r3, #2
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8007d0c:	e026      	b.n	8007d5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d14:	2300      	movs	r3, #0
 8007d16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d20:	d007      	beq.n	8007d32 <UART_Receive_IT+0x74>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <UART_Receive_IT+0x82>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	e008      	b.n	8007d52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d15a      	bne.n	8007e26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0220 	bic.w	r2, r2, #32
 8007d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695a      	ldr	r2, [r3, #20]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d135      	bne.n	8007e1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f023 0310 	bic.w	r3, r3, #16
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd6:	623a      	str	r2, [r7, #32]
 8007dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69f9      	ldr	r1, [r7, #28]
 8007ddc:	6a3a      	ldr	r2, [r7, #32]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d10a      	bne.n	8007e0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fdbf 	bl	8007998 <HAL_UARTEx_RxEventCallback>
 8007e1a:	e002      	b.n	8007e22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fb fd27 	bl	8003870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e002      	b.n	8007e2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e000      	b.n	8007e2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007e2a:	2302      	movs	r3, #2
  }
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3730      	adds	r7, #48	; 0x30
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	b09f      	sub	sp, #124	; 0x7c
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	68d9      	ldr	r1, [r3, #12]
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	ea40 0301 	orr.w	r3, r0, r1
 8007e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e78:	f021 010c 	bic.w	r1, r1, #12
 8007e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e82:	430b      	orrs	r3, r1
 8007e84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	6999      	ldr	r1, [r3, #24]
 8007e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	ea40 0301 	orr.w	r3, r0, r1
 8007e9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4bc5      	ldr	r3, [pc, #788]	; (80081b8 <UART_SetConfig+0x384>)
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d004      	beq.n	8007eb2 <UART_SetConfig+0x7e>
 8007ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	4bc3      	ldr	r3, [pc, #780]	; (80081bc <UART_SetConfig+0x388>)
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d103      	bne.n	8007eba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eb2:	f7fd ff3d 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8007eb6:	6778      	str	r0, [r7, #116]	; 0x74
 8007eb8:	e002      	b.n	8007ec0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eba:	f7fd ff25 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 8007ebe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	f040 80b6 	bne.w	8008038 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ece:	461c      	mov	r4, r3
 8007ed0:	f04f 0500 	mov.w	r5, #0
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	462b      	mov	r3, r5
 8007ed8:	1891      	adds	r1, r2, r2
 8007eda:	6439      	str	r1, [r7, #64]	; 0x40
 8007edc:	415b      	adcs	r3, r3
 8007ede:	647b      	str	r3, [r7, #68]	; 0x44
 8007ee0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ee4:	1912      	adds	r2, r2, r4
 8007ee6:	eb45 0303 	adc.w	r3, r5, r3
 8007eea:	f04f 0000 	mov.w	r0, #0
 8007eee:	f04f 0100 	mov.w	r1, #0
 8007ef2:	00d9      	lsls	r1, r3, #3
 8007ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef8:	00d0      	lsls	r0, r2, #3
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	1911      	adds	r1, r2, r4
 8007f00:	6639      	str	r1, [r7, #96]	; 0x60
 8007f02:	416b      	adcs	r3, r5
 8007f04:	667b      	str	r3, [r7, #100]	; 0x64
 8007f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	1891      	adds	r1, r2, r2
 8007f12:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f14:	415b      	adcs	r3, r3
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f1c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007f20:	f7f8 f9ae 	bl	8000280 <__aeabi_uldivmod>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4ba5      	ldr	r3, [pc, #660]	; (80081c0 <UART_SetConfig+0x38c>)
 8007f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	011e      	lsls	r6, r3, #4
 8007f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f34:	461c      	mov	r4, r3
 8007f36:	f04f 0500 	mov.w	r5, #0
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	462b      	mov	r3, r5
 8007f3e:	1891      	adds	r1, r2, r2
 8007f40:	6339      	str	r1, [r7, #48]	; 0x30
 8007f42:	415b      	adcs	r3, r3
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 8007f46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f4a:	1912      	adds	r2, r2, r4
 8007f4c:	eb45 0303 	adc.w	r3, r5, r3
 8007f50:	f04f 0000 	mov.w	r0, #0
 8007f54:	f04f 0100 	mov.w	r1, #0
 8007f58:	00d9      	lsls	r1, r3, #3
 8007f5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f5e:	00d0      	lsls	r0, r2, #3
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	1911      	adds	r1, r2, r4
 8007f66:	65b9      	str	r1, [r7, #88]	; 0x58
 8007f68:	416b      	adcs	r3, r5
 8007f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	461a      	mov	r2, r3
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	1891      	adds	r1, r2, r2
 8007f78:	62b9      	str	r1, [r7, #40]	; 0x28
 8007f7a:	415b      	adcs	r3, r3
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f82:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007f86:	f7f8 f97b 	bl	8000280 <__aeabi_uldivmod>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4b8c      	ldr	r3, [pc, #560]	; (80081c0 <UART_SetConfig+0x38c>)
 8007f90:	fba3 1302 	umull	r1, r3, r3, r2
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	2164      	movs	r1, #100	; 0x64
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	3332      	adds	r3, #50	; 0x32
 8007fa2:	4a87      	ldr	r2, [pc, #540]	; (80081c0 <UART_SetConfig+0x38c>)
 8007fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fb0:	441e      	add	r6, r3
 8007fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f04f 0100 	mov.w	r1, #0
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	1894      	adds	r4, r2, r2
 8007fc0:	623c      	str	r4, [r7, #32]
 8007fc2:	415b      	adcs	r3, r3
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fca:	1812      	adds	r2, r2, r0
 8007fcc:	eb41 0303 	adc.w	r3, r1, r3
 8007fd0:	f04f 0400 	mov.w	r4, #0
 8007fd4:	f04f 0500 	mov.w	r5, #0
 8007fd8:	00dd      	lsls	r5, r3, #3
 8007fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fde:	00d4      	lsls	r4, r2, #3
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	1814      	adds	r4, r2, r0
 8007fe6:	653c      	str	r4, [r7, #80]	; 0x50
 8007fe8:	414b      	adcs	r3, r1
 8007fea:	657b      	str	r3, [r7, #84]	; 0x54
 8007fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f04f 0300 	mov.w	r3, #0
 8007ff6:	1891      	adds	r1, r2, r2
 8007ff8:	61b9      	str	r1, [r7, #24]
 8007ffa:	415b      	adcs	r3, r3
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008002:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008006:	f7f8 f93b 	bl	8000280 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4b6c      	ldr	r3, [pc, #432]	; (80081c0 <UART_SetConfig+0x38c>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	; 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	3332      	adds	r3, #50	; 0x32
 8008022:	4a67      	ldr	r2, [pc, #412]	; (80081c0 <UART_SetConfig+0x38c>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 0207 	and.w	r2, r3, #7
 800802e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4432      	add	r2, r6
 8008034:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008036:	e0b9      	b.n	80081ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800803a:	461c      	mov	r4, r3
 800803c:	f04f 0500 	mov.w	r5, #0
 8008040:	4622      	mov	r2, r4
 8008042:	462b      	mov	r3, r5
 8008044:	1891      	adds	r1, r2, r2
 8008046:	6139      	str	r1, [r7, #16]
 8008048:	415b      	adcs	r3, r3
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008050:	1912      	adds	r2, r2, r4
 8008052:	eb45 0303 	adc.w	r3, r5, r3
 8008056:	f04f 0000 	mov.w	r0, #0
 800805a:	f04f 0100 	mov.w	r1, #0
 800805e:	00d9      	lsls	r1, r3, #3
 8008060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008064:	00d0      	lsls	r0, r2, #3
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	eb12 0804 	adds.w	r8, r2, r4
 800806e:	eb43 0905 	adc.w	r9, r3, r5
 8008072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4618      	mov	r0, r3
 8008078:	f04f 0100 	mov.w	r1, #0
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	008b      	lsls	r3, r1, #2
 8008086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800808a:	0082      	lsls	r2, r0, #2
 800808c:	4640      	mov	r0, r8
 800808e:	4649      	mov	r1, r9
 8008090:	f7f8 f8f6 	bl	8000280 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4b49      	ldr	r3, [pc, #292]	; (80081c0 <UART_SetConfig+0x38c>)
 800809a:	fba3 2302 	umull	r2, r3, r3, r2
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	011e      	lsls	r6, r3, #4
 80080a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a4:	4618      	mov	r0, r3
 80080a6:	f04f 0100 	mov.w	r1, #0
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	1894      	adds	r4, r2, r2
 80080b0:	60bc      	str	r4, [r7, #8]
 80080b2:	415b      	adcs	r3, r3
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080ba:	1812      	adds	r2, r2, r0
 80080bc:	eb41 0303 	adc.w	r3, r1, r3
 80080c0:	f04f 0400 	mov.w	r4, #0
 80080c4:	f04f 0500 	mov.w	r5, #0
 80080c8:	00dd      	lsls	r5, r3, #3
 80080ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080ce:	00d4      	lsls	r4, r2, #3
 80080d0:	4622      	mov	r2, r4
 80080d2:	462b      	mov	r3, r5
 80080d4:	1814      	adds	r4, r2, r0
 80080d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80080d8:	414b      	adcs	r3, r1
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f04f 0100 	mov.w	r1, #0
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	008b      	lsls	r3, r1, #2
 80080f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80080f4:	0082      	lsls	r2, r0, #2
 80080f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80080fa:	f7f8 f8c1 	bl	8000280 <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <UART_SetConfig+0x38c>)
 8008104:	fba3 1302 	umull	r1, r3, r3, r2
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	2164      	movs	r1, #100	; 0x64
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	011b      	lsls	r3, r3, #4
 8008114:	3332      	adds	r3, #50	; 0x32
 8008116:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <UART_SetConfig+0x38c>)
 8008118:	fba2 2303 	umull	r2, r3, r2, r3
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008122:	441e      	add	r6, r3
 8008124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008126:	4618      	mov	r0, r3
 8008128:	f04f 0100 	mov.w	r1, #0
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	1894      	adds	r4, r2, r2
 8008132:	603c      	str	r4, [r7, #0]
 8008134:	415b      	adcs	r3, r3
 8008136:	607b      	str	r3, [r7, #4]
 8008138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800813c:	1812      	adds	r2, r2, r0
 800813e:	eb41 0303 	adc.w	r3, r1, r3
 8008142:	f04f 0400 	mov.w	r4, #0
 8008146:	f04f 0500 	mov.w	r5, #0
 800814a:	00dd      	lsls	r5, r3, #3
 800814c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008150:	00d4      	lsls	r4, r2, #3
 8008152:	4622      	mov	r2, r4
 8008154:	462b      	mov	r3, r5
 8008156:	eb12 0a00 	adds.w	sl, r2, r0
 800815a:	eb43 0b01 	adc.w	fp, r3, r1
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	f04f 0100 	mov.w	r1, #0
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	008b      	lsls	r3, r1, #2
 8008172:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008176:	0082      	lsls	r2, r0, #2
 8008178:	4650      	mov	r0, sl
 800817a:	4659      	mov	r1, fp
 800817c:	f7f8 f880 	bl	8000280 <__aeabi_uldivmod>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <UART_SetConfig+0x38c>)
 8008186:	fba3 1302 	umull	r1, r3, r3, r2
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	2164      	movs	r1, #100	; 0x64
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	3332      	adds	r3, #50	; 0x32
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <UART_SetConfig+0x38c>)
 800819a:	fba2 2303 	umull	r2, r3, r2, r3
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	f003 020f 	and.w	r2, r3, #15
 80081a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4432      	add	r2, r6
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	377c      	adds	r7, #124	; 0x7c
 80081b0:	46bd      	mov	sp, r7
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	bf00      	nop
 80081b8:	40011000 	.word	0x40011000
 80081bc:	40011400 	.word	0x40011400
 80081c0:	51eb851f 	.word	0x51eb851f

080081c4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4b20      	ldr	r3, [pc, #128]	; (8008264 <FSMC_NORSRAM_Init+0xa0>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80081ee:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80081f4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80081fa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008200:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008206:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800820c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008212:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008218:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800821e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008224:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800822a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008230:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b08      	cmp	r3, #8
 800823e:	d103      	bne.n	8008248 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008246:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68f9      	ldr	r1, [r7, #12]
 8008250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	fff00080 	.word	0xfff00080

08008268 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800828a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008296:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800829e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80082a6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80082b0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	3b02      	subs	r3, #2
 80082b8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80082ba:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80082c0:	4313      	orrs	r3, r2
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6979      	ldr	r1, [r7, #20]
 80082d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
	...

080082e4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082fc:	d122      	bne.n	8008344 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008306:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800830c:	4013      	ands	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800831a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008322:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800832a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008330:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008342:	e005      	b.n	8008350 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800834c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	cff00000 	.word	0xcff00000

08008364 <atoi>:
 8008364:	220a      	movs	r2, #10
 8008366:	2100      	movs	r1, #0
 8008368:	f000 b8d6 	b.w	8008518 <strtol>

0800836c <__errno>:
 800836c:	4b01      	ldr	r3, [pc, #4]	; (8008374 <__errno+0x8>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000018 	.word	0x20000018

08008378 <__libc_init_array>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4d0d      	ldr	r5, [pc, #52]	; (80083b0 <__libc_init_array+0x38>)
 800837c:	4c0d      	ldr	r4, [pc, #52]	; (80083b4 <__libc_init_array+0x3c>)
 800837e:	1b64      	subs	r4, r4, r5
 8008380:	10a4      	asrs	r4, r4, #2
 8008382:	2600      	movs	r6, #0
 8008384:	42a6      	cmp	r6, r4
 8008386:	d109      	bne.n	800839c <__libc_init_array+0x24>
 8008388:	4d0b      	ldr	r5, [pc, #44]	; (80083b8 <__libc_init_array+0x40>)
 800838a:	4c0c      	ldr	r4, [pc, #48]	; (80083bc <__libc_init_array+0x44>)
 800838c:	f000 fcdc 	bl	8008d48 <_init>
 8008390:	1b64      	subs	r4, r4, r5
 8008392:	10a4      	asrs	r4, r4, #2
 8008394:	2600      	movs	r6, #0
 8008396:	42a6      	cmp	r6, r4
 8008398:	d105      	bne.n	80083a6 <__libc_init_array+0x2e>
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a0:	4798      	blx	r3
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7ee      	b.n	8008384 <__libc_init_array+0xc>
 80083a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083aa:	4798      	blx	r3
 80083ac:	3601      	adds	r6, #1
 80083ae:	e7f2      	b.n	8008396 <__libc_init_array+0x1e>
 80083b0:	0800bf14 	.word	0x0800bf14
 80083b4:	0800bf14 	.word	0x0800bf14
 80083b8:	0800bf14 	.word	0x0800bf14
 80083bc:	0800bf18 	.word	0x0800bf18

080083c0 <memset>:
 80083c0:	4402      	add	r2, r0
 80083c2:	4603      	mov	r3, r0
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d100      	bne.n	80083ca <memset+0xa>
 80083c8:	4770      	bx	lr
 80083ca:	f803 1b01 	strb.w	r1, [r3], #1
 80083ce:	e7f9      	b.n	80083c4 <memset+0x4>

080083d0 <siprintf>:
 80083d0:	b40e      	push	{r1, r2, r3}
 80083d2:	b500      	push	{lr}
 80083d4:	b09c      	sub	sp, #112	; 0x70
 80083d6:	ab1d      	add	r3, sp, #116	; 0x74
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083e0:	4809      	ldr	r0, [pc, #36]	; (8008408 <siprintf+0x38>)
 80083e2:	9107      	str	r1, [sp, #28]
 80083e4:	9104      	str	r1, [sp, #16]
 80083e6:	4909      	ldr	r1, [pc, #36]	; (800840c <siprintf+0x3c>)
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	9105      	str	r1, [sp, #20]
 80083ee:	6800      	ldr	r0, [r0, #0]
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	a902      	add	r1, sp, #8
 80083f4:	f000 f8f6 	bl	80085e4 <_svfiprintf_r>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2200      	movs	r2, #0
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	b01c      	add	sp, #112	; 0x70
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b003      	add	sp, #12
 8008406:	4770      	bx	lr
 8008408:	20000018 	.word	0x20000018
 800840c:	ffff0208 	.word	0xffff0208

08008410 <_strtol_l.isra.0>:
 8008410:	2b01      	cmp	r3, #1
 8008412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008416:	d001      	beq.n	800841c <_strtol_l.isra.0+0xc>
 8008418:	2b24      	cmp	r3, #36	; 0x24
 800841a:	d906      	bls.n	800842a <_strtol_l.isra.0+0x1a>
 800841c:	f7ff ffa6 	bl	800836c <__errno>
 8008420:	2316      	movs	r3, #22
 8008422:	6003      	str	r3, [r0, #0]
 8008424:	2000      	movs	r0, #0
 8008426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842a:	4f3a      	ldr	r7, [pc, #232]	; (8008514 <_strtol_l.isra.0+0x104>)
 800842c:	468e      	mov	lr, r1
 800842e:	4676      	mov	r6, lr
 8008430:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008434:	5de5      	ldrb	r5, [r4, r7]
 8008436:	f015 0508 	ands.w	r5, r5, #8
 800843a:	d1f8      	bne.n	800842e <_strtol_l.isra.0+0x1e>
 800843c:	2c2d      	cmp	r4, #45	; 0x2d
 800843e:	d134      	bne.n	80084aa <_strtol_l.isra.0+0x9a>
 8008440:	f89e 4000 	ldrb.w	r4, [lr]
 8008444:	f04f 0801 	mov.w	r8, #1
 8008448:	f106 0e02 	add.w	lr, r6, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d05c      	beq.n	800850a <_strtol_l.isra.0+0xfa>
 8008450:	2b10      	cmp	r3, #16
 8008452:	d10c      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008454:	2c30      	cmp	r4, #48	; 0x30
 8008456:	d10a      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008458:	f89e 4000 	ldrb.w	r4, [lr]
 800845c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008460:	2c58      	cmp	r4, #88	; 0x58
 8008462:	d14d      	bne.n	8008500 <_strtol_l.isra.0+0xf0>
 8008464:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008468:	2310      	movs	r3, #16
 800846a:	f10e 0e02 	add.w	lr, lr, #2
 800846e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008472:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008476:	2600      	movs	r6, #0
 8008478:	fbbc f9f3 	udiv	r9, ip, r3
 800847c:	4635      	mov	r5, r6
 800847e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008482:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008486:	2f09      	cmp	r7, #9
 8008488:	d818      	bhi.n	80084bc <_strtol_l.isra.0+0xac>
 800848a:	463c      	mov	r4, r7
 800848c:	42a3      	cmp	r3, r4
 800848e:	dd24      	ble.n	80084da <_strtol_l.isra.0+0xca>
 8008490:	2e00      	cmp	r6, #0
 8008492:	db1f      	blt.n	80084d4 <_strtol_l.isra.0+0xc4>
 8008494:	45a9      	cmp	r9, r5
 8008496:	d31d      	bcc.n	80084d4 <_strtol_l.isra.0+0xc4>
 8008498:	d101      	bne.n	800849e <_strtol_l.isra.0+0x8e>
 800849a:	45a2      	cmp	sl, r4
 800849c:	db1a      	blt.n	80084d4 <_strtol_l.isra.0+0xc4>
 800849e:	fb05 4503 	mla	r5, r5, r3, r4
 80084a2:	2601      	movs	r6, #1
 80084a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80084a8:	e7eb      	b.n	8008482 <_strtol_l.isra.0+0x72>
 80084aa:	2c2b      	cmp	r4, #43	; 0x2b
 80084ac:	bf08      	it	eq
 80084ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80084b2:	46a8      	mov	r8, r5
 80084b4:	bf08      	it	eq
 80084b6:	f106 0e02 	addeq.w	lr, r6, #2
 80084ba:	e7c7      	b.n	800844c <_strtol_l.isra.0+0x3c>
 80084bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80084c0:	2f19      	cmp	r7, #25
 80084c2:	d801      	bhi.n	80084c8 <_strtol_l.isra.0+0xb8>
 80084c4:	3c37      	subs	r4, #55	; 0x37
 80084c6:	e7e1      	b.n	800848c <_strtol_l.isra.0+0x7c>
 80084c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80084cc:	2f19      	cmp	r7, #25
 80084ce:	d804      	bhi.n	80084da <_strtol_l.isra.0+0xca>
 80084d0:	3c57      	subs	r4, #87	; 0x57
 80084d2:	e7db      	b.n	800848c <_strtol_l.isra.0+0x7c>
 80084d4:	f04f 36ff 	mov.w	r6, #4294967295
 80084d8:	e7e4      	b.n	80084a4 <_strtol_l.isra.0+0x94>
 80084da:	2e00      	cmp	r6, #0
 80084dc:	da05      	bge.n	80084ea <_strtol_l.isra.0+0xda>
 80084de:	2322      	movs	r3, #34	; 0x22
 80084e0:	6003      	str	r3, [r0, #0]
 80084e2:	4665      	mov	r5, ip
 80084e4:	b942      	cbnz	r2, 80084f8 <_strtol_l.isra.0+0xe8>
 80084e6:	4628      	mov	r0, r5
 80084e8:	e79d      	b.n	8008426 <_strtol_l.isra.0+0x16>
 80084ea:	f1b8 0f00 	cmp.w	r8, #0
 80084ee:	d000      	beq.n	80084f2 <_strtol_l.isra.0+0xe2>
 80084f0:	426d      	negs	r5, r5
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d0f7      	beq.n	80084e6 <_strtol_l.isra.0+0xd6>
 80084f6:	b10e      	cbz	r6, 80084fc <_strtol_l.isra.0+0xec>
 80084f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80084fc:	6011      	str	r1, [r2, #0]
 80084fe:	e7f2      	b.n	80084e6 <_strtol_l.isra.0+0xd6>
 8008500:	2430      	movs	r4, #48	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1b3      	bne.n	800846e <_strtol_l.isra.0+0x5e>
 8008506:	2308      	movs	r3, #8
 8008508:	e7b1      	b.n	800846e <_strtol_l.isra.0+0x5e>
 800850a:	2c30      	cmp	r4, #48	; 0x30
 800850c:	d0a4      	beq.n	8008458 <_strtol_l.isra.0+0x48>
 800850e:	230a      	movs	r3, #10
 8008510:	e7ad      	b.n	800846e <_strtol_l.isra.0+0x5e>
 8008512:	bf00      	nop
 8008514:	0800bdd9 	.word	0x0800bdd9

08008518 <strtol>:
 8008518:	4613      	mov	r3, r2
 800851a:	460a      	mov	r2, r1
 800851c:	4601      	mov	r1, r0
 800851e:	4802      	ldr	r0, [pc, #8]	; (8008528 <strtol+0x10>)
 8008520:	6800      	ldr	r0, [r0, #0]
 8008522:	f7ff bf75 	b.w	8008410 <_strtol_l.isra.0>
 8008526:	bf00      	nop
 8008528:	20000018 	.word	0x20000018

0800852c <__ssputs_r>:
 800852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	688e      	ldr	r6, [r1, #8]
 8008532:	429e      	cmp	r6, r3
 8008534:	4682      	mov	sl, r0
 8008536:	460c      	mov	r4, r1
 8008538:	4690      	mov	r8, r2
 800853a:	461f      	mov	r7, r3
 800853c:	d838      	bhi.n	80085b0 <__ssputs_r+0x84>
 800853e:	898a      	ldrh	r2, [r1, #12]
 8008540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008544:	d032      	beq.n	80085ac <__ssputs_r+0x80>
 8008546:	6825      	ldr	r5, [r4, #0]
 8008548:	6909      	ldr	r1, [r1, #16]
 800854a:	eba5 0901 	sub.w	r9, r5, r1
 800854e:	6965      	ldr	r5, [r4, #20]
 8008550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008558:	3301      	adds	r3, #1
 800855a:	444b      	add	r3, r9
 800855c:	106d      	asrs	r5, r5, #1
 800855e:	429d      	cmp	r5, r3
 8008560:	bf38      	it	cc
 8008562:	461d      	movcc	r5, r3
 8008564:	0553      	lsls	r3, r2, #21
 8008566:	d531      	bpl.n	80085cc <__ssputs_r+0xa0>
 8008568:	4629      	mov	r1, r5
 800856a:	f000 fb47 	bl	8008bfc <_malloc_r>
 800856e:	4606      	mov	r6, r0
 8008570:	b950      	cbnz	r0, 8008588 <__ssputs_r+0x5c>
 8008572:	230c      	movs	r3, #12
 8008574:	f8ca 3000 	str.w	r3, [sl]
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	f04f 30ff 	mov.w	r0, #4294967295
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008588:	6921      	ldr	r1, [r4, #16]
 800858a:	464a      	mov	r2, r9
 800858c:	f000 fabe 	bl	8008b0c <memcpy>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	6126      	str	r6, [r4, #16]
 800859e:	6165      	str	r5, [r4, #20]
 80085a0:	444e      	add	r6, r9
 80085a2:	eba5 0509 	sub.w	r5, r5, r9
 80085a6:	6026      	str	r6, [r4, #0]
 80085a8:	60a5      	str	r5, [r4, #8]
 80085aa:	463e      	mov	r6, r7
 80085ac:	42be      	cmp	r6, r7
 80085ae:	d900      	bls.n	80085b2 <__ssputs_r+0x86>
 80085b0:	463e      	mov	r6, r7
 80085b2:	4632      	mov	r2, r6
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4641      	mov	r1, r8
 80085b8:	f000 fab6 	bl	8008b28 <memmove>
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	1b9b      	subs	r3, r3, r6
 80085c2:	4432      	add	r2, r6
 80085c4:	60a3      	str	r3, [r4, #8]
 80085c6:	6022      	str	r2, [r4, #0]
 80085c8:	2000      	movs	r0, #0
 80085ca:	e7db      	b.n	8008584 <__ssputs_r+0x58>
 80085cc:	462a      	mov	r2, r5
 80085ce:	f000 fb6f 	bl	8008cb0 <_realloc_r>
 80085d2:	4606      	mov	r6, r0
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d1e1      	bne.n	800859c <__ssputs_r+0x70>
 80085d8:	6921      	ldr	r1, [r4, #16]
 80085da:	4650      	mov	r0, sl
 80085dc:	f000 fabe 	bl	8008b5c <_free_r>
 80085e0:	e7c7      	b.n	8008572 <__ssputs_r+0x46>
	...

080085e4 <_svfiprintf_r>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	4698      	mov	r8, r3
 80085ea:	898b      	ldrh	r3, [r1, #12]
 80085ec:	061b      	lsls	r3, r3, #24
 80085ee:	b09d      	sub	sp, #116	; 0x74
 80085f0:	4607      	mov	r7, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	4614      	mov	r4, r2
 80085f6:	d50e      	bpl.n	8008616 <_svfiprintf_r+0x32>
 80085f8:	690b      	ldr	r3, [r1, #16]
 80085fa:	b963      	cbnz	r3, 8008616 <_svfiprintf_r+0x32>
 80085fc:	2140      	movs	r1, #64	; 0x40
 80085fe:	f000 fafd 	bl	8008bfc <_malloc_r>
 8008602:	6028      	str	r0, [r5, #0]
 8008604:	6128      	str	r0, [r5, #16]
 8008606:	b920      	cbnz	r0, 8008612 <_svfiprintf_r+0x2e>
 8008608:	230c      	movs	r3, #12
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	f04f 30ff 	mov.w	r0, #4294967295
 8008610:	e0d1      	b.n	80087b6 <_svfiprintf_r+0x1d2>
 8008612:	2340      	movs	r3, #64	; 0x40
 8008614:	616b      	str	r3, [r5, #20]
 8008616:	2300      	movs	r3, #0
 8008618:	9309      	str	r3, [sp, #36]	; 0x24
 800861a:	2320      	movs	r3, #32
 800861c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008620:	f8cd 800c 	str.w	r8, [sp, #12]
 8008624:	2330      	movs	r3, #48	; 0x30
 8008626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087d0 <_svfiprintf_r+0x1ec>
 800862a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800862e:	f04f 0901 	mov.w	r9, #1
 8008632:	4623      	mov	r3, r4
 8008634:	469a      	mov	sl, r3
 8008636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800863a:	b10a      	cbz	r2, 8008640 <_svfiprintf_r+0x5c>
 800863c:	2a25      	cmp	r2, #37	; 0x25
 800863e:	d1f9      	bne.n	8008634 <_svfiprintf_r+0x50>
 8008640:	ebba 0b04 	subs.w	fp, sl, r4
 8008644:	d00b      	beq.n	800865e <_svfiprintf_r+0x7a>
 8008646:	465b      	mov	r3, fp
 8008648:	4622      	mov	r2, r4
 800864a:	4629      	mov	r1, r5
 800864c:	4638      	mov	r0, r7
 800864e:	f7ff ff6d 	bl	800852c <__ssputs_r>
 8008652:	3001      	adds	r0, #1
 8008654:	f000 80aa 	beq.w	80087ac <_svfiprintf_r+0x1c8>
 8008658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865a:	445a      	add	r2, fp
 800865c:	9209      	str	r2, [sp, #36]	; 0x24
 800865e:	f89a 3000 	ldrb.w	r3, [sl]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80a2 	beq.w	80087ac <_svfiprintf_r+0x1c8>
 8008668:	2300      	movs	r3, #0
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008672:	f10a 0a01 	add.w	sl, sl, #1
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	9307      	str	r3, [sp, #28]
 800867a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800867e:	931a      	str	r3, [sp, #104]	; 0x68
 8008680:	4654      	mov	r4, sl
 8008682:	2205      	movs	r2, #5
 8008684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008688:	4851      	ldr	r0, [pc, #324]	; (80087d0 <_svfiprintf_r+0x1ec>)
 800868a:	f7f7 fda9 	bl	80001e0 <memchr>
 800868e:	9a04      	ldr	r2, [sp, #16]
 8008690:	b9d8      	cbnz	r0, 80086ca <_svfiprintf_r+0xe6>
 8008692:	06d0      	lsls	r0, r2, #27
 8008694:	bf44      	itt	mi
 8008696:	2320      	movmi	r3, #32
 8008698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869c:	0711      	lsls	r1, r2, #28
 800869e:	bf44      	itt	mi
 80086a0:	232b      	movmi	r3, #43	; 0x2b
 80086a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a6:	f89a 3000 	ldrb.w	r3, [sl]
 80086aa:	2b2a      	cmp	r3, #42	; 0x2a
 80086ac:	d015      	beq.n	80086da <_svfiprintf_r+0xf6>
 80086ae:	9a07      	ldr	r2, [sp, #28]
 80086b0:	4654      	mov	r4, sl
 80086b2:	2000      	movs	r0, #0
 80086b4:	f04f 0c0a 	mov.w	ip, #10
 80086b8:	4621      	mov	r1, r4
 80086ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086be:	3b30      	subs	r3, #48	; 0x30
 80086c0:	2b09      	cmp	r3, #9
 80086c2:	d94e      	bls.n	8008762 <_svfiprintf_r+0x17e>
 80086c4:	b1b0      	cbz	r0, 80086f4 <_svfiprintf_r+0x110>
 80086c6:	9207      	str	r2, [sp, #28]
 80086c8:	e014      	b.n	80086f4 <_svfiprintf_r+0x110>
 80086ca:	eba0 0308 	sub.w	r3, r0, r8
 80086ce:	fa09 f303 	lsl.w	r3, r9, r3
 80086d2:	4313      	orrs	r3, r2
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	46a2      	mov	sl, r4
 80086d8:	e7d2      	b.n	8008680 <_svfiprintf_r+0x9c>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	1d19      	adds	r1, r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9103      	str	r1, [sp, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbb      	ittet	lt
 80086e6:	425b      	neglt	r3, r3
 80086e8:	f042 0202 	orrlt.w	r2, r2, #2
 80086ec:	9307      	strge	r3, [sp, #28]
 80086ee:	9307      	strlt	r3, [sp, #28]
 80086f0:	bfb8      	it	lt
 80086f2:	9204      	strlt	r2, [sp, #16]
 80086f4:	7823      	ldrb	r3, [r4, #0]
 80086f6:	2b2e      	cmp	r3, #46	; 0x2e
 80086f8:	d10c      	bne.n	8008714 <_svfiprintf_r+0x130>
 80086fa:	7863      	ldrb	r3, [r4, #1]
 80086fc:	2b2a      	cmp	r3, #42	; 0x2a
 80086fe:	d135      	bne.n	800876c <_svfiprintf_r+0x188>
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	1d1a      	adds	r2, r3, #4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	9203      	str	r2, [sp, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfb8      	it	lt
 800870c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008710:	3402      	adds	r4, #2
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087e0 <_svfiprintf_r+0x1fc>
 8008718:	7821      	ldrb	r1, [r4, #0]
 800871a:	2203      	movs	r2, #3
 800871c:	4650      	mov	r0, sl
 800871e:	f7f7 fd5f 	bl	80001e0 <memchr>
 8008722:	b140      	cbz	r0, 8008736 <_svfiprintf_r+0x152>
 8008724:	2340      	movs	r3, #64	; 0x40
 8008726:	eba0 000a 	sub.w	r0, r0, sl
 800872a:	fa03 f000 	lsl.w	r0, r3, r0
 800872e:	9b04      	ldr	r3, [sp, #16]
 8008730:	4303      	orrs	r3, r0
 8008732:	3401      	adds	r4, #1
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873a:	4826      	ldr	r0, [pc, #152]	; (80087d4 <_svfiprintf_r+0x1f0>)
 800873c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008740:	2206      	movs	r2, #6
 8008742:	f7f7 fd4d 	bl	80001e0 <memchr>
 8008746:	2800      	cmp	r0, #0
 8008748:	d038      	beq.n	80087bc <_svfiprintf_r+0x1d8>
 800874a:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <_svfiprintf_r+0x1f4>)
 800874c:	bb1b      	cbnz	r3, 8008796 <_svfiprintf_r+0x1b2>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	3307      	adds	r3, #7
 8008752:	f023 0307 	bic.w	r3, r3, #7
 8008756:	3308      	adds	r3, #8
 8008758:	9303      	str	r3, [sp, #12]
 800875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875c:	4433      	add	r3, r6
 800875e:	9309      	str	r3, [sp, #36]	; 0x24
 8008760:	e767      	b.n	8008632 <_svfiprintf_r+0x4e>
 8008762:	fb0c 3202 	mla	r2, ip, r2, r3
 8008766:	460c      	mov	r4, r1
 8008768:	2001      	movs	r0, #1
 800876a:	e7a5      	b.n	80086b8 <_svfiprintf_r+0xd4>
 800876c:	2300      	movs	r3, #0
 800876e:	3401      	adds	r4, #1
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	4619      	mov	r1, r3
 8008774:	f04f 0c0a 	mov.w	ip, #10
 8008778:	4620      	mov	r0, r4
 800877a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877e:	3a30      	subs	r2, #48	; 0x30
 8008780:	2a09      	cmp	r2, #9
 8008782:	d903      	bls.n	800878c <_svfiprintf_r+0x1a8>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0c5      	beq.n	8008714 <_svfiprintf_r+0x130>
 8008788:	9105      	str	r1, [sp, #20]
 800878a:	e7c3      	b.n	8008714 <_svfiprintf_r+0x130>
 800878c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008790:	4604      	mov	r4, r0
 8008792:	2301      	movs	r3, #1
 8008794:	e7f0      	b.n	8008778 <_svfiprintf_r+0x194>
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462a      	mov	r2, r5
 800879c:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <_svfiprintf_r+0x1f8>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	4638      	mov	r0, r7
 80087a2:	f3af 8000 	nop.w
 80087a6:	1c42      	adds	r2, r0, #1
 80087a8:	4606      	mov	r6, r0
 80087aa:	d1d6      	bne.n	800875a <_svfiprintf_r+0x176>
 80087ac:	89ab      	ldrh	r3, [r5, #12]
 80087ae:	065b      	lsls	r3, r3, #25
 80087b0:	f53f af2c 	bmi.w	800860c <_svfiprintf_r+0x28>
 80087b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b6:	b01d      	add	sp, #116	; 0x74
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	ab03      	add	r3, sp, #12
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	462a      	mov	r2, r5
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <_svfiprintf_r+0x1f8>)
 80087c4:	a904      	add	r1, sp, #16
 80087c6:	4638      	mov	r0, r7
 80087c8:	f000 f87a 	bl	80088c0 <_printf_i>
 80087cc:	e7eb      	b.n	80087a6 <_svfiprintf_r+0x1c2>
 80087ce:	bf00      	nop
 80087d0:	0800bed9 	.word	0x0800bed9
 80087d4:	0800bee3 	.word	0x0800bee3
 80087d8:	00000000 	.word	0x00000000
 80087dc:	0800852d 	.word	0x0800852d
 80087e0:	0800bedf 	.word	0x0800bedf

080087e4 <_printf_common>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	4616      	mov	r6, r2
 80087ea:	4699      	mov	r9, r3
 80087ec:	688a      	ldr	r2, [r1, #8]
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087f4:	4293      	cmp	r3, r2
 80087f6:	bfb8      	it	lt
 80087f8:	4613      	movlt	r3, r2
 80087fa:	6033      	str	r3, [r6, #0]
 80087fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008800:	4607      	mov	r7, r0
 8008802:	460c      	mov	r4, r1
 8008804:	b10a      	cbz	r2, 800880a <_printf_common+0x26>
 8008806:	3301      	adds	r3, #1
 8008808:	6033      	str	r3, [r6, #0]
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	0699      	lsls	r1, r3, #26
 800880e:	bf42      	ittt	mi
 8008810:	6833      	ldrmi	r3, [r6, #0]
 8008812:	3302      	addmi	r3, #2
 8008814:	6033      	strmi	r3, [r6, #0]
 8008816:	6825      	ldr	r5, [r4, #0]
 8008818:	f015 0506 	ands.w	r5, r5, #6
 800881c:	d106      	bne.n	800882c <_printf_common+0x48>
 800881e:	f104 0a19 	add.w	sl, r4, #25
 8008822:	68e3      	ldr	r3, [r4, #12]
 8008824:	6832      	ldr	r2, [r6, #0]
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	42ab      	cmp	r3, r5
 800882a:	dc26      	bgt.n	800887a <_printf_common+0x96>
 800882c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008830:	1e13      	subs	r3, r2, #0
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	bf18      	it	ne
 8008836:	2301      	movne	r3, #1
 8008838:	0692      	lsls	r2, r2, #26
 800883a:	d42b      	bmi.n	8008894 <_printf_common+0xb0>
 800883c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008840:	4649      	mov	r1, r9
 8008842:	4638      	mov	r0, r7
 8008844:	47c0      	blx	r8
 8008846:	3001      	adds	r0, #1
 8008848:	d01e      	beq.n	8008888 <_printf_common+0xa4>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	68e5      	ldr	r5, [r4, #12]
 800884e:	6832      	ldr	r2, [r6, #0]
 8008850:	f003 0306 	and.w	r3, r3, #6
 8008854:	2b04      	cmp	r3, #4
 8008856:	bf08      	it	eq
 8008858:	1aad      	subeq	r5, r5, r2
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	bf0c      	ite	eq
 8008860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008864:	2500      	movne	r5, #0
 8008866:	4293      	cmp	r3, r2
 8008868:	bfc4      	itt	gt
 800886a:	1a9b      	subgt	r3, r3, r2
 800886c:	18ed      	addgt	r5, r5, r3
 800886e:	2600      	movs	r6, #0
 8008870:	341a      	adds	r4, #26
 8008872:	42b5      	cmp	r5, r6
 8008874:	d11a      	bne.n	80088ac <_printf_common+0xc8>
 8008876:	2000      	movs	r0, #0
 8008878:	e008      	b.n	800888c <_printf_common+0xa8>
 800887a:	2301      	movs	r3, #1
 800887c:	4652      	mov	r2, sl
 800887e:	4649      	mov	r1, r9
 8008880:	4638      	mov	r0, r7
 8008882:	47c0      	blx	r8
 8008884:	3001      	adds	r0, #1
 8008886:	d103      	bne.n	8008890 <_printf_common+0xac>
 8008888:	f04f 30ff 	mov.w	r0, #4294967295
 800888c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008890:	3501      	adds	r5, #1
 8008892:	e7c6      	b.n	8008822 <_printf_common+0x3e>
 8008894:	18e1      	adds	r1, r4, r3
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	2030      	movs	r0, #48	; 0x30
 800889a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800889e:	4422      	add	r2, r4
 80088a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088a8:	3302      	adds	r3, #2
 80088aa:	e7c7      	b.n	800883c <_printf_common+0x58>
 80088ac:	2301      	movs	r3, #1
 80088ae:	4622      	mov	r2, r4
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d0e6      	beq.n	8008888 <_printf_common+0xa4>
 80088ba:	3601      	adds	r6, #1
 80088bc:	e7d9      	b.n	8008872 <_printf_common+0x8e>
	...

080088c0 <_printf_i>:
 80088c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088c4:	460c      	mov	r4, r1
 80088c6:	4691      	mov	r9, r2
 80088c8:	7e27      	ldrb	r7, [r4, #24]
 80088ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088cc:	2f78      	cmp	r7, #120	; 0x78
 80088ce:	4680      	mov	r8, r0
 80088d0:	469a      	mov	sl, r3
 80088d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d6:	d807      	bhi.n	80088e8 <_printf_i+0x28>
 80088d8:	2f62      	cmp	r7, #98	; 0x62
 80088da:	d80a      	bhi.n	80088f2 <_printf_i+0x32>
 80088dc:	2f00      	cmp	r7, #0
 80088de:	f000 80d8 	beq.w	8008a92 <_printf_i+0x1d2>
 80088e2:	2f58      	cmp	r7, #88	; 0x58
 80088e4:	f000 80a3 	beq.w	8008a2e <_printf_i+0x16e>
 80088e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80088ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088f0:	e03a      	b.n	8008968 <_printf_i+0xa8>
 80088f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088f6:	2b15      	cmp	r3, #21
 80088f8:	d8f6      	bhi.n	80088e8 <_printf_i+0x28>
 80088fa:	a001      	add	r0, pc, #4	; (adr r0, 8008900 <_printf_i+0x40>)
 80088fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008900:	08008959 	.word	0x08008959
 8008904:	0800896d 	.word	0x0800896d
 8008908:	080088e9 	.word	0x080088e9
 800890c:	080088e9 	.word	0x080088e9
 8008910:	080088e9 	.word	0x080088e9
 8008914:	080088e9 	.word	0x080088e9
 8008918:	0800896d 	.word	0x0800896d
 800891c:	080088e9 	.word	0x080088e9
 8008920:	080088e9 	.word	0x080088e9
 8008924:	080088e9 	.word	0x080088e9
 8008928:	080088e9 	.word	0x080088e9
 800892c:	08008a79 	.word	0x08008a79
 8008930:	0800899d 	.word	0x0800899d
 8008934:	08008a5b 	.word	0x08008a5b
 8008938:	080088e9 	.word	0x080088e9
 800893c:	080088e9 	.word	0x080088e9
 8008940:	08008a9b 	.word	0x08008a9b
 8008944:	080088e9 	.word	0x080088e9
 8008948:	0800899d 	.word	0x0800899d
 800894c:	080088e9 	.word	0x080088e9
 8008950:	080088e9 	.word	0x080088e9
 8008954:	08008a63 	.word	0x08008a63
 8008958:	680b      	ldr	r3, [r1, #0]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	600a      	str	r2, [r1, #0]
 8008960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008968:	2301      	movs	r3, #1
 800896a:	e0a3      	b.n	8008ab4 <_printf_i+0x1f4>
 800896c:	6825      	ldr	r5, [r4, #0]
 800896e:	6808      	ldr	r0, [r1, #0]
 8008970:	062e      	lsls	r6, r5, #24
 8008972:	f100 0304 	add.w	r3, r0, #4
 8008976:	d50a      	bpl.n	800898e <_printf_i+0xce>
 8008978:	6805      	ldr	r5, [r0, #0]
 800897a:	600b      	str	r3, [r1, #0]
 800897c:	2d00      	cmp	r5, #0
 800897e:	da03      	bge.n	8008988 <_printf_i+0xc8>
 8008980:	232d      	movs	r3, #45	; 0x2d
 8008982:	426d      	negs	r5, r5
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	485e      	ldr	r0, [pc, #376]	; (8008b04 <_printf_i+0x244>)
 800898a:	230a      	movs	r3, #10
 800898c:	e019      	b.n	80089c2 <_printf_i+0x102>
 800898e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008992:	6805      	ldr	r5, [r0, #0]
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	bf18      	it	ne
 8008998:	b22d      	sxthne	r5, r5
 800899a:	e7ef      	b.n	800897c <_printf_i+0xbc>
 800899c:	680b      	ldr	r3, [r1, #0]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	1d18      	adds	r0, r3, #4
 80089a2:	6008      	str	r0, [r1, #0]
 80089a4:	0628      	lsls	r0, r5, #24
 80089a6:	d501      	bpl.n	80089ac <_printf_i+0xec>
 80089a8:	681d      	ldr	r5, [r3, #0]
 80089aa:	e002      	b.n	80089b2 <_printf_i+0xf2>
 80089ac:	0669      	lsls	r1, r5, #25
 80089ae:	d5fb      	bpl.n	80089a8 <_printf_i+0xe8>
 80089b0:	881d      	ldrh	r5, [r3, #0]
 80089b2:	4854      	ldr	r0, [pc, #336]	; (8008b04 <_printf_i+0x244>)
 80089b4:	2f6f      	cmp	r7, #111	; 0x6f
 80089b6:	bf0c      	ite	eq
 80089b8:	2308      	moveq	r3, #8
 80089ba:	230a      	movne	r3, #10
 80089bc:	2100      	movs	r1, #0
 80089be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089c2:	6866      	ldr	r6, [r4, #4]
 80089c4:	60a6      	str	r6, [r4, #8]
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	bfa2      	ittt	ge
 80089ca:	6821      	ldrge	r1, [r4, #0]
 80089cc:	f021 0104 	bicge.w	r1, r1, #4
 80089d0:	6021      	strge	r1, [r4, #0]
 80089d2:	b90d      	cbnz	r5, 80089d8 <_printf_i+0x118>
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	d04d      	beq.n	8008a74 <_printf_i+0x1b4>
 80089d8:	4616      	mov	r6, r2
 80089da:	fbb5 f1f3 	udiv	r1, r5, r3
 80089de:	fb03 5711 	mls	r7, r3, r1, r5
 80089e2:	5dc7      	ldrb	r7, [r0, r7]
 80089e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089e8:	462f      	mov	r7, r5
 80089ea:	42bb      	cmp	r3, r7
 80089ec:	460d      	mov	r5, r1
 80089ee:	d9f4      	bls.n	80089da <_printf_i+0x11a>
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d10b      	bne.n	8008a0c <_printf_i+0x14c>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	07df      	lsls	r7, r3, #31
 80089f8:	d508      	bpl.n	8008a0c <_printf_i+0x14c>
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	6861      	ldr	r1, [r4, #4]
 80089fe:	4299      	cmp	r1, r3
 8008a00:	bfde      	ittt	le
 8008a02:	2330      	movle	r3, #48	; 0x30
 8008a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a0c:	1b92      	subs	r2, r2, r6
 8008a0e:	6122      	str	r2, [r4, #16]
 8008a10:	f8cd a000 	str.w	sl, [sp]
 8008a14:	464b      	mov	r3, r9
 8008a16:	aa03      	add	r2, sp, #12
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	f7ff fee2 	bl	80087e4 <_printf_common>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d14c      	bne.n	8008abe <_printf_i+0x1fe>
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	b004      	add	sp, #16
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	4835      	ldr	r0, [pc, #212]	; (8008b04 <_printf_i+0x244>)
 8008a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	680e      	ldr	r6, [r1, #0]
 8008a38:	061f      	lsls	r7, r3, #24
 8008a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a3e:	600e      	str	r6, [r1, #0]
 8008a40:	d514      	bpl.n	8008a6c <_printf_i+0x1ac>
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	bf44      	itt	mi
 8008a46:	f043 0320 	orrmi.w	r3, r3, #32
 8008a4a:	6023      	strmi	r3, [r4, #0]
 8008a4c:	b91d      	cbnz	r5, 8008a56 <_printf_i+0x196>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f023 0320 	bic.w	r3, r3, #32
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	2310      	movs	r3, #16
 8008a58:	e7b0      	b.n	80089bc <_printf_i+0xfc>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	f043 0320 	orr.w	r3, r3, #32
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	2378      	movs	r3, #120	; 0x78
 8008a64:	4828      	ldr	r0, [pc, #160]	; (8008b08 <_printf_i+0x248>)
 8008a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a6a:	e7e3      	b.n	8008a34 <_printf_i+0x174>
 8008a6c:	065e      	lsls	r6, r3, #25
 8008a6e:	bf48      	it	mi
 8008a70:	b2ad      	uxthmi	r5, r5
 8008a72:	e7e6      	b.n	8008a42 <_printf_i+0x182>
 8008a74:	4616      	mov	r6, r2
 8008a76:	e7bb      	b.n	80089f0 <_printf_i+0x130>
 8008a78:	680b      	ldr	r3, [r1, #0]
 8008a7a:	6826      	ldr	r6, [r4, #0]
 8008a7c:	6960      	ldr	r0, [r4, #20]
 8008a7e:	1d1d      	adds	r5, r3, #4
 8008a80:	600d      	str	r5, [r1, #0]
 8008a82:	0635      	lsls	r5, r6, #24
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	d501      	bpl.n	8008a8c <_printf_i+0x1cc>
 8008a88:	6018      	str	r0, [r3, #0]
 8008a8a:	e002      	b.n	8008a92 <_printf_i+0x1d2>
 8008a8c:	0671      	lsls	r1, r6, #25
 8008a8e:	d5fb      	bpl.n	8008a88 <_printf_i+0x1c8>
 8008a90:	8018      	strh	r0, [r3, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	6123      	str	r3, [r4, #16]
 8008a96:	4616      	mov	r6, r2
 8008a98:	e7ba      	b.n	8008a10 <_printf_i+0x150>
 8008a9a:	680b      	ldr	r3, [r1, #0]
 8008a9c:	1d1a      	adds	r2, r3, #4
 8008a9e:	600a      	str	r2, [r1, #0]
 8008aa0:	681e      	ldr	r6, [r3, #0]
 8008aa2:	6862      	ldr	r2, [r4, #4]
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7f7 fb9a 	bl	80001e0 <memchr>
 8008aac:	b108      	cbz	r0, 8008ab2 <_printf_i+0x1f2>
 8008aae:	1b80      	subs	r0, r0, r6
 8008ab0:	6060      	str	r0, [r4, #4]
 8008ab2:	6863      	ldr	r3, [r4, #4]
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008abc:	e7a8      	b.n	8008a10 <_printf_i+0x150>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	47d0      	blx	sl
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d0ab      	beq.n	8008a24 <_printf_i+0x164>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	079b      	lsls	r3, r3, #30
 8008ad0:	d413      	bmi.n	8008afa <_printf_i+0x23a>
 8008ad2:	68e0      	ldr	r0, [r4, #12]
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	4298      	cmp	r0, r3
 8008ad8:	bfb8      	it	lt
 8008ada:	4618      	movlt	r0, r3
 8008adc:	e7a4      	b.n	8008a28 <_printf_i+0x168>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	47d0      	blx	sl
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d09b      	beq.n	8008a24 <_printf_i+0x164>
 8008aec:	3501      	adds	r5, #1
 8008aee:	68e3      	ldr	r3, [r4, #12]
 8008af0:	9903      	ldr	r1, [sp, #12]
 8008af2:	1a5b      	subs	r3, r3, r1
 8008af4:	42ab      	cmp	r3, r5
 8008af6:	dcf2      	bgt.n	8008ade <_printf_i+0x21e>
 8008af8:	e7eb      	b.n	8008ad2 <_printf_i+0x212>
 8008afa:	2500      	movs	r5, #0
 8008afc:	f104 0619 	add.w	r6, r4, #25
 8008b00:	e7f5      	b.n	8008aee <_printf_i+0x22e>
 8008b02:	bf00      	nop
 8008b04:	0800beea 	.word	0x0800beea
 8008b08:	0800befb 	.word	0x0800befb

08008b0c <memcpy>:
 8008b0c:	440a      	add	r2, r1
 8008b0e:	4291      	cmp	r1, r2
 8008b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b14:	d100      	bne.n	8008b18 <memcpy+0xc>
 8008b16:	4770      	bx	lr
 8008b18:	b510      	push	{r4, lr}
 8008b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b22:	4291      	cmp	r1, r2
 8008b24:	d1f9      	bne.n	8008b1a <memcpy+0xe>
 8008b26:	bd10      	pop	{r4, pc}

08008b28 <memmove>:
 8008b28:	4288      	cmp	r0, r1
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	eb01 0402 	add.w	r4, r1, r2
 8008b30:	d902      	bls.n	8008b38 <memmove+0x10>
 8008b32:	4284      	cmp	r4, r0
 8008b34:	4623      	mov	r3, r4
 8008b36:	d807      	bhi.n	8008b48 <memmove+0x20>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	42a1      	cmp	r1, r4
 8008b3c:	d008      	beq.n	8008b50 <memmove+0x28>
 8008b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b46:	e7f8      	b.n	8008b3a <memmove+0x12>
 8008b48:	4402      	add	r2, r0
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	d100      	bne.n	8008b52 <memmove+0x2a>
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b5a:	e7f7      	b.n	8008b4c <memmove+0x24>

08008b5c <_free_r>:
 8008b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	d048      	beq.n	8008bf4 <_free_r+0x98>
 8008b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b66:	9001      	str	r0, [sp, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b6e:	bfb8      	it	lt
 8008b70:	18e4      	addlt	r4, r4, r3
 8008b72:	f000 f8d3 	bl	8008d1c <__malloc_lock>
 8008b76:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <_free_r+0x9c>)
 8008b78:	9801      	ldr	r0, [sp, #4]
 8008b7a:	6813      	ldr	r3, [r2, #0]
 8008b7c:	4615      	mov	r5, r2
 8008b7e:	b933      	cbnz	r3, 8008b8e <_free_r+0x32>
 8008b80:	6063      	str	r3, [r4, #4]
 8008b82:	6014      	str	r4, [r2, #0]
 8008b84:	b003      	add	sp, #12
 8008b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b8a:	f000 b8cd 	b.w	8008d28 <__malloc_unlock>
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	d90b      	bls.n	8008baa <_free_r+0x4e>
 8008b92:	6821      	ldr	r1, [r4, #0]
 8008b94:	1862      	adds	r2, r4, r1
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bf04      	itt	eq
 8008b9a:	681a      	ldreq	r2, [r3, #0]
 8008b9c:	685b      	ldreq	r3, [r3, #4]
 8008b9e:	6063      	str	r3, [r4, #4]
 8008ba0:	bf04      	itt	eq
 8008ba2:	1852      	addeq	r2, r2, r1
 8008ba4:	6022      	streq	r2, [r4, #0]
 8008ba6:	602c      	str	r4, [r5, #0]
 8008ba8:	e7ec      	b.n	8008b84 <_free_r+0x28>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x58>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x4e>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1855      	adds	r5, r2, r1
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x78>
 8008bbc:	6824      	ldr	r4, [r4, #0]
 8008bbe:	4421      	add	r1, r4
 8008bc0:	1854      	adds	r4, r2, r1
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1dd      	bne.n	8008b84 <_free_r+0x28>
 8008bc8:	681c      	ldr	r4, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4421      	add	r1, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	e7d7      	b.n	8008b84 <_free_r+0x28>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x80>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7d3      	b.n	8008b84 <_free_r+0x28>
 8008bdc:	6825      	ldr	r5, [r4, #0]
 8008bde:	1961      	adds	r1, r4, r5
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1949      	addeq	r1, r1, r5
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7c7      	b.n	8008b84 <_free_r+0x28>
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	200000c8 	.word	0x200000c8

08008bfc <_malloc_r>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	1ccd      	adds	r5, r1, #3
 8008c00:	f025 0503 	bic.w	r5, r5, #3
 8008c04:	3508      	adds	r5, #8
 8008c06:	2d0c      	cmp	r5, #12
 8008c08:	bf38      	it	cc
 8008c0a:	250c      	movcc	r5, #12
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	4606      	mov	r6, r0
 8008c10:	db01      	blt.n	8008c16 <_malloc_r+0x1a>
 8008c12:	42a9      	cmp	r1, r5
 8008c14:	d903      	bls.n	8008c1e <_malloc_r+0x22>
 8008c16:	230c      	movs	r3, #12
 8008c18:	6033      	str	r3, [r6, #0]
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1e:	f000 f87d 	bl	8008d1c <__malloc_lock>
 8008c22:	4921      	ldr	r1, [pc, #132]	; (8008ca8 <_malloc_r+0xac>)
 8008c24:	680a      	ldr	r2, [r1, #0]
 8008c26:	4614      	mov	r4, r2
 8008c28:	b99c      	cbnz	r4, 8008c52 <_malloc_r+0x56>
 8008c2a:	4f20      	ldr	r7, [pc, #128]	; (8008cac <_malloc_r+0xb0>)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	b923      	cbnz	r3, 8008c3a <_malloc_r+0x3e>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 f862 	bl	8008cfc <_sbrk_r>
 8008c38:	6038      	str	r0, [r7, #0]
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 f85d 	bl	8008cfc <_sbrk_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	d123      	bne.n	8008c8e <_malloc_r+0x92>
 8008c46:	230c      	movs	r3, #12
 8008c48:	6033      	str	r3, [r6, #0]
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f000 f86c 	bl	8008d28 <__malloc_unlock>
 8008c50:	e7e3      	b.n	8008c1a <_malloc_r+0x1e>
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	1b5b      	subs	r3, r3, r5
 8008c56:	d417      	bmi.n	8008c88 <_malloc_r+0x8c>
 8008c58:	2b0b      	cmp	r3, #11
 8008c5a:	d903      	bls.n	8008c64 <_malloc_r+0x68>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	441c      	add	r4, r3
 8008c60:	6025      	str	r5, [r4, #0]
 8008c62:	e004      	b.n	8008c6e <_malloc_r+0x72>
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	42a2      	cmp	r2, r4
 8008c68:	bf0c      	ite	eq
 8008c6a:	600b      	streq	r3, [r1, #0]
 8008c6c:	6053      	strne	r3, [r2, #4]
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f000 f85a 	bl	8008d28 <__malloc_unlock>
 8008c74:	f104 000b 	add.w	r0, r4, #11
 8008c78:	1d23      	adds	r3, r4, #4
 8008c7a:	f020 0007 	bic.w	r0, r0, #7
 8008c7e:	1ac2      	subs	r2, r0, r3
 8008c80:	d0cc      	beq.n	8008c1c <_malloc_r+0x20>
 8008c82:	1a1b      	subs	r3, r3, r0
 8008c84:	50a3      	str	r3, [r4, r2]
 8008c86:	e7c9      	b.n	8008c1c <_malloc_r+0x20>
 8008c88:	4622      	mov	r2, r4
 8008c8a:	6864      	ldr	r4, [r4, #4]
 8008c8c:	e7cc      	b.n	8008c28 <_malloc_r+0x2c>
 8008c8e:	1cc4      	adds	r4, r0, #3
 8008c90:	f024 0403 	bic.w	r4, r4, #3
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d0e3      	beq.n	8008c60 <_malloc_r+0x64>
 8008c98:	1a21      	subs	r1, r4, r0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f000 f82e 	bl	8008cfc <_sbrk_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d1dd      	bne.n	8008c60 <_malloc_r+0x64>
 8008ca4:	e7cf      	b.n	8008c46 <_malloc_r+0x4a>
 8008ca6:	bf00      	nop
 8008ca8:	200000c8 	.word	0x200000c8
 8008cac:	200000cc 	.word	0x200000cc

08008cb0 <_realloc_r>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	4614      	mov	r4, r2
 8008cb6:	460e      	mov	r6, r1
 8008cb8:	b921      	cbnz	r1, 8008cc4 <_realloc_r+0x14>
 8008cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	f7ff bf9c 	b.w	8008bfc <_malloc_r>
 8008cc4:	b922      	cbnz	r2, 8008cd0 <_realloc_r+0x20>
 8008cc6:	f7ff ff49 	bl	8008b5c <_free_r>
 8008cca:	4625      	mov	r5, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd0:	f000 f830 	bl	8008d34 <_malloc_usable_size_r>
 8008cd4:	42a0      	cmp	r0, r4
 8008cd6:	d20f      	bcs.n	8008cf8 <_realloc_r+0x48>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f7ff ff8e 	bl	8008bfc <_malloc_r>
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d0f2      	beq.n	8008ccc <_realloc_r+0x1c>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4622      	mov	r2, r4
 8008cea:	f7ff ff0f 	bl	8008b0c <memcpy>
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7ff ff33 	bl	8008b5c <_free_r>
 8008cf6:	e7e9      	b.n	8008ccc <_realloc_r+0x1c>
 8008cf8:	4635      	mov	r5, r6
 8008cfa:	e7e7      	b.n	8008ccc <_realloc_r+0x1c>

08008cfc <_sbrk_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_sbrk_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7fa fcd0 	bl	80036ac <_sbrk>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_sbrk_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_sbrk_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20000390 	.word	0x20000390

08008d1c <__malloc_lock>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	; (8008d24 <__malloc_lock+0x8>)
 8008d1e:	f000 b811 	b.w	8008d44 <__retarget_lock_acquire_recursive>
 8008d22:	bf00      	nop
 8008d24:	20000398 	.word	0x20000398

08008d28 <__malloc_unlock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_unlock+0x8>)
 8008d2a:	f000 b80c 	b.w	8008d46 <__retarget_lock_release_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20000398 	.word	0x20000398

08008d34 <_malloc_usable_size_r>:
 8008d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d38:	1f18      	subs	r0, r3, #4
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bfbc      	itt	lt
 8008d3e:	580b      	ldrlt	r3, [r1, r0]
 8008d40:	18c0      	addlt	r0, r0, r3
 8008d42:	4770      	bx	lr

08008d44 <__retarget_lock_acquire_recursive>:
 8008d44:	4770      	bx	lr

08008d46 <__retarget_lock_release_recursive>:
 8008d46:	4770      	bx	lr

08008d48 <_init>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	bf00      	nop
 8008d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d4e:	bc08      	pop	{r3}
 8008d50:	469e      	mov	lr, r3
 8008d52:	4770      	bx	lr

08008d54 <_fini>:
 8008d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d56:	bf00      	nop
 8008d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d5a:	bc08      	pop	{r3}
 8008d5c:	469e      	mov	lr, r3
 8008d5e:	4770      	bx	lr
